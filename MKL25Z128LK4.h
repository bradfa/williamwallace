//////////////////////////////////////////////////////////////////////////////////////
// File: MKL25Z128LK4.h
// Purpose: Define the peripheral registers.
// This file has been automatically generated from the APIF knowledgebase
//
// Revisions:
// - rev. 1.0 (2011-06-01)
//     Initial public version.
// - rev. 1.1 (2012-03-13)
//     Bit/group constants related to 32-bit registers typecasted to uint32_t.
//
//////////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
//
//////////////////////////////////////////////////////////////////////////////////////
// Generic Bit Definitions Used Elsewhere in this File
//
// Peripheral Base Address Defines in Alphabetical Order
//
#define  ADC0_BASE_PTR               ((uint8_t *) (0x4003B000u))

#define  CMP0_BASE_PTR               ((uint8_t *) (0x40073000u))

#define  DAC0_BASE_PTR               ((uint8_t *) (0x4003F000u))

#define  DMA_BASE_PTR                ((uint8_t *) (0x40008000u))

#define  DMAMUX0_BASE_PTR            ((uint8_t *) (0x40021000u))

#define  FTFA_BASE_PTR               ((uint8_t *) (0x40020000u))

#define  FTM0_BASE_PTR               ((uint32_t *) (0x40038000u))

#define  FTM1_BASE_PTR               ((uint32_t *) (0x40039000u))

#define  FTM2_BASE_PTR               ((uint32_t *) (0x4003A000u))

#define  GPIOA_BASE_PTR              ((uint8_t *) (0x400FF000u))

#define  GPIOB_BASE_PTR              ((uint8_t *) (0x400FF040u))

#define  GPIOC_BASE_PTR              ((uint8_t *) (0x400FF080u))

#define  GPIOD_BASE_PTR              ((uint8_t *) (0x400FF0C0u))

#define  GPIOE_BASE_PTR              ((uint8_t *) (0x400FF100u))

#define  I2C0_BASE_PTR               ((uint8_t *) (0x40066000u))

#define  I2C1_BASE_PTR               ((uint8_t *) (0x40067000u))

#define  LLWU_BASE_PTR               ((uint8_t *) (0x4007C000u))

#define  LPTMR0_BASE_PTR             ((uint32_t *) (0x40040000u))

#define  MCG_BASE_PTR                ((uint8_t *) (0x40064000u))

#define  MCM_BASE_PTR                ((uint8_t *) (0xF0003000u))

#define  MTB_BASE_PTR                ((uint8_t *) (0xF0000000u))

#define  MTBDWT_BASE_PTR             ((uint8_t *) (0xF0001000u))

#define  OSC0_BASE_PTR               ((uint8_t *) (0x40065000u))

#define  PIT_BASE_PTR                ((uint32_t *) (0x40037000u))

#define  PMC_BASE_PTR                ((uint8_t *) (0x4007D000u))

#define  PORTA_BASE_PTR              ((uint8_t *) (0x40049000u))

#define  PORTB_BASE_PTR              ((uint8_t *) (0x4004A000u))

#define  PORTC_BASE_PTR              ((uint8_t *) (0x4004B000u))

#define  PORTD_BASE_PTR              ((uint8_t *) (0x4004C000u))

#define  PORTE_BASE_PTR              ((uint8_t *) (0x4004D000u))

#define  RCM_BASE_PTR                ((uint8_t *) (0x4007F000u))

#define  ROM_BASE_PTR                ((uint8_t *) (0xF0002000u))

#define  RTC_BASE_PTR                ((uint8_t *) (0x4003D000u))

#define  SIM_BASE_PTR                ((uint8_t *) (0x40047000u))

#define  SMC_BASE_PTR                ((uint8_t *) (0x4007E000u))

#define  SPI0_BASE_PTR               ((uint8_t *) (0x40076000u))

#define  SPI1_BASE_PTR               ((uint8_t *) (0x40077000u))

#define  TSI0_BASE_PTR               ((uint8_t *) (0x40045000u))

#define  UART0_BASE              ((uint8_t *) (0x4006A000u))
/*
#define  UART1_BASE_PTR              ((uint8_t *) (0x4006B000u))

#define  UART2_BASE_PTR              ((uint8_t *) (0x4006C000u))
*/
#define  USB0_BASE_PTR               ((uint8_t *) (0x40072000u))


//////////////////////////////////////////////////////////////////////////////////////
// The following section defines the IO register locations.
//////////////////////////////////////////////////////////////////////////////////////

#define  ADC0_SC1A                   (*(uint32_t *) (0x4003B000))

#define  ADC0_SC1B                   (*(uint32_t *) (0x4003B004))

#define  ADC0_CFG1                   (*(uint32_t *) (0x4003B008))

#define  ADC0_CFG2                   (*(uint32_t *) (0x4003B00C))

#define  ADC0_RA                     (*(uint32_t *) (0x4003B010))

#define  ADC0_RB                     (*(uint32_t *) (0x4003B014))

#define  ADC0_CV1                    (*(uint32_t *) (0x4003B018))

#define  ADC0_CV2                    (*(uint32_t *) (0x4003B01C))

#define  ADC0_SC2                    (*(uint32_t *) (0x4003B020))

#define  ADC0_SC3                    (*(uint32_t *) (0x4003B024))

#define  ADC0_OFS                    (*(uint32_t *) (0x4003B028))

#define  ADC0_PG                     (*(uint32_t *) (0x4003B02C))

#define  ADC0_MG                     (*(uint32_t *) (0x4003B030))

#define  ADC0_CLPD                   (*(uint32_t *) (0x4003B034))

#define  ADC0_CLPS                   (*(uint32_t *) (0x4003B038))

#define  ADC0_CLP4                   (*(uint32_t *) (0x4003B03C))

#define  ADC0_CLP3                   (*(uint32_t *) (0x4003B040))

#define  ADC0_CLP2                   (*(uint32_t *) (0x4003B044))

#define  ADC0_CLP1                   (*(uint32_t *) (0x4003B048))

#define  ADC0_CLP0                   (*(uint32_t *) (0x4003B04C))

#define  ADC0_CLMD                   (*(uint32_t *) (0x4003B054))

#define  ADC0_CLMS                   (*(uint32_t *) (0x4003B058))

#define  ADC0_CLM4                   (*(uint32_t *) (0x4003B05C))

#define  ADC0_CLM3                   (*(uint32_t *) (0x4003B060))

#define  ADC0_CLM2                   (*(uint32_t *) (0x4003B064))

#define  ADC0_CLM1                   (*(uint32_t *) (0x4003B068))

#define  ADC0_CLM0                   (*(uint32_t *) (0x4003B06C))

#define  CMP0_CR0                    (*(uint8_t *) (0x40073000))

#define  CMP0_CR1                    (*(uint8_t *) (0x40073001))

#define  CMP0_FPR                    (*(uint8_t *) (0x40073002))

#define  CMP0_SCR                    (*(uint8_t *) (0x40073003))

#define  CMP0_DACCR                  (*(uint8_t *) (0x40073004))

#define  CMP0_MUXCR                  (*(uint8_t *) (0x40073005))

#define  DAC0_DAT0L                  (*(uint8_t *) (0x4003F000))

#define  DAC0_DAT0H                  (*(uint8_t *) (0x4003F001))

#define  DAC0_DAT1L                  (*(uint8_t *) (0x4003F002))

#define  DAC0_DAT1H                  (*(uint8_t *) (0x4003F003))

#define  DAC0_SR                     (*(uint8_t *) (0x4003F020))

#define  DAC0_C0                     (*(uint8_t *) (0x4003F021))

#define  DAC0_C1                     (*(uint8_t *) (0x4003F022))

#define  DAC0_C2                     (*(uint8_t *) (0x4003F023))

#define  DMA_SAR0                    (*(uint32_t *) (0x40008100))

#define  DMA_DAR0                    (*(uint32_t *) (0x40008104))

#define  DMA_DSR_BCR0                (*(uint32_t *) (0x40008108))

#define  DMA_DCR0                    (*(uint32_t *) (0x4000810C))

#define  DMA_SAR1                    (*(uint32_t *) (0x40008110))

#define  DMA_DAR1                    (*(uint32_t *) (0x40008114))

#define  DMA_DSR_BCR1                (*(uint32_t *) (0x40008118))

#define  DMA_DCR1                    (*(uint32_t *) (0x4000811C))

#define  DMA_SAR2                    (*(uint32_t *) (0x40008120))

#define  DMA_DAR2                    (*(uint32_t *) (0x40008124))

#define  DMA_DSR_BCR2                (*(uint32_t *) (0x40008128))

#define  DMA_DCR2                    (*(uint32_t *) (0x4000812C))

#define  DMA_SAR3                    (*(uint32_t *) (0x40008130))

#define  DMA_DAR3                    (*(uint32_t *) (0x40008134))

#define  DMA_DSR_BCR3                (*(uint32_t *) (0x40008138))

#define  DMA_DCR3                    (*(uint32_t *) (0x4000813C))

#define  DMAMUX0_CHCFG0              (*(uint8_t *) (0x40021000))

#define  DMAMUX0_CHCFG1              (*(uint8_t *) (0x40021001))

#define  DMAMUX0_CHCFG2              (*(uint8_t *) (0x40021002))

#define  DMAMUX0_CHCFG3              (*(uint8_t *) (0x40021003))

#define  FTFA_FSTAT                  (*(uint8_t *) (0x40020000))

#define  FTFA_FCNFG                  (*(uint8_t *) (0x40020001))

#define  FTFA_FSEC                   (*(uint8_t *) (0x40020002))

#define  FTFA_FOPT                   (*(uint8_t *) (0x40020003))

#define  FTFA_FCCOB3                 (*(uint8_t *) (0x40020004))

#define  FTFA_FCCOB2                 (*(uint8_t *) (0x40020005))

#define  FTFA_FCCOB1                 (*(uint8_t *) (0x40020006))

#define  FTFA_FCCOB0                 (*(uint8_t *) (0x40020007))

#define  FTFA_FCCOB7                 (*(uint8_t *) (0x40020008))

#define  FTFA_FCCOB6                 (*(uint8_t *) (0x40020009))

#define  FTFA_FCCOB5                 (*(uint8_t *) (0x4002000A))

#define  FTFA_FCCOB4                 (*(uint8_t *) (0x4002000B))

#define  FTFA_FCCOBB                 (*(uint8_t *) (0x4002000C))

#define  FTFA_FCCOBA                 (*(uint8_t *) (0x4002000D))

#define  FTFA_FCCOB9                 (*(uint8_t *) (0x4002000E))

#define  FTFA_FCCOB8                 (*(uint8_t *) (0x4002000F))

#define  FTFA_FPROT3                 (*(uint8_t *) (0x40020010))

#define  FTFA_FPROT2                 (*(uint8_t *) (0x40020011))

#define  FTFA_FPROT1                 (*(uint8_t *) (0x40020012))

#define  FTFA_FPROT0                 (*(uint8_t *) (0x40020013))

#define  FTM0_SC                     (*(uint32_t *) (0x40038000))

#define  FTM0_CNT                    (*(uint32_t *) (0x40038004))

#define  FTM0_MOD                    (*(uint32_t *) (0x40038008))

#define  FTM0_C0SC                   (*(uint32_t *) (0x4003800C))

#define  FTM0_C0V                    (*(uint32_t *) (0x40038010))

#define  FTM0_C1SC                   (*(uint32_t *) (0x40038014))

#define  FTM0_C1V                    (*(uint32_t *) (0x40038018))

#define  FTM0_C2SC                   (*(uint32_t *) (0x4003801C))

#define  FTM0_C2V                    (*(uint32_t *) (0x40038020))

#define  FTM0_C3SC                   (*(uint32_t *) (0x40038024))

#define  FTM0_C3V                    (*(uint32_t *) (0x40038028))

#define  FTM0_C4SC                   (*(uint32_t *) (0x4003802C))

#define  FTM0_C4V                    (*(uint32_t *) (0x40038030))

#define  FTM0_C5SC                   (*(uint32_t *) (0x40038034))

#define  FTM0_C5V                    (*(uint32_t *) (0x40038038))

#define  FTM0_STATUS                 (*(uint32_t *) (0x40038050))

#define  FTM0_CONF                   (*(uint32_t *) (0x40038084))

#define  FTM1_SC                     (*(uint32_t *) (0x40039000))

#define  FTM1_CNT                    (*(uint32_t *) (0x40039004))

#define  FTM1_MOD                    (*(uint32_t *) (0x40039008))

#define  FTM1_C0SC                   (*(uint32_t *) (0x4003900C))

#define  FTM1_C0V                    (*(uint32_t *) (0x40039010))

#define  FTM1_C1SC                   (*(uint32_t *) (0x40039014))

#define  FTM1_C1V                    (*(uint32_t *) (0x40039018))

#define  FTM1_C2SC                   (*(uint32_t *) (0x4003901C))

#define  FTM1_C2V                    (*(uint32_t *) (0x40039020))

#define  FTM1_C3SC                   (*(uint32_t *) (0x40039024))

#define  FTM1_C3V                    (*(uint32_t *) (0x40039028))

#define  FTM1_C4SC                   (*(uint32_t *) (0x4003902C))

#define  FTM1_C4V                    (*(uint32_t *) (0x40039030))

#define  FTM1_C5SC                   (*(uint32_t *) (0x40039034))

#define  FTM1_C5V                    (*(uint32_t *) (0x40039038))

#define  FTM1_STATUS                 (*(uint32_t *) (0x40039050))

#define  FTM1_CONF                   (*(uint32_t *) (0x40039084))

#define  FTM2_SC                     (*(uint32_t *) (0x4003A000))

#define  FTM2_CNT                    (*(uint32_t *) (0x4003A004))

#define  FTM2_MOD                    (*(uint32_t *) (0x4003A008))

#define  FTM2_C0SC                   (*(uint32_t *) (0x4003A00C))

#define  FTM2_C0V                    (*(uint32_t *) (0x4003A010))

#define  FTM2_C1SC                   (*(uint32_t *) (0x4003A014))

#define  FTM2_C1V                    (*(uint32_t *) (0x4003A018))

#define  FTM2_C2SC                   (*(uint32_t *) (0x4003A01C))

#define  FTM2_C2V                    (*(uint32_t *) (0x4003A020))

#define  FTM2_C3SC                   (*(uint32_t *) (0x4003A024))

#define  FTM2_C3V                    (*(uint32_t *) (0x4003A028))

#define  FTM2_C4SC                   (*(uint32_t *) (0x4003A02C))

#define  FTM2_C4V                    (*(uint32_t *) (0x4003A030))

#define  FTM2_C5SC                   (*(uint32_t *) (0x4003A034))

#define  FTM2_C5V                    (*(uint32_t *) (0x4003A038))

#define  FTM2_STATUS                 (*(uint32_t *) (0x4003A050))

#define  FTM2_CONF                   (*(uint32_t *) (0x4003A084))

#define  GPIOA_PDOR                  (*(uint32_t *) (0x400FF000))

#define  GPIOA_PSOR                  (*(uint32_t *) (0x400FF004))

#define  GPIOA_PCOR                  (*(uint32_t *) (0x400FF008))

#define  GPIOA_PTOR                  (*(uint32_t *) (0x400FF00C))

#define  GPIOA_PDIR                  (*(uint32_t *) (0x400FF010))

#define  GPIOA_PDDR                  (*(uint32_t *) (0x400FF014))

#define  GPIOB_PDOR                  (*(uint32_t *) (0x400FF040))

#define  GPIOB_PSOR                  (*(uint32_t *) (0x400FF044))

#define  GPIOB_PCOR                  (*(uint32_t *) (0x400FF048))

#define  GPIOB_PTOR                  (*(uint32_t *) (0x400FF04C))

#define  GPIOB_PDIR                  (*(uint32_t *) (0x400FF050))

#define  GPIOB_PDDR                  (*(uint32_t *) (0x400FF054))

#define  GPIOC_PDOR                  (*(uint32_t *) (0x400FF080))

#define  GPIOC_PSOR                  (*(uint32_t *) (0x400FF084))

#define  GPIOC_PCOR                  (*(uint32_t *) (0x400FF088))

#define  GPIOC_PTOR                  (*(uint32_t *) (0x400FF08C))

#define  GPIOC_PDIR                  (*(uint32_t *) (0x400FF090))

#define  GPIOC_PDDR                  (*(uint32_t *) (0x400FF094))

#define  GPIOD_PDOR                  (*(uint32_t *) (0x400FF0C0))

#define  GPIOD_PSOR                  (*(uint32_t *) (0x400FF0C4))

#define  GPIOD_PCOR                  (*(uint32_t *) (0x400FF0C8))

#define  GPIOD_PTOR                  (*(uint32_t *) (0x400FF0CC))

#define  GPIOD_PDIR                  (*(uint32_t *) (0x400FF0D0))

#define  GPIOD_PDDR                  (*(uint32_t *) (0x400FF0D4))

#define  GPIOE_PDOR                  (*(uint32_t *) (0x400FF100))

#define  GPIOE_PSOR                  (*(uint32_t *) (0x400FF104))

#define  GPIOE_PCOR                  (*(uint32_t *) (0x400FF108))

#define  GPIOE_PTOR                  (*(uint32_t *) (0x400FF10C))

#define  GPIOE_PDIR                  (*(uint32_t *) (0x400FF110))

#define  GPIOE_PDDR                  (*(uint32_t *) (0x400FF114))

#define  I2C0_A1                     (*(uint8_t *) (0x40066000))

#define  I2C0_F                      (*(uint8_t *) (0x40066001))

#define  I2C0_C1                     (*(uint8_t *) (0x40066002))

#define  I2C0_S                      (*(uint8_t *) (0x40066003))

#define  I2C0_D                      (*(uint8_t *) (0x40066004))

#define  I2C0_C2                     (*(uint8_t *) (0x40066005))

#define  I2C0_FLT                    (*(uint8_t *) (0x40066006))

#define  I2C0_RA                     (*(uint8_t *) (0x40066007))

#define  I2C0_SMB                    (*(uint8_t *) (0x40066008))

#define  I2C0_A2                     (*(uint8_t *) (0x40066009))

#define  I2C0_SLTH                   (*(uint8_t *) (0x4006600A))

#define  I2C0_SLTL                   (*(uint8_t *) (0x4006600B))

#define  I2C1_A1                     (*(uint8_t *) (0x40067000))

#define  I2C1_F                      (*(uint8_t *) (0x40067001))

#define  I2C1_C1                     (*(uint8_t *) (0x40067002))

#define  I2C1_S                      (*(uint8_t *) (0x40067003))

#define  I2C1_D                      (*(uint8_t *) (0x40067004))

#define  I2C1_C2                     (*(uint8_t *) (0x40067005))

#define  I2C1_FLT                    (*(uint8_t *) (0x40067006))

#define  I2C1_RA                     (*(uint8_t *) (0x40067007))

#define  I2C1_SMB                    (*(uint8_t *) (0x40067008))

#define  I2C1_A2                     (*(uint8_t *) (0x40067009))

#define  I2C1_SLTH                   (*(uint8_t *) (0x4006700A))

#define  I2C1_SLTL                   (*(uint8_t *) (0x4006700B))

#define  LLWU_PE1                    (*(uint8_t *) (0x4007C000))

#define  LLWU_PE2                    (*(uint8_t *) (0x4007C001))

#define  LLWU_PE3                    (*(uint8_t *) (0x4007C002))

#define  LLWU_PE4                    (*(uint8_t *) (0x4007C003))

#define  LLWU_ME                     (*(uint8_t *) (0x4007C004))

#define  LLWU_F1                     (*(uint8_t *) (0x4007C005))

#define  LLWU_F2                     (*(uint8_t *) (0x4007C006))

#define  LLWU_F3                     (*(uint8_t *) (0x4007C007))

#define  LLWU_FILT1                  (*(uint8_t *) (0x4007C008))

#define  LLWU_FILT2                  (*(uint8_t *) (0x4007C009))

#define  LPTMR0_CSR                  (*(uint32_t *) (0x40040000))

#define  LPTMR0_PSR                  (*(uint32_t *) (0x40040004))

#define  LPTMR0_CMR                  (*(uint32_t *) (0x40040008))

#define  LPTMR0_CNR                  (*(uint32_t *) (0x4004000C))

#define  MCG_C1                      (*(uint8_t *) (0x40064000))

#define  MCG_C2                      (*(uint8_t *) (0x40064001))

#define  MCG_C3                      (*(uint8_t *) (0x40064002))

#define  MCG_C4                      (*(uint8_t *) (0x40064003))

#define  MCG_C5                      (*(uint8_t *) (0x40064004))

#define  MCG_C6                      (*(uint8_t *) (0x40064005))

#define  MCG_S                       (*(uint8_t *) (0x40064006))

#define  MCG_SC                      (*(uint8_t *) (0x40064008))

#define  MCG_ATCVH                   (*(uint8_t *) (0x4006400A))

#define  MCG_ATCVL                   (*(uint8_t *) (0x4006400B))

#define  MCG_C7                      (*(uint8_t *) (0x4006400C))

#define  MCG_C8                      (*(uint8_t *) (0x4006400D))

#define  MCG_C9                      (*(uint8_t *) (0x4006400E))

#define  MCG_C10                     (*(uint8_t *) (0x4006400F))

#define  MCM_PLASC                   (*(uint16_t *) (0xF0003008))

#define  MCM_PLAMC                   (*(uint16_t *) (0xF000300A))

#define  MCM_PLACR                   (*(uint32_t *) (0xF000300C))

#define  MCM_CPO                     (*(uint32_t *) (0xF0003040))

#define  MTB_POSITION                (*(uint32_t *) (0xF0000000))

#define  MTB_MASTER                  (*(uint32_t *) (0xF0000004))

#define  MTB_FLOW                    (*(uint32_t *) (0xF0000008))

#define  MTB_BASE                    (*(uint32_t *) (0xF000000C))

#define  MTB_MODECTRL                (*(uint32_t *) (0xF0000F00))

#define  MTB_TAGSET                  (*(uint32_t *) (0xF0000FA0))

#define  MTB_TAGCLEAR                (*(uint32_t *) (0xF0000FA4))

#define  MTB_LOCKACCESS              (*(uint32_t *) (0xF0000FB0))

#define  MTB_LOCKSTAT                (*(uint32_t *) (0xF0000FB4))

#define  MTB_AUTHSTAT                (*(uint32_t *) (0xF0000FB8))

#define  MTB_DEVICEARCH              (*(uint32_t *) (0xF0000FBC))

#define  MTB_DEVICECFG               (*(uint32_t *) (0xF0000FC8))

#define  MTB_DEVICETYPID             (*(uint32_t *) (0xF0000FCC))

#define  MTB_PERIPHID4               (*(uint32_t *) (0xF0000FD0))

#define  MTB_PERIPHID5               (*(uint32_t *) (0xF0000FD4))

#define  MTB_PERIPHID6               (*(uint32_t *) (0xF0000FD8))

#define  MTB_PERIPHID7               (*(uint32_t *) (0xF0000FDC))

#define  MTB_PERIPHID0               (*(uint32_t *) (0xF0000FE0))

#define  MTB_PERIPHID1               (*(uint32_t *) (0xF0000FE4))

#define  MTB_PERIPHID2               (*(uint32_t *) (0xF0000FE8))

#define  MTB_PERIPHID3               (*(uint32_t *) (0xF0000FEC))

#define  MTB_COMPID0                 (*(uint32_t *) (0xF0000FF0))

#define  MTB_COMPID1                 (*(uint32_t *) (0xF0000FF4))

#define  MTB_COMPID2                 (*(uint32_t *) (0xF0000FF8))

#define  MTB_COMPID3                 (*(uint32_t *) (0xF0000FFC))

#define  MTBDWT_CTRL                 (*(uint32_t *) (0xF0002000))

#define  MTBDWT_COMP0                (*(uint32_t *) (0xF0002020))

#define  MTBDWT_MASK0                (*(uint32_t *) (0xF0002024))

#define  MTBDWT_MASK1                (*(uint32_t *) (0xF000202E))

#define  MTBDWT_COMP1                (*(uint32_t *) (0xF0002030))

#define  MTBDWT_FCT1                 (*(uint32_t *) (0xF0002038))

#define  MTBDWT_TBCTRL               (*(uint32_t *) (0xF0002200))

#define  MTBDWT_DEVICECFG            (*(uint32_t *) (0xF0002FC8))

#define  MTBDWT_DEVICETYPID          (*(uint32_t *) (0xF0002FCC))

#define  MTBDWT_PERIPHID4            (*(uint32_t *) (0xF0002FD0))

#define  MTBDWT_PERIPHID5            (*(uint32_t *) (0xF0002FD4))

#define  MTBDWT_PERIPHID6            (*(uint32_t *) (0xF0002FD8))

#define  MTBDWT_PERIPHID7            (*(uint32_t *) (0xF0002FDC))

#define  MTBDWT_PERIPHID0            (*(uint32_t *) (0xF0002FE0))

#define  MTBDWT_PERIPHID1            (*(uint32_t *) (0xF0002FE4))

#define  MTBDWT_PERIPHID2            (*(uint32_t *) (0xF0002FE8))

#define  MTBDWT_PERIPHID3            (*(uint32_t *) (0xF0002FEC))

#define  MTBDWT_COMPID0              (*(uint32_t *) (0xF0002FF0))

#define  MTBDWT_COMPID1              (*(uint32_t *) (0xF0002FF4))

#define  MTBDWT_COMPID2              (*(uint32_t *) (0xF0002FF8))

#define  MTBDWT_COMPID3              (*(uint32_t *) (0xF0002FFC))

#define  OSC0_CR                     (*(uint8_t *) (0x40065000))

#define  PIT_MCR                     (*(uint32_t *) (0x40037000))

#define  PIT_LTMR64H                 (*(uint32_t *) (0x400370E0))

#define  PIT_LTMR64L                 (*(uint32_t *) (0x400370E4))

#define  PIT_LDVAL0                  (*(uint32_t *) (0x40037100))

#define  PIT_CVAL0                   (*(uint32_t *) (0x40037104))

#define  PIT_TCTRL0                  (*(uint32_t *) (0x40037108))

#define  PIT_TFLG0                   (*(uint32_t *) (0x4003710C))

#define  PIT_LDVAL1                  (*(uint32_t *) (0x40037110))

#define  PIT_CVAL1                   (*(uint32_t *) (0x40037114))

#define  PIT_TCTRL1                  (*(uint32_t *) (0x40037118))

#define  PIT_TFLG1                   (*(uint32_t *) (0x4003711C))

#define  PIT_LDVAL2                  (*(uint32_t *) (0x40037120))

#define  PIT_CVAL2                   (*(uint32_t *) (0x40037124))

#define  PIT_TCTRL2                  (*(uint32_t *) (0x40037128))

#define  PIT_TFLG2                   (*(uint32_t *) (0x4003712C))

#define  PIT_LDVAL3                  (*(uint32_t *) (0x40037130))

#define  PIT_CVAL3                   (*(uint32_t *) (0x40037134))

#define  PIT_TCTRL3                  (*(uint32_t *) (0x40037138))

#define  PIT_TFLG3                   (*(uint32_t *) (0x4003713C))

#define  PMC_LVDSC1                  (*(uint8_t *) (0x4007D000))

#define  PMC_LVDSC2                  (*(uint8_t *) (0x4007D001))

#define  PMC_REGSC                   (*(uint8_t *) (0x4007D002))

#define  PORTA_PCR0                  (*(uint32_t *) (0x40049000))

#define  PORTA_PCR1                  (*(uint32_t *) (0x40049004))

#define  PORTA_PCR2                  (*(uint32_t *) (0x40049008))

#define  PORTA_PCR3                  (*(uint32_t *) (0x4004900C))

#define  PORTA_PCR4                  (*(uint32_t *) (0x40049010))

#define  PORTA_PCR5                  (*(uint32_t *) (0x40049014))

#define  PORTA_PCR6                  (*(uint32_t *) (0x40049018))

#define  PORTA_PCR7                  (*(uint32_t *) (0x4004901C))

#define  PORTA_PCR8                  (*(uint32_t *) (0x40049020))

#define  PORTA_PCR9                  (*(uint32_t *) (0x40049024))

#define  PORTA_PCR10                 (*(uint32_t *) (0x40049028))

#define  PORTA_PCR11                 (*(uint32_t *) (0x4004902C))

#define  PORTA_PCR12                 (*(uint32_t *) (0x40049030))

#define  PORTA_PCR13                 (*(uint32_t *) (0x40049034))

#define  PORTA_PCR14                 (*(uint32_t *) (0x40049038))

#define  PORTA_PCR15                 (*(uint32_t *) (0x4004903C))

#define  PORTA_PCR16                 (*(uint32_t *) (0x40049040))

#define  PORTA_PCR17                 (*(uint32_t *) (0x40049044))

#define  PORTA_PCR18                 (*(uint32_t *) (0x40049048))

#define  PORTA_PCR19                 (*(uint32_t *) (0x4004904C))

#define  PORTA_PCR20                 (*(uint32_t *) (0x40049050))

#define  PORTA_PCR21                 (*(uint32_t *) (0x40049054))

#define  PORTA_PCR22                 (*(uint32_t *) (0x40049058))

#define  PORTA_PCR23                 (*(uint32_t *) (0x4004905C))

#define  PORTA_PCR24                 (*(uint32_t *) (0x40049060))

#define  PORTA_PCR25                 (*(uint32_t *) (0x40049064))

#define  PORTA_PCR26                 (*(uint32_t *) (0x40049068))

#define  PORTA_PCR27                 (*(uint32_t *) (0x4004906C))

#define  PORTA_PCR28                 (*(uint32_t *) (0x40049070))

#define  PORTA_PCR29                 (*(uint32_t *) (0x40049074))

#define  PORTA_PCR30                 (*(uint32_t *) (0x40049078))

#define  PORTA_PCR31                 (*(uint32_t *) (0x4004907C))

#define  PORTA_GPCLR                 (*(uint32_t *) (0x40049080))

#define  PORTA_GPCHR                 (*(uint32_t *) (0x40049084))

#define  PORTA_ISFR                  (*(uint32_t *) (0x400490A0))

#define  PORTB_PCR0                  (*(uint32_t *) (0x4004A000))

#define  PORTB_PCR1                  (*(uint32_t *) (0x4004A004))

#define  PORTB_PCR2                  (*(uint32_t *) (0x4004A008))

#define  PORTB_PCR3                  (*(uint32_t *) (0x4004A00C))

#define  PORTB_PCR4                  (*(uint32_t *) (0x4004A010))

#define  PORTB_PCR5                  (*(uint32_t *) (0x4004A014))

#define  PORTB_PCR6                  (*(uint32_t *) (0x4004A018))

#define  PORTB_PCR7                  (*(uint32_t *) (0x4004A01C))

#define  PORTB_PCR8                  (*(uint32_t *) (0x4004A020))

#define  PORTB_PCR9                  (*(uint32_t *) (0x4004A024))

#define  PORTB_PCR10                 (*(uint32_t *) (0x4004A028))

#define  PORTB_PCR11                 (*(uint32_t *) (0x4004A02C))

#define  PORTB_PCR12                 (*(uint32_t *) (0x4004A030))

#define  PORTB_PCR13                 (*(uint32_t *) (0x4004A034))

#define  PORTB_PCR14                 (*(uint32_t *) (0x4004A038))

#define  PORTB_PCR15                 (*(uint32_t *) (0x4004A03C))

#define  PORTB_PCR16                 (*(uint32_t *) (0x4004A040))

#define  PORTB_PCR17                 (*(uint32_t *) (0x4004A044))

#define  PORTB_PCR18                 (*(uint32_t *) (0x4004A048))

#define  PORTB_PCR19                 (*(uint32_t *) (0x4004A04C))

#define  PORTB_PCR20                 (*(uint32_t *) (0x4004A050))

#define  PORTB_PCR21                 (*(uint32_t *) (0x4004A054))

#define  PORTB_PCR22                 (*(uint32_t *) (0x4004A058))

#define  PORTB_PCR23                 (*(uint32_t *) (0x4004A05C))

#define  PORTB_PCR24                 (*(uint32_t *) (0x4004A060))

#define  PORTB_PCR25                 (*(uint32_t *) (0x4004A064))

#define  PORTB_PCR26                 (*(uint32_t *) (0x4004A068))

#define  PORTB_PCR27                 (*(uint32_t *) (0x4004A06C))

#define  PORTB_PCR28                 (*(uint32_t *) (0x4004A070))

#define  PORTB_PCR29                 (*(uint32_t *) (0x4004A074))

#define  PORTB_PCR30                 (*(uint32_t *) (0x4004A078))

#define  PORTB_PCR31                 (*(uint32_t *) (0x4004A07C))

#define  PORTB_GPCLR                 (*(uint32_t *) (0x4004A080))

#define  PORTB_GPCHR                 (*(uint32_t *) (0x4004A084))

#define  PORTB_ISFR                  (*(uint32_t *) (0x4004A0A0))

#define  PORTC_PCR0                  (*(uint32_t *) (0x4004B000))

#define  PORTC_PCR1                  (*(uint32_t *) (0x4004B004))

#define  PORTC_PCR2                  (*(uint32_t *) (0x4004B008))

#define  PORTC_PCR3                  (*(uint32_t *) (0x4004B00C))

#define  PORTC_PCR4                  (*(uint32_t *) (0x4004B010))

#define  PORTC_PCR5                  (*(uint32_t *) (0x4004B014))

#define  PORTC_PCR6                  (*(uint32_t *) (0x4004B018))

#define  PORTC_PCR7                  (*(uint32_t *) (0x4004B01C))

#define  PORTC_PCR8                  (*(uint32_t *) (0x4004B020))

#define  PORTC_PCR9                  (*(uint32_t *) (0x4004B024))

#define  PORTC_PCR10                 (*(uint32_t *) (0x4004B028))

#define  PORTC_PCR11                 (*(uint32_t *) (0x4004B02C))

#define  PORTC_PCR12                 (*(uint32_t *) (0x4004B030))

#define  PORTC_PCR13                 (*(uint32_t *) (0x4004B034))

#define  PORTC_PCR14                 (*(uint32_t *) (0x4004B038))

#define  PORTC_PCR15                 (*(uint32_t *) (0x4004B03C))

#define  PORTC_PCR16                 (*(uint32_t *) (0x4004B040))

#define  PORTC_PCR17                 (*(uint32_t *) (0x4004B044))

#define  PORTC_PCR18                 (*(uint32_t *) (0x4004B048))

#define  PORTC_PCR19                 (*(uint32_t *) (0x4004B04C))

#define  PORTC_PCR20                 (*(uint32_t *) (0x4004B050))

#define  PORTC_PCR21                 (*(uint32_t *) (0x4004B054))

#define  PORTC_PCR22                 (*(uint32_t *) (0x4004B058))

#define  PORTC_PCR23                 (*(uint32_t *) (0x4004B05C))

#define  PORTC_PCR24                 (*(uint32_t *) (0x4004B060))

#define  PORTC_PCR25                 (*(uint32_t *) (0x4004B064))

#define  PORTC_PCR26                 (*(uint32_t *) (0x4004B068))

#define  PORTC_PCR27                 (*(uint32_t *) (0x4004B06C))

#define  PORTC_PCR28                 (*(uint32_t *) (0x4004B070))

#define  PORTC_PCR29                 (*(uint32_t *) (0x4004B074))

#define  PORTC_PCR30                 (*(uint32_t *) (0x4004B078))

#define  PORTC_PCR31                 (*(uint32_t *) (0x4004B07C))

#define  PORTC_GPCLR                 (*(uint32_t *) (0x4004B080))

#define  PORTC_GPCHR                 (*(uint32_t *) (0x4004B084))

#define  PORTC_ISFR                  (*(uint32_t *) (0x4004B0A0))

#define  PORTD_PCR0                  (*(uint32_t *) (0x4004C000))

#define  PORTD_PCR1                  (*(uint32_t *) (0x4004C004))

#define  PORTD_PCR2                  (*(uint32_t *) (0x4004C008))

#define  PORTD_PCR3                  (*(uint32_t *) (0x4004C00C))

#define  PORTD_PCR4                  (*(uint32_t *) (0x4004C010))

#define  PORTD_PCR5                  (*(uint32_t *) (0x4004C014))

#define  PORTD_PCR6                  (*(uint32_t *) (0x4004C018))

#define  PORTD_PCR7                  (*(uint32_t *) (0x4004C01C))

#define  PORTD_PCR8                  (*(uint32_t *) (0x4004C020))

#define  PORTD_PCR9                  (*(uint32_t *) (0x4004C024))

#define  PORTD_PCR10                 (*(uint32_t *) (0x4004C028))

#define  PORTD_PCR11                 (*(uint32_t *) (0x4004C02C))

#define  PORTD_PCR12                 (*(uint32_t *) (0x4004C030))

#define  PORTD_PCR13                 (*(uint32_t *) (0x4004C034))

#define  PORTD_PCR14                 (*(uint32_t *) (0x4004C038))

#define  PORTD_PCR15                 (*(uint32_t *) (0x4004C03C))

#define  PORTD_PCR16                 (*(uint32_t *) (0x4004C040))

#define  PORTD_PCR17                 (*(uint32_t *) (0x4004C044))

#define  PORTD_PCR18                 (*(uint32_t *) (0x4004C048))

#define  PORTD_PCR19                 (*(uint32_t *) (0x4004C04C))

#define  PORTD_PCR20                 (*(uint32_t *) (0x4004C050))

#define  PORTD_PCR21                 (*(uint32_t *) (0x4004C054))

#define  PORTD_PCR22                 (*(uint32_t *) (0x4004C058))

#define  PORTD_PCR23                 (*(uint32_t *) (0x4004C05C))

#define  PORTD_PCR24                 (*(uint32_t *) (0x4004C060))

#define  PORTD_PCR25                 (*(uint32_t *) (0x4004C064))

#define  PORTD_PCR26                 (*(uint32_t *) (0x4004C068))

#define  PORTD_PCR27                 (*(uint32_t *) (0x4004C06C))

#define  PORTD_PCR28                 (*(uint32_t *) (0x4004C070))

#define  PORTD_PCR29                 (*(uint32_t *) (0x4004C074))

#define  PORTD_PCR30                 (*(uint32_t *) (0x4004C078))

#define  PORTD_PCR31                 (*(uint32_t *) (0x4004C07C))

#define  PORTD_GPCLR                 (*(uint32_t *) (0x4004C080))

#define  PORTD_GPCHR                 (*(uint32_t *) (0x4004C084))

#define  PORTD_ISFR                  (*(uint32_t *) (0x4004C0A0))

#define  PORTE_PCR0                  (*(uint32_t *) (0x4004D000))

#define  PORTE_PCR1                  (*(uint32_t *) (0x4004D004))

#define  PORTE_PCR2                  (*(uint32_t *) (0x4004D008))

#define  PORTE_PCR3                  (*(uint32_t *) (0x4004D00C))

#define  PORTE_PCR4                  (*(uint32_t *) (0x4004D010))

#define  PORTE_PCR5                  (*(uint32_t *) (0x4004D014))

#define  PORTE_PCR6                  (*(uint32_t *) (0x4004D018))

#define  PORTE_PCR7                  (*(uint32_t *) (0x4004D01C))

#define  PORTE_PCR8                  (*(uint32_t *) (0x4004D020))

#define  PORTE_PCR9                  (*(uint32_t *) (0x4004D024))

#define  PORTE_PCR10                 (*(uint32_t *) (0x4004D028))

#define  PORTE_PCR11                 (*(uint32_t *) (0x4004D02C))

#define  PORTE_PCR12                 (*(uint32_t *) (0x4004D030))

#define  PORTE_PCR13                 (*(uint32_t *) (0x4004D034))

#define  PORTE_PCR14                 (*(uint32_t *) (0x4004D038))

#define  PORTE_PCR15                 (*(uint32_t *) (0x4004D03C))

#define  PORTE_PCR16                 (*(uint32_t *) (0x4004D040))

#define  PORTE_PCR17                 (*(uint32_t *) (0x4004D044))

#define  PORTE_PCR18                 (*(uint32_t *) (0x4004D048))

#define  PORTE_PCR19                 (*(uint32_t *) (0x4004D04C))

#define  PORTE_PCR20                 (*(uint32_t *) (0x4004D050))

#define  PORTE_PCR21                 (*(uint32_t *) (0x4004D054))

#define  PORTE_PCR22                 (*(uint32_t *) (0x4004D058))

#define  PORTE_PCR23                 (*(uint32_t *) (0x4004D05C))

#define  PORTE_PCR24                 (*(uint32_t *) (0x4004D060))

#define  PORTE_PCR25                 (*(uint32_t *) (0x4004D064))

#define  PORTE_PCR26                 (*(uint32_t *) (0x4004D068))

#define  PORTE_PCR27                 (*(uint32_t *) (0x4004D06C))

#define  PORTE_PCR28                 (*(uint32_t *) (0x4004D070))

#define  PORTE_PCR29                 (*(uint32_t *) (0x4004D074))

#define  PORTE_PCR30                 (*(uint32_t *) (0x4004D078))

#define  PORTE_PCR31                 (*(uint32_t *) (0x4004D07C))

#define  PORTE_GPCLR                 (*(uint32_t *) (0x4004D080))

#define  PORTE_GPCHR                 (*(uint32_t *) (0x4004D084))

#define  PORTE_ISFR                  (*(uint32_t *) (0x4004D0A0))

#define  RCM_SRS0                    (*(uint8_t *) (0x4007F000))

#define  RCM_SRS1                    (*(uint8_t *) (0x4007F001))

#define  RCM_RPFC                    (*(uint8_t *) (0x4007F004))

#define  RCM_RPFW                    (*(uint8_t *) (0x4007F005))

#define  ROM_ENTRY0                  (*(uint32_t *) (0xF0004000))

#define  ROM_ENTRY1                  (*(uint32_t *) (0xF0004004))

#define  ROM_ENTRY2                  (*(uint32_t *) (0xF0004008))

#define  ROM_TABLEMARK               (*(uint32_t *) (0xF000400C))

#define  ROM_SYSACCESS               (*(uint32_t *) (0xF0004FCC))

#define  ROM_PERIPHID4               (*(uint32_t *) (0xF0004FD0))

#define  ROM_PERIPHID5               (*(uint32_t *) (0xF0004FD4))

#define  ROM_PERIPHID6               (*(uint32_t *) (0xF0004FD8))

#define  ROM_PERIPHID7               (*(uint32_t *) (0xF0004FDC))

#define  ROM_PERIPHID0               (*(uint32_t *) (0xF0004FE0))

#define  ROM_PERIPHID1               (*(uint32_t *) (0xF0004FE4))

#define  ROM_PERIPHID2               (*(uint32_t *) (0xF0004FE8))

#define  ROM_PERIPHID3               (*(uint32_t *) (0xF0004FEC))

#define  ROM_COMPID0                 (*(uint32_t *) (0xF0004FF0))

#define  ROM_COMPID1                 (*(uint32_t *) (0xF0004FF4))

#define  ROM_COMPID2                 (*(uint32_t *) (0xF0004FF8))

#define  ROM_COMPID3                 (*(uint32_t *) (0xF0004FFC))

#define  RTC_TSR                     (*(uint32_t *) (0x4003D000))

#define  RTC_TPR                     (*(uint32_t *) (0x4003D004))

#define  RTC_TAR                     (*(uint32_t *) (0x4003D008))

#define  RTC_TCR                     (*(uint32_t *) (0x4003D00C))

#define  RTC_CR                      (*(uint32_t *) (0x4003D010))

#define  RTC_SR                      (*(uint32_t *) (0x4003D014))

#define  RTC_LR                      (*(uint32_t *) (0x4003D018))

#define  RTC_IER                     (*(uint32_t *) (0x4003D01C))

#define  SIM_SOPT1                   (*(uint32_t *) (0x40047000))

#define  SIM_SOPT1CFG                (*(uint32_t *) (0x40047004))

#define  SIM_SOPT2                   (*(uint32_t *) (0x40048004))

#define  SIM_SOPT4                   (*(uint32_t *) (0x4004800C))

#define  SIM_SOPT5                   (*(uint32_t *) (0x40048010))

#define  SIM_SOPT7                   (*(uint32_t *) (0x40048018))

#define  SIM_SDID                    (*(uint32_t *) (0x40048024))

#define  SIM_SCGC4                   (*(uint32_t *) (0x40048034))

#define  SIM_SCGC5                   (*(uint32_t *) (0x40048038))

#define  SIM_SCGC6                   (*(uint32_t *) (0x4004803C))

#define  SIM_SCGC7                   (*(uint32_t *) (0x40048040))

#define  SIM_CLKDIV1                 (*(uint32_t *) (0x40048044))

#define  SIM_FCFG1                   (*(uint32_t *) (0x4004804C))

#define  SIM_FCFG2                   (*(uint32_t *) (0x40048050))

#define  SIM_UIDMH                   (*(uint32_t *) (0x40048058))

#define  SIM_UIDML                   (*(uint32_t *) (0x4004805C))

#define  SIM_UIDL                    (*(uint32_t *) (0x40048060))

#define  SIM_COPC                    (*(uint32_t *) (0x40048100))

#define  SIM_SRVCOP                  (*(uint32_t *) (0x40048104))

#define  SMC_PMPROT                  (*(uint8_t *) (0x4007E000))

#define  SMC_PMCTRL                  (*(uint8_t *) (0x4007E001))

#define  SMC_STOPCTRL                (*(uint8_t *) (0x4007E002))

#define  SMC_PMSTAT                  (*(uint8_t *) (0x4007E003))

#define  SPI0_C1                     (*(uint8_t *) (0x40076000))

#define  SPI0_C2                     (*(uint8_t *) (0x40076001))

#define  SPI0_BR                     (*(uint8_t *) (0x40076002))

#define  SPI0_S                      (*(uint8_t *) (0x40076003))

#define  SPI0_D                      (*(uint8_t *) (0x40076005))

#define  SPI0_M                      (*(uint8_t *) (0x40076007))

#define  SPI1_C1                     (*(uint8_t *) (0x40077000))

#define  SPI1_C2                     (*(uint8_t *) (0x40077001))

#define  SPI1_BR                     (*(uint8_t *) (0x40077002))

#define  SPI1_S                      (*(uint8_t *) (0x40077003))

#define  SPI1_D                      (*(uint8_t *) (0x40077005))

#define  SPI1_M                      (*(uint8_t *) (0x40077007))

#define  TSI0_GENCS                  (*(uint32_t *) (0x40045000))

#define  TSI0_DATA                   (*(uint32_t *) (0x40045004))

#define  TSI0_TSHD                   (*(uint32_t *) (0x40045008))
/*
#define  UART0_BDH                   (*(uint8_t *) (0x4006A000))

#define  UART0_BDL                   (*(uint8_t *) (0x4006A001))

#define  UART0_C1                    (*(uint8_t *) (0x4006A002))

#define  UART0_C2                    (*(uint8_t *) (0x4006A003))

#define  UART0_S1                    (*(uint8_t *) (0x4006A004))

#define  UART0_S2                    (*(uint8_t *) (0x4006A005))

#define  UART0_C3                    (*(uint8_t *) (0x4006A006))

#define  UART0_D                     (*(uint8_t *) (0x4006A007))

#define  UART0_MA1                   (*(uint8_t *) (0x4006A008))

#define  UART0_MA2                   (*(uint8_t *) (0x4006A009))

#define  UART0_C4                    (*(uint8_t *) (0x4006A00A))

#define  UART0_C5                    (*(uint8_t *) (0x4006A00B))

#define  UART1_BDH                   (*(uint8_t *) (0x4006B000))

#define  UART1_BDL                   (*(uint8_t *) (0x4006B001))

#define  UART1_C1                    (*(uint8_t *) (0x4006B002))

#define  UART1_C2                    (*(uint8_t *) (0x4006B003))

#define  UART1_S1                    (*(uint8_t *) (0x4006B004))

#define  UART1_S2                    (*(uint8_t *) (0x4006B005))

#define  UART1_C3                    (*(uint8_t *) (0x4006B006))

#define  UART1_D                     (*(uint8_t *) (0x4006B007))

#define  UART1_C4                    (*(uint8_t *) (0x4006B008))

#define  UART2_BDH                   (*(uint8_t *) (0x4006C000))

#define  UART2_BDL                   (*(uint8_t *) (0x4006C001))

#define  UART2_C1                    (*(uint8_t *) (0x4006C002))

#define  UART2_C2                    (*(uint8_t *) (0x4006C003))

#define  UART2_S1                    (*(uint8_t *) (0x4006C004))

#define  UART2_S2                    (*(uint8_t *) (0x4006C005))

#define  UART2_C3                    (*(uint8_t *) (0x4006C006))

#define  UART2_D                     (*(uint8_t *) (0x4006C007))

#define  UART2_C4                    (*(uint8_t *) (0x4006C008))
*/
#define  USB0_PERID                  (*(uint8_t *) (0x40072000))

#define  USB0_IDCOMP                 (*(uint8_t *) (0x40072004))

#define  USB0_REV                    (*(uint8_t *) (0x40072008))

#define  USB0_ADDINFO                (*(uint8_t *) (0x4007200C))

#define  USB0_OTGISTAT               (*(uint8_t *) (0x40072010))

#define  USB0_OTGICR                 (*(uint8_t *) (0x40072014))

#define  USB0_OTGSTAT                (*(uint8_t *) (0x40072018))

#define  USB0_OTGCTL                 (*(uint8_t *) (0x4007201C))

#define  USB0_ISTAT                  (*(uint8_t *) (0x40072080))

#define  USB0_INTEN                  (*(uint8_t *) (0x40072084))

#define  USB0_ERRSTAT                (*(uint8_t *) (0x40072088))

#define  USB0_ERREN                  (*(uint8_t *) (0x4007208C))

#define  USB0_STAT                   (*(uint8_t *) (0x40072090))

#define  USB0_CTL                    (*(uint8_t *) (0x40072094))

#define  USB0_ADDR                   (*(uint8_t *) (0x40072098))

#define  USB0_BDTPAGE1               (*(uint8_t *) (0x4007209C))

#define  USB0_FRMNUML                (*(uint8_t *) (0x400720A0))

#define  USB0_FRMNUMH                (*(uint8_t *) (0x400720A4))

#define  USB0_TOKEN                  (*(uint8_t *) (0x400720A8))

#define  USB0_SOFTHLD                (*(uint8_t *) (0x400720AC))

#define  USB0_BDTPAGE2               (*(uint8_t *) (0x400720B0))

#define  USB0_BDTPAGE3               (*(uint8_t *) (0x400720B4))

#define  USB0_ENDPT0                 (*(uint8_t *) (0x400720C0))

#define  USB0_ENDPT1                 (*(uint8_t *) (0x400720C4))

#define  USB0_ENDPT2                 (*(uint8_t *) (0x400720C8))

#define  USB0_ENDPT3                 (*(uint8_t *) (0x400720CC))

#define  USB0_ENDPT4                 (*(uint8_t *) (0x400720D0))

#define  USB0_ENDPT5                 (*(uint8_t *) (0x400720D4))

#define  USB0_ENDPT6                 (*(uint8_t *) (0x400720D8))

#define  USB0_ENDPT7                 (*(uint8_t *) (0x400720DC))

#define  USB0_ENDPT8                 (*(uint8_t *) (0x400720E0))

#define  USB0_ENDPT9                 (*(uint8_t *) (0x400720E4))

#define  USB0_ENDPT10                (*(uint8_t *) (0x400720E8))

#define  USB0_ENDPT11                (*(uint8_t *) (0x400720EC))

#define  USB0_ENDPT12                (*(uint8_t *) (0x400720F0))

#define  USB0_ENDPT13                (*(uint8_t *) (0x400720F4))

#define  USB0_ENDPT14                (*(uint8_t *) (0x400720F8))

#define  USB0_ENDPT15                (*(uint8_t *) (0x400720FC))

#define  USB0_USBCTRL                (*(uint8_t *) (0x40072100))

#define  USB0_OBSERVE                (*(uint8_t *) (0x40072104))

#define  USB0_CONTROL                (*(uint8_t *) (0x40072108))

#define  USB0_USBTRC0                (*(uint8_t *) (0x4007210C))

//////////////////////////////////////////////////////////////////////////////////////
// The following section defines the IO register bitfield locations and includes some commentary on the meaning of some settings.
//////////////////////////////////////////////////////////////////////////////////////

#define  ADC0_SC1A_ADCH_MASK         0x1Fu
#define  ADC0_SC1A_ADCH_SHIFT        0
#define  ADC0_SC1A_ADCH(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_SC1A_ADCH_SHIFT))&ADC0_SC1A_ADCH_MASK)
//   Input channel select
//     0b00000 ==> When DIFF=0, DADP0 is selected as input; when DIFF=1, DAD0 is selected as input.
//     0b00001 ==> When DIFF=0, DADP1 is selected as input; when DIFF=1, DAD1 is selected as input.
//     0b00010 ==> When DIFF=0, DADP2 is selected as input; when DIFF=1, DAD2 is selected as input.
//     0b00011 ==> When DIFF=0, DADP3 is selected as input; when DIFF=1, DAD3 is selected as input.
//     0b00100 ==> When DIFF=0, AD4 is selected as input; when DIFF=1, it is reserved.
//     0b00101 ==> When DIFF=0, AD5 is selected as input; when DIFF=1, it is reserved.
//     0b00110 ==> When DIFF=0, AD6 is selected as input; when DIFF=1, it is reserved.
//     0b00111 ==> When DIFF=0, AD7 is selected as input; when DIFF=1, it is reserved.
//     0b01000 ==> When DIFF=0, AD8 is selected as input; when DIFF=1, it is reserved.
//     0b01001 ==> When DIFF=0, AD9 is selected as input; when DIFF=1, it is reserved.
//     0b01010 ==> When DIFF=0, AD10 is selected as input; when DIFF=1, it is reserved.
//     0b01011 ==> When DIFF=0, AD11 is selected as input; when DIFF=1, it is reserved.
//     0b01100 ==> When DIFF=0, AD12 is selected as input; when DIFF=1, it is reserved.
//     0b01101 ==> When DIFF=0, AD13 is selected as input; when DIFF=1, it is reserved.
//     0b01110 ==> When DIFF=0, AD14 is selected as input; when DIFF=1, it is reserved.
//     0b01111 ==> When DIFF=0, AD15 is selected as input; when DIFF=1, it is reserved.
//     0b10000 ==> When DIFF=0, AD16 is selected as input; when DIFF=1, it is reserved.
//     0b10001 ==> When DIFF=0, AD17 is selected as input; when DIFF=1, it is reserved.
//     0b10010 ==> When DIFF=0, AD18 is selected as input; when DIFF=1, it is reserved.
//     0b10011 ==> When DIFF=0, AD19 is selected as input; when DIFF=1, it is reserved.
//     0b10100 ==> When DIFF=0, AD20 is selected as input; when DIFF=1, it is reserved.
//     0b10101 ==> When DIFF=0, AD21 is selected as input; when DIFF=1, it is reserved.
//     0b10110 ==> When DIFF=0, AD22 is selected as input; when DIFF=1, it is reserved.
//     0b10111 ==> When DIFF=0, AD23 is selected as input; when DIFF=1, it is reserved.
//     0b11000 ==> Reserved.
//     0b11001 ==> Reserved.
//     0b11010 ==> When DIFF=0, Temp Sensor (single-ended) is selected as input; when DIFF=1, Temp Sensor (differential) is selected as input.
//     0b11011 ==> When DIFF=0, Bandgap (single-ended) is selected as input; when DIFF=1, Bandgap (differential) is selected as input.
//     0b11100 ==> Reserved.
//     0b11101 ==> When DIFF=0,VREFSH is selected as input; when DIFF=1, -VREFSH (differential) is selected as input. Voltage reference selected is determined by SC2[REFSEL].
//     0b11110 ==> When DIFF=0,VREFSL is selected as input; when DIFF=1, it is reserved. Voltage reference selected is determined by SC2[REFSEL].
//     0b11111 ==> Module is disabled.

#define  ADC0_SC1A_DIFF_MASK         0x20u
#define  ADC0_SC1A_DIFF_SHIFT        5
//   Differential Mode Enable
//     0b0 ==> Single-ended conversions and input channels are selected.
//     0b1 ==> Differential conversions and input channels are selected.

#define  ADC0_SC1A_AIEN_MASK         0x40u
#define  ADC0_SC1A_AIEN_SHIFT        6
//   Interrupt Enable
//     0b0 ==> Conversion complete interrupt is disabled.
//     0b1 ==> Conversion complete interrupt is enabled.

#define  ADC0_SC1A_COCO_MASK         0x80u
#define  ADC0_SC1A_COCO_SHIFT        7
//   Conversion Complete Flag
//     0b0 ==> Conversion is not completed.
//     0b1 ==> Conversion is completed.

#define  ADC0_SC1B_ADCH_MASK         0x1Fu
#define  ADC0_SC1B_ADCH_SHIFT        0
#define  ADC0_SC1B_ADCH(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_SC1B_ADCH_SHIFT))&ADC0_SC1B_ADCH_MASK)
//   Input channel select
//     0b00000 ==> When DIFF=0, DADP0 is selected as input; when DIFF=1, DAD0 is selected as input.
//     0b00001 ==> When DIFF=0, DADP1 is selected as input; when DIFF=1, DAD1 is selected as input.
//     0b00010 ==> When DIFF=0, DADP2 is selected as input; when DIFF=1, DAD2 is selected as input.
//     0b00011 ==> When DIFF=0, DADP3 is selected as input; when DIFF=1, DAD3 is selected as input.
//     0b00100 ==> When DIFF=0, AD4 is selected as input; when DIFF=1, it is reserved.
//     0b00101 ==> When DIFF=0, AD5 is selected as input; when DIFF=1, it is reserved.
//     0b00110 ==> When DIFF=0, AD6 is selected as input; when DIFF=1, it is reserved.
//     0b00111 ==> When DIFF=0, AD7 is selected as input; when DIFF=1, it is reserved.
//     0b01000 ==> When DIFF=0, AD8 is selected as input; when DIFF=1, it is reserved.
//     0b01001 ==> When DIFF=0, AD9 is selected as input; when DIFF=1, it is reserved.
//     0b01010 ==> When DIFF=0, AD10 is selected as input; when DIFF=1, it is reserved.
//     0b01011 ==> When DIFF=0, AD11 is selected as input; when DIFF=1, it is reserved.
//     0b01100 ==> When DIFF=0, AD12 is selected as input; when DIFF=1, it is reserved.
//     0b01101 ==> When DIFF=0, AD13 is selected as input; when DIFF=1, it is reserved.
//     0b01110 ==> When DIFF=0, AD14 is selected as input; when DIFF=1, it is reserved.
//     0b01111 ==> When DIFF=0, AD15 is selected as input; when DIFF=1, it is reserved.
//     0b10000 ==> When DIFF=0, AD16 is selected as input; when DIFF=1, it is reserved.
//     0b10001 ==> When DIFF=0, AD17 is selected as input; when DIFF=1, it is reserved.
//     0b10010 ==> When DIFF=0, AD18 is selected as input; when DIFF=1, it is reserved.
//     0b10011 ==> When DIFF=0, AD19 is selected as input; when DIFF=1, it is reserved.
//     0b10100 ==> When DIFF=0, AD20 is selected as input; when DIFF=1, it is reserved.
//     0b10101 ==> When DIFF=0, AD21 is selected as input; when DIFF=1, it is reserved.
//     0b10110 ==> When DIFF=0, AD22 is selected as input; when DIFF=1, it is reserved.
//     0b10111 ==> When DIFF=0, AD23 is selected as input; when DIFF=1, it is reserved.
//     0b11000 ==> Reserved.
//     0b11001 ==> Reserved.
//     0b11010 ==> When DIFF=0, Temp Sensor (single-ended) is selected as input; when DIFF=1, Temp Sensor (differential) is selected as input.
//     0b11011 ==> When DIFF=0, Bandgap (single-ended) is selected as input; when DIFF=1, Bandgap (differential) is selected as input.
//     0b11100 ==> Reserved.
//     0b11101 ==> When DIFF=0,VREFSH is selected as input; when DIFF=1, -VREFSH (differential) is selected as input. Voltage reference selected is determined by SC2[REFSEL].
//     0b11110 ==> When DIFF=0,VREFSL is selected as input; when DIFF=1, it is reserved. Voltage reference selected is determined by SC2[REFSEL].
//     0b11111 ==> Module is disabled.

#define  ADC0_SC1B_DIFF_MASK         0x20u
#define  ADC0_SC1B_DIFF_SHIFT        5
//   Differential Mode Enable
//     0b0 ==> Single-ended conversions and input channels are selected.
//     0b1 ==> Differential conversions and input channels are selected.

#define  ADC0_SC1B_AIEN_MASK         0x40u
#define  ADC0_SC1B_AIEN_SHIFT        6
//   Interrupt Enable
//     0b0 ==> Conversion complete interrupt is disabled.
//     0b1 ==> Conversion complete interrupt is enabled.

#define  ADC0_SC1B_COCO_MASK         0x80u
#define  ADC0_SC1B_COCO_SHIFT        7
//   Conversion Complete Flag
//     0b0 ==> Conversion is not completed.
//     0b1 ==> Conversion is completed.

#define  ADC0_CFG1_ADICLK_MASK       0x3u
#define  ADC0_CFG1_ADICLK_SHIFT      0
#define  ADC0_CFG1_ADICLK(x)         (((uint32_t)(((uint32_t)(x))<<ADC0_CFG1_ADICLK_SHIFT))&ADC0_CFG1_ADICLK_MASK)
//   Input Clock Select
//     0b00 ==> Bus clock
//     0b01 ==> (Bus clock)/2
//     0b10 ==> Alternate clock (ALTCLK)
//     0b11 ==> Asynchronous clock (ADACK)

#define  ADC0_CFG1_MODE_MASK         0xCu
#define  ADC0_CFG1_MODE_SHIFT        2
#define  ADC0_CFG1_MODE(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CFG1_MODE_SHIFT))&ADC0_CFG1_MODE_MASK)
//   Conversion mode selection
//     0b00 ==> When DIFF=0:It is single-ended 8-bit conversion; when DIFF=1, it is differential 9-bit conversion with 2's complement output.
//     0b01 ==> When DIFF=0:It is single-ended 12-bit conversion ; when DIFF=1, it is differential 13-bit conversion with 2's complement output.
//     0b10 ==> When DIFF=0:It is single-ended 10-bit conversion ; when DIFF=1, it is differential 11-bit conversion with 2's complement output.
//     0b11 ==> When DIFF=0:It is single-ended 16-bit conversion; when DIFF=1, it is differential 16-bit conversion with 2's complement output.

#define  ADC0_CFG1_ADLSMP_MASK       0x10u
#define  ADC0_CFG1_ADLSMP_SHIFT      4
//   Sample time configuration
//     0b0 ==> Short sample time.
//     0b1 ==> Long sample time.

#define  ADC0_CFG1_ADIV_MASK         0x60u
#define  ADC0_CFG1_ADIV_SHIFT        5
#define  ADC0_CFG1_ADIV(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CFG1_ADIV_SHIFT))&ADC0_CFG1_ADIV_MASK)
//   Clock Divide Select
//     0b00 ==> The divide ratio is 1 and the clock rate is input clock.
//     0b01 ==> The divide ratio is 2 and the clock rate is (input clock)/2.
//     0b10 ==> The divide ratio is 4 and the clock rate is (input clock)/4.
//     0b11 ==> The divide ratio is 8 and the clock rate is (input clock)/8.

#define  ADC0_CFG1_ADLPC_MASK        0x80u
#define  ADC0_CFG1_ADLPC_SHIFT       7
//   Low-Power Configuration
//     0b0 ==> Normal power configuration.
//     0b1 ==> Low-power configuration. The power is reduced at the expense of maximum clock speed.

#define  ADC0_CFG2_ADLSTS_MASK       0x3u
#define  ADC0_CFG2_ADLSTS_SHIFT      0
#define  ADC0_CFG2_ADLSTS(x)         (((uint32_t)(((uint32_t)(x))<<ADC0_CFG2_ADLSTS_SHIFT))&ADC0_CFG2_ADLSTS_MASK)
//   Long Sample Time Select
//     0b00 ==> Default longest sample time; 20 extra ADCK cycles; 24 ADCK cycles total.
//     0b01 ==> 12 extra ADCK cycles; 16 ADCK cycles total sample time.
//     0b10 ==> 6 extra ADCK cycles; 10 ADCK cycles total sample time.
//     0b11 ==> 2 extra ADCK cycles; 6 ADCK cycles total sample time.

#define  ADC0_CFG2_ADHSC_MASK        0x4u
#define  ADC0_CFG2_ADHSC_SHIFT       2
//   High-Speed Configuration
//     0b0 ==> Normal conversion sequence selected.
//     0b1 ==> High-speed conversion sequence selected with 2 additional ADCK cycles to total conversion time.

#define  ADC0_CFG2_ADACKEN_MASK      0x8u
#define  ADC0_CFG2_ADACKEN_SHIFT     3
//   Asynchronous Clock Output Enable
//     0b0 ==> Asynchronous clock output disabled; Asynchronous clock is enabled only if selected by ADICLK and a conversion is active.
//     0b1 ==> Asynchronous clock and clock output is enabled regardless of the state of the ADC.

#define  ADC0_CFG2_MUXSEL_MASK       0x10u
#define  ADC0_CFG2_MUXSEL_SHIFT      4
//   ADC Mux Select
//     0b0 ==> ADxxa channels are selected.
//     0b1 ==> ADxxb channels are selected.

#define  ADC0_RA_D_MASK              0xFFFFu
#define  ADC0_RA_D_SHIFT             0
#define  ADC0_RA_D(x)                (((uint32_t)(((uint32_t)(x))<<ADC0_RA_D_SHIFT))&ADC0_RA_D_MASK)
//   Data result.

#define  ADC0_RB_D_MASK              0xFFFFu
#define  ADC0_RB_D_SHIFT             0
#define  ADC0_RB_D(x)                (((uint32_t)(((uint32_t)(x))<<ADC0_RB_D_SHIFT))&ADC0_RB_D_MASK)
//   Data result.

#define  ADC0_CV1_CV_MASK            0xFFFFu
#define  ADC0_CV1_CV_SHIFT           0
#define  ADC0_CV1_CV(x)              (((uint32_t)(((uint32_t)(x))<<ADC0_CV1_CV_SHIFT))&ADC0_CV1_CV_MASK)
//   Compare Value.

#define  ADC0_CV2_CV_MASK            0xFFFFu
#define  ADC0_CV2_CV_SHIFT           0
#define  ADC0_CV2_CV(x)              (((uint32_t)(((uint32_t)(x))<<ADC0_CV2_CV_SHIFT))&ADC0_CV2_CV_MASK)
//   Compare Value.

#define  ADC0_SC2_REFSEL_MASK        0x3u
#define  ADC0_SC2_REFSEL_SHIFT       0
#define  ADC0_SC2_REFSEL(x)          (((uint32_t)(((uint32_t)(x))<<ADC0_SC2_REFSEL_SHIFT))&ADC0_SC2_REFSEL_MASK)
//   Voltage Reference Selection
//     0b00 ==> Default voltage reference pin pair, that is, external pins V and V REFH REFL
//     0b01 ==> Alternate reference pair, that is, V and V . This pair may be additional external pins or internal sources depending on the MCU configuration. See the chip configuration information for details specific to this MCU. ALTH ALTL
//     0b10 ==> Internal bandgap reference and associated ground reference (V BGH and V BGL ). Consult the Chip Configuration information for details specific to this MCU.
//     0b11 ==> Reserved

#define  ADC0_SC2_DMAEN_MASK         0x4u
#define  ADC0_SC2_DMAEN_SHIFT        2
//   DMA Enable
//     0b0 ==> DMA is disabled.
//     0b1 ==> DMA is enabled and will assert the ADC DMA request during an ADC conversion complete event noted when any of the SC1n[COCO] flags is asserted.

#define  ADC0_SC2_ACREN_MASK         0x8u
#define  ADC0_SC2_ACREN_SHIFT        3
//   Compare Function Range Enable
//     0b0 ==> Range function disabled. Only CV1 is compared.
//     0b1 ==> Range function enabled. Both CV1 and CV2 are compared.

#define  ADC0_SC2_ACFGT_MASK         0x10u
#define  ADC0_SC2_ACFGT_SHIFT        4
//   Compare Function Greater Than Enable
//     0b0 ==> Configures less than threshold, outside range not inclusive and inside range not inclusive; functionality based on the values placed in CV1 and CV2.
//     0b1 ==> Configures greater than or equal to threshold, outside and inside ranges inclusive; functionality based on the values placed in CV1 and CV2.

#define  ADC0_SC2_ACFE_MASK          0x20u
#define  ADC0_SC2_ACFE_SHIFT         5
//   Compare Function Enable
//     0b0 ==> Compare function disabled.
//     0b1 ==> Compare function enabled.

#define  ADC0_SC2_ADTRG_MASK         0x40u
#define  ADC0_SC2_ADTRG_SHIFT        6
//   Conversion Trigger Select
//     0b0 ==> Software trigger selected.
//     0b1 ==> Hardware trigger selected.

#define  ADC0_SC2_ADACT_MASK         0x80u
#define  ADC0_SC2_ADACT_SHIFT        7
//   Conversion Active
//     0b0 ==> Conversion not in progress.
//     0b1 ==> Conversion in progress.

#define  ADC0_SC3_AVGS_MASK          0x3u
#define  ADC0_SC3_AVGS_SHIFT         0
#define  ADC0_SC3_AVGS(x)            (((uint32_t)(((uint32_t)(x))<<ADC0_SC3_AVGS_SHIFT))&ADC0_SC3_AVGS_MASK)
//   Hardware Average Select
//     0b00 ==> 4 samples averaged.
//     0b01 ==> 8 samples averaged.
//     0b10 ==> 16 samples averaged.
//     0b11 ==> 32 samples averaged.

#define  ADC0_SC3_AVGE_MASK          0x4u
#define  ADC0_SC3_AVGE_SHIFT         2
//   Hardware Average Enable
//     0b0 ==> Hardware average function disabled.
//     0b1 ==> Hardware average function enabled.

#define  ADC0_SC3_ADCO_MASK          0x8u
#define  ADC0_SC3_ADCO_SHIFT         3
//   Continuous Conversion Enable
//     0b0 ==> One conversion or one set of conversions if the hardware average function is enabled, that is, AVGE=1, after initiating a conversion.
//     0b1 ==> Continuous conversions or sets of conversions if the hardware average function is enabled, that is, AVGE=1, after initiating a conversion.

#define  ADC0_SC3_CALF_MASK          0x40u
#define  ADC0_SC3_CALF_SHIFT         6
//   Calibration Failed Flag
//     0b0 ==> Calibration completed normally.
//     0b1 ==> Calibration failed. ADC accuracy specifications are not guaranteed.

#define  ADC0_SC3_CAL_MASK           0x80u
#define  ADC0_SC3_CAL_SHIFT          7
//   Calibration

#define  ADC0_OFS_OFS_MASK           0xFFFFu
#define  ADC0_OFS_OFS_SHIFT          0
#define  ADC0_OFS_OFS(x)             (((uint32_t)(((uint32_t)(x))<<ADC0_OFS_OFS_SHIFT))&ADC0_OFS_OFS_MASK)
//   Offset Error Correction Value

#define  ADC0_PG_PG_MASK             0xFFFFu
#define  ADC0_PG_PG_SHIFT            0
#define  ADC0_PG_PG(x)               (((uint32_t)(((uint32_t)(x))<<ADC0_PG_PG_SHIFT))&ADC0_PG_PG_MASK)
//   Plus-Side Gain

#define  ADC0_MG_MG_MASK             0xFFFFu
#define  ADC0_MG_MG_SHIFT            0
#define  ADC0_MG_MG(x)               (((uint32_t)(((uint32_t)(x))<<ADC0_MG_MG_SHIFT))&ADC0_MG_MG_MASK)
//   Minus-Side Gain

#define  ADC0_CLPD_CLPD_MASK         0x3Fu
#define  ADC0_CLPD_CLPD_SHIFT        0
#define  ADC0_CLPD_CLPD(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLPD_CLPD_SHIFT))&ADC0_CLPD_CLPD_MASK)

#define  ADC0_CLPS_CLPS_MASK         0x3Fu
#define  ADC0_CLPS_CLPS_SHIFT        0
#define  ADC0_CLPS_CLPS(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLPS_CLPS_SHIFT))&ADC0_CLPS_CLPS_MASK)

#define  ADC0_CLP4_CLP4_MASK         0x3FFu
#define  ADC0_CLP4_CLP4_SHIFT        0
#define  ADC0_CLP4_CLP4(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLP4_CLP4_SHIFT))&ADC0_CLP4_CLP4_MASK)

#define  ADC0_CLP3_CLP3_MASK         0x1FFu
#define  ADC0_CLP3_CLP3_SHIFT        0
#define  ADC0_CLP3_CLP3(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLP3_CLP3_SHIFT))&ADC0_CLP3_CLP3_MASK)

#define  ADC0_CLP2_CLP2_MASK         0xFFu
#define  ADC0_CLP2_CLP2_SHIFT        0
#define  ADC0_CLP2_CLP2(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLP2_CLP2_SHIFT))&ADC0_CLP2_CLP2_MASK)

#define  ADC0_CLP1_CLP1_MASK         0x7Fu
#define  ADC0_CLP1_CLP1_SHIFT        0
#define  ADC0_CLP1_CLP1(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLP1_CLP1_SHIFT))&ADC0_CLP1_CLP1_MASK)

#define  ADC0_CLP0_CLP0_MASK         0x3Fu
#define  ADC0_CLP0_CLP0_SHIFT        0
#define  ADC0_CLP0_CLP0(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLP0_CLP0_SHIFT))&ADC0_CLP0_CLP0_MASK)

#define  ADC0_CLMD_CLMD_MASK         0x3Fu
#define  ADC0_CLMD_CLMD_SHIFT        0
#define  ADC0_CLMD_CLMD(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLMD_CLMD_SHIFT))&ADC0_CLMD_CLMD_MASK)

#define  ADC0_CLMS_CLMS_MASK         0x3Fu
#define  ADC0_CLMS_CLMS_SHIFT        0
#define  ADC0_CLMS_CLMS(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLMS_CLMS_SHIFT))&ADC0_CLMS_CLMS_MASK)

#define  ADC0_CLM4_CLM4_MASK         0x3FFu
#define  ADC0_CLM4_CLM4_SHIFT        0
#define  ADC0_CLM4_CLM4(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLM4_CLM4_SHIFT))&ADC0_CLM4_CLM4_MASK)

#define  ADC0_CLM3_CLM3_MASK         0x1FFu
#define  ADC0_CLM3_CLM3_SHIFT        0
#define  ADC0_CLM3_CLM3(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLM3_CLM3_SHIFT))&ADC0_CLM3_CLM3_MASK)

#define  ADC0_CLM2_CLM2_MASK         0xFFu
#define  ADC0_CLM2_CLM2_SHIFT        0
#define  ADC0_CLM2_CLM2(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLM2_CLM2_SHIFT))&ADC0_CLM2_CLM2_MASK)

#define  ADC0_CLM1_CLM1_MASK         0x7Fu
#define  ADC0_CLM1_CLM1_SHIFT        0
#define  ADC0_CLM1_CLM1(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLM1_CLM1_SHIFT))&ADC0_CLM1_CLM1_MASK)

#define  ADC0_CLM0_CLM0_MASK         0x3Fu
#define  ADC0_CLM0_CLM0_SHIFT        0
#define  ADC0_CLM0_CLM0(x)           (((uint32_t)(((uint32_t)(x))<<ADC0_CLM0_CLM0_SHIFT))&ADC0_CLM0_CLM0_MASK)

#define  CMP0_CR0_HYSTCTR_MASK       0x3u
#define  CMP0_CR0_HYSTCTR_SHIFT      0
#define  CMP0_CR0_HYSTCTR(x)         (((uint8_t)(((uint8_t)(x))<<CMP0_CR0_HYSTCTR_SHIFT))&CMP0_CR0_HYSTCTR_MASK)
//   Comparator hard block hysteresis control
//     0b00 ==> Level 0
//     0b01 ==> Level 1
//     0b10 ==> Level 2
//     0b11 ==> Level 3

#define  CMP0_CR0_FILTER_CNT_MASK    0x70u
#define  CMP0_CR0_FILTER_CNT_SHIFT   4
#define  CMP0_CR0_FILTER_CNT(x)      (((uint8_t)(((uint8_t)(x))<<CMP0_CR0_FILTER_CNT_SHIFT))&CMP0_CR0_FILTER_CNT_MASK)
//   Filter Sample Count
//     0b000 ==> Filter is disabled. If SE = 1, then COUT is a logic 0. This is not a legal state, and is not recommended. If SE = 0, COUT = COUTA.
//     0b001 ==> One sample must agree. The comparator output is simply sampled.
//     0b010 ==> 2 consecutive samples must agree.
//     0b011 ==> 3 consecutive samples must agree.
//     0b100 ==> 4 consecutive samples must agree.
//     0b101 ==> 5 consecutive samples must agree.
//     0b110 ==> 6 consecutive samples must agree.
//     0b111 ==> 7 consecutive samples must agree.

#define  CMP0_CR1_EN_MASK            0x1u
#define  CMP0_CR1_EN_SHIFT           0
//   Comparator Module Enable
//     0b0 ==> Analog Comparator is disabled.
//     0b1 ==> Analog Comparator is enabled.

#define  CMP0_CR1_OPE_MASK           0x2u
#define  CMP0_CR1_OPE_SHIFT          1
//   Comparator Output Pin Enable
//     0b0 ==> CMPO is not available on the associated CMPO output pin. If the comparator does not own the pin, this field has no effect.
//     0b1 ==> CMPO is available on the associated CMPO output pin. The comparator output (CMPO) is driven out on the associated CMPO output pin if the comparator owns the pin. If the comparator does not own the field, this bit has no effect.

#define  CMP0_CR1_COS_MASK           0x4u
#define  CMP0_CR1_COS_SHIFT          2
//   Comparator Output Select
//     0b0 ==> Set the filtered comparator output (CMPO) to equal COUT.
//     0b1 ==> Set the unfiltered comparator output (CMPO) to equal COUTA.

#define  CMP0_CR1_INV_MASK           0x8u
#define  CMP0_CR1_INV_SHIFT          3
//   Comparator INVERT
//     0b0 ==> Does not invert the comparator output.
//     0b1 ==> Inverts the comparator output.

#define  CMP0_CR1_PMODE_MASK         0x10u
#define  CMP0_CR1_PMODE_SHIFT        4
//   Power Mode Select
//     0b0 ==> Low-Speed (LS) Comparison mode selected. In this mode, CMP has slower output propagation delay and lower current consumption.
//     0b1 ==> High-Speed (HS) Comparison mode selected. In this mode, CMP has faster output propagation delay and higher current consumption.

#define  CMP0_CR1_TRIGM_MASK         0x20u
#define  CMP0_CR1_TRIGM_SHIFT        5
//   Trigger Mode Enable
//     0b0 ==> Trigger mode is disabled.
//     0b1 ==> Trigger mode is enabled.

#define  CMP0_CR1_WE_MASK            0x40u
#define  CMP0_CR1_WE_SHIFT           6
//   Windowing Enable
//     0b0 ==> Windowing mode is not selected.
//     0b1 ==> Windowing mode is selected.

#define  CMP0_CR1_SE_MASK            0x80u
#define  CMP0_CR1_SE_SHIFT           7
//   Sample Enable
//     0b0 ==> Sampling mode is not selected.
//     0b1 ==> Sampling mode is selected.

#define  CMP0_FPR_FILT_PER_MASK      0xFFu
#define  CMP0_FPR_FILT_PER_SHIFT     0
#define  CMP0_FPR_FILT_PER(x)        (((uint8_t)(((uint8_t)(x))<<CMP0_FPR_FILT_PER_SHIFT))&CMP0_FPR_FILT_PER_MASK)
//   Filter Sample Period

#define  CMP0_SCR_COUT_MASK          0x1u
#define  CMP0_SCR_COUT_SHIFT         0
//   Analog Comparator Output

#define  CMP0_SCR_CFF_MASK           0x2u
#define  CMP0_SCR_CFF_SHIFT          1
//   Analog Comparator Flag Falling
//     0b0 ==> Falling-edge on COUT has not been detected.
//     0b1 ==> Falling-edge on COUT has occurred.

#define  CMP0_SCR_CFR_MASK           0x4u
#define  CMP0_SCR_CFR_SHIFT          2
//   Analog Comparator Flag Rising
//     0b0 ==> Rising-edge on COUT has not been detected.
//     0b1 ==> Rising-edge on COUT has occurred.

#define  CMP0_SCR_IEF_MASK           0x8u
#define  CMP0_SCR_IEF_SHIFT          3
//   Comparator Interrupt Enable Falling
//     0b0 ==> Interrupt is disabled.
//     0b1 ==> Interrupt is enabled.

#define  CMP0_SCR_IER_MASK           0x10u
#define  CMP0_SCR_IER_SHIFT          4
//   Comparator Interrupt Enable Rising
//     0b0 ==> Interrupt is disabled.
//     0b1 ==> Interrupt is enabled.

#define  CMP0_SCR_DMAEN_MASK         0x40u
#define  CMP0_SCR_DMAEN_SHIFT        6
//   DMA Enable Control
//     0b0 ==> DMA is disabled.
//     0b1 ==> DMA is enabled.

#define  CMP0_DACCR_VOSEL_MASK       0x3Fu
#define  CMP0_DACCR_VOSEL_SHIFT      0
#define  CMP0_DACCR_VOSEL(x)         (((uint8_t)(((uint8_t)(x))<<CMP0_DACCR_VOSEL_SHIFT))&CMP0_DACCR_VOSEL_MASK)
//   DAC Output Voltage Select

#define  CMP0_DACCR_VRSEL_MASK       0x40u
#define  CMP0_DACCR_VRSEL_SHIFT      6
//   Supply Voltage Reference Source Select
//     0b0 ==> V is selected as resistor ladder network supply reference V. in1 in
//     0b1 ==> V is selected as resistor ladder network supply reference V. in2 in

#define  CMP0_DACCR_DACEN_MASK       0x80u
#define  CMP0_DACCR_DACEN_SHIFT      7
//   DAC Enable
//     0b0 ==> DAC is disabled.
//     0b1 ==> DAC is enabled.

#define  CMP0_MUXCR_MSEL_MASK        0x7u
#define  CMP0_MUXCR_MSEL_SHIFT       0
#define  CMP0_MUXCR_MSEL(x)          (((uint8_t)(((uint8_t)(x))<<CMP0_MUXCR_MSEL_SHIFT))&CMP0_MUXCR_MSEL_MASK)
//   Minus Input Mux Control
//     0b000 ==> IN0
//     0b001 ==> IN1
//     0b010 ==> IN2
//     0b011 ==> IN3
//     0b100 ==> IN4
//     0b101 ==> IN5
//     0b110 ==> IN6
//     0b111 ==> IN7

#define  CMP0_MUXCR_PSEL_MASK        0x38u
#define  CMP0_MUXCR_PSEL_SHIFT       3
#define  CMP0_MUXCR_PSEL(x)          (((uint8_t)(((uint8_t)(x))<<CMP0_MUXCR_PSEL_SHIFT))&CMP0_MUXCR_PSEL_MASK)
//   Plus Input Mux Control
//     0b000 ==> IN0
//     0b001 ==> IN1
//     0b010 ==> IN2
//     0b011 ==> IN3
//     0b100 ==> IN4
//     0b101 ==> IN5
//     0b110 ==> IN6
//     0b111 ==> IN7

#define  CMP0_MUXCR_PSTM_MASK        0x40u
#define  CMP0_MUXCR_PSTM_SHIFT       6
//   Pass Through Mode Enable
//     0b0 ==> Pass Through Mode is disabled.
//     0b1 ==> Pass Through Mode is enabled.

#define  DAC0_DAT0L_DATA0_MASK       0xFFu
#define  DAC0_DAT0L_DATA0_SHIFT      0
#define  DAC0_DAT0L_DATA0(x)         (((uint8_t)(((uint8_t)(x))<<DAC0_DAT0L_DATA0_SHIFT))&DAC0_DAT0L_DATA0_MASK)

#define  DAC0_DAT0H_DATA1_MASK       0xFu
#define  DAC0_DAT0H_DATA1_SHIFT      0
#define  DAC0_DAT0H_DATA1(x)         (((uint8_t)(((uint8_t)(x))<<DAC0_DAT0H_DATA1_SHIFT))&DAC0_DAT0H_DATA1_MASK)

#define  DAC0_DAT1L_DATA0_MASK       0xFFu
#define  DAC0_DAT1L_DATA0_SHIFT      0
#define  DAC0_DAT1L_DATA0(x)         (((uint8_t)(((uint8_t)(x))<<DAC0_DAT1L_DATA0_SHIFT))&DAC0_DAT1L_DATA0_MASK)

#define  DAC0_DAT1H_DATA1_MASK       0xFu
#define  DAC0_DAT1H_DATA1_SHIFT      0
#define  DAC0_DAT1H_DATA1(x)         (((uint8_t)(((uint8_t)(x))<<DAC0_DAT1H_DATA1_SHIFT))&DAC0_DAT1H_DATA1_MASK)

#define  DAC0_SR_DACBFRPBF_MASK      0x1u
#define  DAC0_SR_DACBFRPBF_SHIFT     0
//   DAC Buffer Read Pointer Bottom Position Flag
//     0b0 ==> The DAC buffer read pointer is not equal to C2[DACBFUP].
//     0b1 ==> The DAC buffer read pointer is equal to C2[DACBFUP].

#define  DAC0_SR_DACBFRPTF_MASK      0x2u
#define  DAC0_SR_DACBFRPTF_SHIFT     1
//   DAC Buffer Read Pointer Top Position Flag
//     0b0 ==> The DAC buffer read pointer is not zero.
//     0b1 ==> The DAC buffer read pointer is zero.

#define  DAC0_C0_DACBBIEN_MASK       0x1u
#define  DAC0_C0_DACBBIEN_SHIFT      0
//   DAC Buffer Read Pointer Bottom Flag Interrupt Enable
//     0b0 ==> The DAC buffer read pointer bottom flag interrupt is disabled.
//     0b1 ==> The DAC buffer read pointer bottom flag interrupt is enabled.

#define  DAC0_C0_DACBTIEN_MASK       0x2u
#define  DAC0_C0_DACBTIEN_SHIFT      1
//   DAC Buffer Read Pointer Top Flag Interrupt Enable
//     0b0 ==> The DAC buffer read pointer top flag interrupt is disabled.
//     0b1 ==> The DAC buffer read pointer top flag interrupt is enabled.

#define  DAC0_C0_LPEN_MASK           0x8u
#define  DAC0_C0_LPEN_SHIFT          3
//   DAC Low Power Control
//     0b0 ==> High-Power mode
//     0b1 ==> Low-Power mode

#define  DAC0_C0_DACSWTRG_MASK       0x10u
#define  DAC0_C0_DACSWTRG_SHIFT      4
//   DAC Software Trigger
//     0b0 ==> The DAC soft trigger is not valid.
//     0b1 ==> The DAC soft trigger is valid.

#define  DAC0_C0_DACTRGSEL_MASK      0x20u
#define  DAC0_C0_DACTRGSEL_SHIFT     5
//   DAC Trigger Select
//     0b0 ==> The DAC hardware trigger is selected.
//     0b1 ==> The DAC software trigger is selected.

#define  DAC0_C0_DACRFS_MASK         0x40u
#define  DAC0_C0_DACRFS_SHIFT        6
//   DAC Reference Select
//     0b0 ==> The DAC selects DACREF_1 as the reference voltage.
//     0b1 ==> The DAC selects DACREF_2 as the reference voltage.

#define  DAC0_C0_DACEN_MASK          0x80u
#define  DAC0_C0_DACEN_SHIFT         7
//   DAC Enable
//     0b0 ==> The DAC system is disabled.
//     0b1 ==> The DAC system is enabled.

#define  DAC0_C1_DACBFEN_MASK        0x1u
#define  DAC0_C1_DACBFEN_SHIFT       0
//   DAC Buffer Enable
//     0b0 ==> Buffer read pointer is disabled. The converted data is always the first word of the buffer.
//     0b1 ==> Buffer read pointer is enabled. The converted data is the word that the read pointer points to. It means converted data can be from any word of the buffer.

#define  DAC0_C1_DACBFMD_MASK        0x4u
#define  DAC0_C1_DACBFMD_SHIFT       2
//   DAC Buffer Work Mode Select
//     0b0 ==> Normal mode
//     0b1 ==> One-Time Scan mode

#define  DAC0_C1_DMAEN_MASK          0x80u
#define  DAC0_C1_DMAEN_SHIFT         7
//   DMA Enable Select
//     0b0 ==> DMA is disabled.
//     0b1 ==> DMA is enabled. When DMA is enabled, the DMA request will be generated by original interrupts. The interrupts will not be presented on this module at the same time.

#define  DAC0_C2_DACBFUP_MASK        0x1u
#define  DAC0_C2_DACBFUP_SHIFT       0
//   DAC Buffer Upper Limit

#define  DAC0_C2_DACBFRP_MASK        0x10u
#define  DAC0_C2_DACBFRP_SHIFT       4
//   DAC Buffer Read Pointer

#define  DMA_SAR0_SAR_MASK           0xFFFFFFFFu
#define  DMA_SAR0_SAR_SHIFT          0
#define  DMA_SAR0_SAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_SAR0_SAR_SHIFT))&DMA_SAR0_SAR_MASK)

#define  DMA_DAR0_DAR_MASK           0xFFFFFFFFu
#define  DMA_DAR0_DAR_SHIFT          0
#define  DMA_DAR0_DAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_DAR0_DAR_SHIFT))&DMA_DAR0_DAR_MASK)

#define  DMA_DSR_BCR0_BCR_MASK       0xFFFFFFu
#define  DMA_DSR_BCR0_BCR_SHIFT      0
#define  DMA_DSR_BCR0_BCR(x)         (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR0_BCR_SHIFT))&DMA_DSR_BCR0_BCR_MASK)

#define  DMA_DSR_BCR0_DONE_MASK      0x1000000u
#define  DMA_DSR_BCR0_DONE_SHIFT     24
//   Transactions done
//     0b0 ==> DMA transfer is not yet complete. Writing a 0 has no effect.
//     0b1 ==> DMA transfer completed. Writing a 1 to this bit clears all DMA status bits and should be used in an interrupt service routine to clear the DMA interrupt and error bits.

#define  DMA_DSR_BCR0_BSY_MASK       0x2000000u
#define  DMA_DSR_BCR0_BSY_SHIFT      25
//   Busy
//     0b0 ==> DMA channel is inactive. Cleared when the DMA has finished the last transaction.
//     0b1 ==> BSY is set the first time the channel is enabled after a transfer is initiated.

#define  DMA_DSR_BCR0_REQ_MASK       0x4000000u
#define  DMA_DSR_BCR0_REQ_SHIFT      26
//   Request
//     0b0 ==> No request is pending or the channel is currently active. Cleared when the channel is selected.
//     0b1 ==> The DMA channel has a transfer remaining and the channel is not selected.

#define  DMA_DSR_BCR0_BED_MASK       0x10000000u
#define  DMA_DSR_BCR0_BED_SHIFT      28
//   Bus error on destination
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the write portion of a transfer.

#define  DMA_DSR_BCR0_BES_MASK       0x20000000u
#define  DMA_DSR_BCR0_BES_SHIFT      29
//   Bus error on source
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the read portion of a transfer.

#define  DMA_DSR_BCR0_CE_MASK        0x40000000u
#define  DMA_DSR_BCR0_CE_SHIFT       30
//   Configuration error
//     0b0 ==> No configuration error exists.
//     0b1 ==> A configuration error has occurred.

#define  DMA_DCR0_LCH2_MASK          0x3u
#define  DMA_DCR0_LCH2_SHIFT         0
#define  DMA_DCR0_LCH2(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_LCH2_SHIFT))&DMA_DCR0_LCH2_MASK)
//   Link channel 2
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR0_LCH1_MASK          0xCu
#define  DMA_DCR0_LCH1_SHIFT         2
#define  DMA_DCR0_LCH1(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_LCH1_SHIFT))&DMA_DCR0_LCH1_MASK)
//   Link channel 1
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR0_LINKCC_MASK        0x30u
#define  DMA_DCR0_LINKCC_SHIFT       4
#define  DMA_DCR0_LINKCC(x)          (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_LINKCC_SHIFT))&DMA_DCR0_LINKCC_MASK)
//   Link channel control
//     0b00 ==> No channel-to-channel linking
//     0b01 ==> Perform a link to channel LCH1 after each cycle-steal transfer followed by a link to LCH2 after the BCR decrements to zero
//     0b10 ==> Perform a link to channel LCH1 after each cycle-steal transfer
//     0b11 ==> Perform a link to channel LCH1 after the BCR decrements to zero

#define  DMA_DCR0_D_REQ_MASK         0x80u
#define  DMA_DCR0_D_REQ_SHIFT        7
//   Disable request
//     0b0 ==> ERQ bit is not affected.
//     0b1 ==> ERQ bit is cleared when the BCR is exhausted.

#define  DMA_DCR0_DMOD_MASK          0xF00u
#define  DMA_DCR0_DMOD_SHIFT         8
#define  DMA_DCR0_DMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_DMOD_SHIFT))&DMA_DCR0_DMOD_MASK)
//   Destination address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR0_SMOD_MASK          0xF000u
#define  DMA_DCR0_SMOD_SHIFT         12
#define  DMA_DCR0_SMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_SMOD_SHIFT))&DMA_DCR0_SMOD_MASK)
//   Source address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR0_START_MASK         0x10000u
#define  DMA_DCR0_START_SHIFT        16
//   Start transfer
//     0b0 ==> DMA inactive
//     0b1 ==> The DMA begins the transfer in accordance to the values in the TCDn. START is cleared automatically after one module clock and always reads as logic 0.

#define  DMA_DCR0_DSIZE_MASK         0x60000u
#define  DMA_DCR0_DSIZE_SHIFT        17
#define  DMA_DCR0_DSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_DSIZE_SHIFT))&DMA_DCR0_DSIZE_MASK)
//   Destination size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR0_DINC_MASK          0x80000u
#define  DMA_DCR0_DINC_SHIFT         19
//   Destination increment
//     0b0 ==> No change to the DAR after a successful transfer.
//     0b1 ==> The DAR increments by 1, 2, 4 depending upon the size of the transfer.

#define  DMA_DCR0_SSIZE_MASK         0x300000u
#define  DMA_DCR0_SSIZE_SHIFT        20
#define  DMA_DCR0_SSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR0_SSIZE_SHIFT))&DMA_DCR0_SSIZE_MASK)
//   Source size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR0_SINC_MASK          0x400000u
#define  DMA_DCR0_SINC_SHIFT         22
//   Source increment
//     0b0 ==> No change to SAR after a successful transfer.
//     0b1 ==> The SAR increments by 1, 2, 4 as determined by the transfer size.

#define  DMA_DCR0_EADREQ_MASK        0x800000u
#define  DMA_DCR0_EADREQ_SHIFT       23
//   Enable asynchronous DMA requests
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  DMA_DCR0_AA_MASK            0x10000000u
#define  DMA_DCR0_AA_SHIFT           28
//   Auto-align
//     0b0 ==> Auto-align disabled
//     0b1 ==> If SSIZE indicates a transfer no smaller than DSIZE, source accesses are auto-aligned; otherwise, destination accesses are auto-aligned. Source alignment takes precedence over destination alignment. If auto-alignment is enabled, the appropriate address register increments, regardless of DINC or SINC.

#define  DMA_DCR0_CS_MASK            0x20000000u
#define  DMA_DCR0_CS_SHIFT           29
//   Cycle steal
//     0b0 ==> DMA continuously makes read/write transfers until the BCR decrements to 0.
//     0b1 ==> Forces a single read/write transfer per request.

#define  DMA_DCR0_ERQ_MASK           0x40000000u
#define  DMA_DCR0_ERQ_SHIFT          30
//   Enable peripheral request
//     0b0 ==> Peripheral request is ignored.
//     0b1 ==> Enables peripheral request to initiate transfer. A software-initiated request (setting the START bit) is always enabled.

#define  DMA_DCR0_EINT_MASK          0x80000000u
#define  DMA_DCR0_EINT_SHIFT         31
//   Enable interrupt on completion of transfer
//     0b0 ==> No interrupt is generated.
//     0b1 ==> Interrupt signal is enabled.

#define  DMA_SAR1_SAR_MASK           0xFFFFFFFFu
#define  DMA_SAR1_SAR_SHIFT          0
#define  DMA_SAR1_SAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_SAR1_SAR_SHIFT))&DMA_SAR1_SAR_MASK)

#define  DMA_DAR1_DAR_MASK           0xFFFFFFFFu
#define  DMA_DAR1_DAR_SHIFT          0
#define  DMA_DAR1_DAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_DAR1_DAR_SHIFT))&DMA_DAR1_DAR_MASK)

#define  DMA_DSR_BCR1_BCR_MASK       0xFFFFFFu
#define  DMA_DSR_BCR1_BCR_SHIFT      0
#define  DMA_DSR_BCR1_BCR(x)         (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR1_BCR_SHIFT))&DMA_DSR_BCR1_BCR_MASK)

#define  DMA_DSR_BCR1_DONE_MASK      0x1000000u
#define  DMA_DSR_BCR1_DONE_SHIFT     24
//   Transactions done
//     0b0 ==> DMA transfer is not yet complete. Writing a 0 has no effect.
//     0b1 ==> DMA transfer completed. Writing a 1 to this bit clears all DMA status bits and should be used in an interrupt service routine to clear the DMA interrupt and error bits.

#define  DMA_DSR_BCR1_BSY_MASK       0x2000000u
#define  DMA_DSR_BCR1_BSY_SHIFT      25
//   Busy
//     0b0 ==> DMA channel is inactive. Cleared when the DMA has finished the last transaction.
//     0b1 ==> BSY is set the first time the channel is enabled after a transfer is initiated.

#define  DMA_DSR_BCR1_REQ_MASK       0x4000000u
#define  DMA_DSR_BCR1_REQ_SHIFT      26
//   Request
//     0b0 ==> No request is pending or the channel is currently active. Cleared when the channel is selected.
//     0b1 ==> The DMA channel has a transfer remaining and the channel is not selected.

#define  DMA_DSR_BCR1_BED_MASK       0x10000000u
#define  DMA_DSR_BCR1_BED_SHIFT      28
//   Bus error on destination
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the write portion of a transfer.

#define  DMA_DSR_BCR1_BES_MASK       0x20000000u
#define  DMA_DSR_BCR1_BES_SHIFT      29
//   Bus error on source
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the read portion of a transfer.

#define  DMA_DSR_BCR1_CE_MASK        0x40000000u
#define  DMA_DSR_BCR1_CE_SHIFT       30
//   Configuration error
//     0b0 ==> No configuration error exists.
//     0b1 ==> A configuration error has occurred.

#define  DMA_DCR1_LCH2_MASK          0x3u
#define  DMA_DCR1_LCH2_SHIFT         0
#define  DMA_DCR1_LCH2(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_LCH2_SHIFT))&DMA_DCR1_LCH2_MASK)
//   Link channel 2
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR1_LCH1_MASK          0xCu
#define  DMA_DCR1_LCH1_SHIFT         2
#define  DMA_DCR1_LCH1(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_LCH1_SHIFT))&DMA_DCR1_LCH1_MASK)
//   Link channel 1
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR1_LINKCC_MASK        0x30u
#define  DMA_DCR1_LINKCC_SHIFT       4
#define  DMA_DCR1_LINKCC(x)          (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_LINKCC_SHIFT))&DMA_DCR1_LINKCC_MASK)
//   Link channel control
//     0b00 ==> No channel-to-channel linking
//     0b01 ==> Perform a link to channel LCH1 after each cycle-steal transfer followed by a link to LCH2 after the BCR decrements to zero
//     0b10 ==> Perform a link to channel LCH1 after each cycle-steal transfer
//     0b11 ==> Perform a link to channel LCH1 after the BCR decrements to zero

#define  DMA_DCR1_D_REQ_MASK         0x80u
#define  DMA_DCR1_D_REQ_SHIFT        7
//   Disable request
//     0b0 ==> ERQ bit is not affected.
//     0b1 ==> ERQ bit is cleared when the BCR is exhausted.

#define  DMA_DCR1_DMOD_MASK          0xF00u
#define  DMA_DCR1_DMOD_SHIFT         8
#define  DMA_DCR1_DMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_DMOD_SHIFT))&DMA_DCR1_DMOD_MASK)
//   Destination address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR1_SMOD_MASK          0xF000u
#define  DMA_DCR1_SMOD_SHIFT         12
#define  DMA_DCR1_SMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_SMOD_SHIFT))&DMA_DCR1_SMOD_MASK)
//   Source address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR1_START_MASK         0x10000u
#define  DMA_DCR1_START_SHIFT        16
//   Start transfer
//     0b0 ==> DMA inactive
//     0b1 ==> The DMA begins the transfer in accordance to the values in the TCDn. START is cleared automatically after one module clock and always reads as logic 0.

#define  DMA_DCR1_DSIZE_MASK         0x60000u
#define  DMA_DCR1_DSIZE_SHIFT        17
#define  DMA_DCR1_DSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_DSIZE_SHIFT))&DMA_DCR1_DSIZE_MASK)
//   Destination size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR1_DINC_MASK          0x80000u
#define  DMA_DCR1_DINC_SHIFT         19
//   Destination increment
//     0b0 ==> No change to the DAR after a successful transfer.
//     0b1 ==> The DAR increments by 1, 2, 4 depending upon the size of the transfer.

#define  DMA_DCR1_SSIZE_MASK         0x300000u
#define  DMA_DCR1_SSIZE_SHIFT        20
#define  DMA_DCR1_SSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR1_SSIZE_SHIFT))&DMA_DCR1_SSIZE_MASK)
//   Source size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR1_SINC_MASK          0x400000u
#define  DMA_DCR1_SINC_SHIFT         22
//   Source increment
//     0b0 ==> No change to SAR after a successful transfer.
//     0b1 ==> The SAR increments by 1, 2, 4 as determined by the transfer size.

#define  DMA_DCR1_EADREQ_MASK        0x800000u
#define  DMA_DCR1_EADREQ_SHIFT       23
//   Enable asynchronous DMA requests
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  DMA_DCR1_AA_MASK            0x10000000u
#define  DMA_DCR1_AA_SHIFT           28
//   Auto-align
//     0b0 ==> Auto-align disabled
//     0b1 ==> If SSIZE indicates a transfer no smaller than DSIZE, source accesses are auto-aligned; otherwise, destination accesses are auto-aligned. Source alignment takes precedence over destination alignment. If auto-alignment is enabled, the appropriate address register increments, regardless of DINC or SINC.

#define  DMA_DCR1_CS_MASK            0x20000000u
#define  DMA_DCR1_CS_SHIFT           29
//   Cycle steal
//     0b0 ==> DMA continuously makes read/write transfers until the BCR decrements to 0.
//     0b1 ==> Forces a single read/write transfer per request.

#define  DMA_DCR1_ERQ_MASK           0x40000000u
#define  DMA_DCR1_ERQ_SHIFT          30
//   Enable peripheral request
//     0b0 ==> Peripheral request is ignored.
//     0b1 ==> Enables peripheral request to initiate transfer. A software-initiated request (setting the START bit) is always enabled.

#define  DMA_DCR1_EINT_MASK          0x80000000u
#define  DMA_DCR1_EINT_SHIFT         31
//   Enable interrupt on completion of transfer
//     0b0 ==> No interrupt is generated.
//     0b1 ==> Interrupt signal is enabled.

#define  DMA_SAR2_SAR_MASK           0xFFFFFFFFu
#define  DMA_SAR2_SAR_SHIFT          0
#define  DMA_SAR2_SAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_SAR2_SAR_SHIFT))&DMA_SAR2_SAR_MASK)

#define  DMA_DAR2_DAR_MASK           0xFFFFFFFFu
#define  DMA_DAR2_DAR_SHIFT          0
#define  DMA_DAR2_DAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_DAR2_DAR_SHIFT))&DMA_DAR2_DAR_MASK)

#define  DMA_DSR_BCR2_BCR_MASK       0xFFFFFFu
#define  DMA_DSR_BCR2_BCR_SHIFT      0
#define  DMA_DSR_BCR2_BCR(x)         (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR2_BCR_SHIFT))&DMA_DSR_BCR2_BCR_MASK)

#define  DMA_DSR_BCR2_DONE_MASK      0x1000000u
#define  DMA_DSR_BCR2_DONE_SHIFT     24
//   Transactions done
//     0b0 ==> DMA transfer is not yet complete. Writing a 0 has no effect.
//     0b1 ==> DMA transfer completed. Writing a 1 to this bit clears all DMA status bits and should be used in an interrupt service routine to clear the DMA interrupt and error bits.

#define  DMA_DSR_BCR2_BSY_MASK       0x2000000u
#define  DMA_DSR_BCR2_BSY_SHIFT      25
//   Busy
//     0b0 ==> DMA channel is inactive. Cleared when the DMA has finished the last transaction.
//     0b1 ==> BSY is set the first time the channel is enabled after a transfer is initiated.

#define  DMA_DSR_BCR2_REQ_MASK       0x4000000u
#define  DMA_DSR_BCR2_REQ_SHIFT      26
//   Request
//     0b0 ==> No request is pending or the channel is currently active. Cleared when the channel is selected.
//     0b1 ==> The DMA channel has a transfer remaining and the channel is not selected.

#define  DMA_DSR_BCR2_BED_MASK       0x10000000u
#define  DMA_DSR_BCR2_BED_SHIFT      28
//   Bus error on destination
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the write portion of a transfer.

#define  DMA_DSR_BCR2_BES_MASK       0x20000000u
#define  DMA_DSR_BCR2_BES_SHIFT      29
//   Bus error on source
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the read portion of a transfer.

#define  DMA_DSR_BCR2_CE_MASK        0x40000000u
#define  DMA_DSR_BCR2_CE_SHIFT       30
//   Configuration error
//     0b0 ==> No configuration error exists.
//     0b1 ==> A configuration error has occurred.

#define  DMA_DCR2_LCH2_MASK          0x3u
#define  DMA_DCR2_LCH2_SHIFT         0
#define  DMA_DCR2_LCH2(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_LCH2_SHIFT))&DMA_DCR2_LCH2_MASK)
//   Link channel 2
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR2_LCH1_MASK          0xCu
#define  DMA_DCR2_LCH1_SHIFT         2
#define  DMA_DCR2_LCH1(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_LCH1_SHIFT))&DMA_DCR2_LCH1_MASK)
//   Link channel 1
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR2_LINKCC_MASK        0x30u
#define  DMA_DCR2_LINKCC_SHIFT       4
#define  DMA_DCR2_LINKCC(x)          (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_LINKCC_SHIFT))&DMA_DCR2_LINKCC_MASK)
//   Link channel control
//     0b00 ==> No channel-to-channel linking
//     0b01 ==> Perform a link to channel LCH1 after each cycle-steal transfer followed by a link to LCH2 after the BCR decrements to zero
//     0b10 ==> Perform a link to channel LCH1 after each cycle-steal transfer
//     0b11 ==> Perform a link to channel LCH1 after the BCR decrements to zero

#define  DMA_DCR2_D_REQ_MASK         0x80u
#define  DMA_DCR2_D_REQ_SHIFT        7
//   Disable request
//     0b0 ==> ERQ bit is not affected.
//     0b1 ==> ERQ bit is cleared when the BCR is exhausted.

#define  DMA_DCR2_DMOD_MASK          0xF00u
#define  DMA_DCR2_DMOD_SHIFT         8
#define  DMA_DCR2_DMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_DMOD_SHIFT))&DMA_DCR2_DMOD_MASK)
//   Destination address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR2_SMOD_MASK          0xF000u
#define  DMA_DCR2_SMOD_SHIFT         12
#define  DMA_DCR2_SMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_SMOD_SHIFT))&DMA_DCR2_SMOD_MASK)
//   Source address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR2_START_MASK         0x10000u
#define  DMA_DCR2_START_SHIFT        16
//   Start transfer
//     0b0 ==> DMA inactive
//     0b1 ==> The DMA begins the transfer in accordance to the values in the TCDn. START is cleared automatically after one module clock and always reads as logic 0.

#define  DMA_DCR2_DSIZE_MASK         0x60000u
#define  DMA_DCR2_DSIZE_SHIFT        17
#define  DMA_DCR2_DSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_DSIZE_SHIFT))&DMA_DCR2_DSIZE_MASK)
//   Destination size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR2_DINC_MASK          0x80000u
#define  DMA_DCR2_DINC_SHIFT         19
//   Destination increment
//     0b0 ==> No change to the DAR after a successful transfer.
//     0b1 ==> The DAR increments by 1, 2, 4 depending upon the size of the transfer.

#define  DMA_DCR2_SSIZE_MASK         0x300000u
#define  DMA_DCR2_SSIZE_SHIFT        20
#define  DMA_DCR2_SSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR2_SSIZE_SHIFT))&DMA_DCR2_SSIZE_MASK)
//   Source size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR2_SINC_MASK          0x400000u
#define  DMA_DCR2_SINC_SHIFT         22
//   Source increment
//     0b0 ==> No change to SAR after a successful transfer.
//     0b1 ==> The SAR increments by 1, 2, 4 as determined by the transfer size.

#define  DMA_DCR2_EADREQ_MASK        0x800000u
#define  DMA_DCR2_EADREQ_SHIFT       23
//   Enable asynchronous DMA requests
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  DMA_DCR2_AA_MASK            0x10000000u
#define  DMA_DCR2_AA_SHIFT           28
//   Auto-align
//     0b0 ==> Auto-align disabled
//     0b1 ==> If SSIZE indicates a transfer no smaller than DSIZE, source accesses are auto-aligned; otherwise, destination accesses are auto-aligned. Source alignment takes precedence over destination alignment. If auto-alignment is enabled, the appropriate address register increments, regardless of DINC or SINC.

#define  DMA_DCR2_CS_MASK            0x20000000u
#define  DMA_DCR2_CS_SHIFT           29
//   Cycle steal
//     0b0 ==> DMA continuously makes read/write transfers until the BCR decrements to 0.
//     0b1 ==> Forces a single read/write transfer per request.

#define  DMA_DCR2_ERQ_MASK           0x40000000u
#define  DMA_DCR2_ERQ_SHIFT          30
//   Enable peripheral request
//     0b0 ==> Peripheral request is ignored.
//     0b1 ==> Enables peripheral request to initiate transfer. A software-initiated request (setting the START bit) is always enabled.

#define  DMA_DCR2_EINT_MASK          0x80000000u
#define  DMA_DCR2_EINT_SHIFT         31
//   Enable interrupt on completion of transfer
//     0b0 ==> No interrupt is generated.
//     0b1 ==> Interrupt signal is enabled.

#define  DMA_SAR3_SAR_MASK           0xFFFFFFFFu
#define  DMA_SAR3_SAR_SHIFT          0
#define  DMA_SAR3_SAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_SAR3_SAR_SHIFT))&DMA_SAR3_SAR_MASK)

#define  DMA_DAR3_DAR_MASK           0xFFFFFFFFu
#define  DMA_DAR3_DAR_SHIFT          0
#define  DMA_DAR3_DAR(x)             (((uint32_t)(((uint32_t)(x))<<DMA_DAR3_DAR_SHIFT))&DMA_DAR3_DAR_MASK)

#define  DMA_DSR_BCR3_BCR_MASK       0xFFFFFFu
#define  DMA_DSR_BCR3_BCR_SHIFT      0
#define  DMA_DSR_BCR3_BCR(x)         (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR3_BCR_SHIFT))&DMA_DSR_BCR3_BCR_MASK)

#define  DMA_DSR_BCR3_DONE_MASK      0x1000000u
#define  DMA_DSR_BCR3_DONE_SHIFT     24
//   Transactions done
//     0b0 ==> DMA transfer is not yet complete. Writing a 0 has no effect.
//     0b1 ==> DMA transfer completed. Writing a 1 to this bit clears all DMA status bits and should be used in an interrupt service routine to clear the DMA interrupt and error bits.

#define  DMA_DSR_BCR3_BSY_MASK       0x2000000u
#define  DMA_DSR_BCR3_BSY_SHIFT      25
//   Busy
//     0b0 ==> DMA channel is inactive. Cleared when the DMA has finished the last transaction.
//     0b1 ==> BSY is set the first time the channel is enabled after a transfer is initiated.

#define  DMA_DSR_BCR3_REQ_MASK       0x4000000u
#define  DMA_DSR_BCR3_REQ_SHIFT      26
//   Request
//     0b0 ==> No request is pending or the channel is currently active. Cleared when the channel is selected.
//     0b1 ==> The DMA channel has a transfer remaining and the channel is not selected.

#define  DMA_DSR_BCR3_BED_MASK       0x10000000u
#define  DMA_DSR_BCR3_BED_SHIFT      28
//   Bus error on destination
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the write portion of a transfer.

#define  DMA_DSR_BCR3_BES_MASK       0x20000000u
#define  DMA_DSR_BCR3_BES_SHIFT      29
//   Bus error on source
//     0b0 ==> No bus error occurred.
//     0b1 ==> The DMA channel terminated with a bus error during the read portion of a transfer.

#define  DMA_DSR_BCR3_CE_MASK        0x40000000u
#define  DMA_DSR_BCR3_CE_SHIFT       30
//   Configuration error
//     0b0 ==> No configuration error exists.
//     0b1 ==> A configuration error has occurred.

#define  DMA_DCR3_LCH2_MASK          0x3u
#define  DMA_DCR3_LCH2_SHIFT         0
#define  DMA_DCR3_LCH2(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_LCH2_SHIFT))&DMA_DCR3_LCH2_MASK)
//   Link channel 2
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR3_LCH1_MASK          0xCu
#define  DMA_DCR3_LCH1_SHIFT         2
#define  DMA_DCR3_LCH1(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_LCH1_SHIFT))&DMA_DCR3_LCH1_MASK)
//   Link channel 1
//     0b00 ==> DMA Channel 0
//     0b01 ==> DMA Channel 1
//     0b10 ==> DMA Channel 2
//     0b11 ==> DMA Channel 3

#define  DMA_DCR3_LINKCC_MASK        0x30u
#define  DMA_DCR3_LINKCC_SHIFT       4
#define  DMA_DCR3_LINKCC(x)          (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_LINKCC_SHIFT))&DMA_DCR3_LINKCC_MASK)
//   Link channel control
//     0b00 ==> No channel-to-channel linking
//     0b01 ==> Perform a link to channel LCH1 after each cycle-steal transfer followed by a link to LCH2 after the BCR decrements to zero
//     0b10 ==> Perform a link to channel LCH1 after each cycle-steal transfer
//     0b11 ==> Perform a link to channel LCH1 after the BCR decrements to zero

#define  DMA_DCR3_D_REQ_MASK         0x80u
#define  DMA_DCR3_D_REQ_SHIFT        7
//   Disable request
//     0b0 ==> ERQ bit is not affected.
//     0b1 ==> ERQ bit is cleared when the BCR is exhausted.

#define  DMA_DCR3_DMOD_MASK          0xF00u
#define  DMA_DCR3_DMOD_SHIFT         8
#define  DMA_DCR3_DMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_DMOD_SHIFT))&DMA_DCR3_DMOD_MASK)
//   Destination address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR3_SMOD_MASK          0xF000u
#define  DMA_DCR3_SMOD_SHIFT         12
#define  DMA_DCR3_SMOD(x)            (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_SMOD_SHIFT))&DMA_DCR3_SMOD_MASK)
//   Source address modulo
//     0b0000 ==> Buffer disabled
//     0b0001 ==> Circular buffer size is 16 bytes
//     0b0010 ==> Circular buffer size is 32 bytes
//     0b0011 ==> Circular buffer size is 64 bytes
//     0b0100 ==> Circular buffer size is 128 bytes
//     0b0101 ==> Circular buffer size is 256 bytes
//     0b0110 ==> Circular buffer size is 512 bytes
//     0b0111 ==> Circular buffer size is 1 KB
//     0b1000 ==> Circular buffer size is 2 KB
//     0b1001 ==> Circular buffer size is 4 KB
//     0b1010 ==> Circular buffer size is 8 KB
//     0b1011 ==> Circular buffer size is 16 KB
//     0b1100 ==> Circular buffer size is 32 KB
//     0b1101 ==> Circular buffer size is 64 KB
//     0b1110 ==> Circular buffer size is 128 KB
//     0b1111 ==> Circular buffer size is 256 KB

#define  DMA_DCR3_START_MASK         0x10000u
#define  DMA_DCR3_START_SHIFT        16
//   Start transfer
//     0b0 ==> DMA inactive
//     0b1 ==> The DMA begins the transfer in accordance to the values in the TCDn. START is cleared automatically after one module clock and always reads as logic 0.

#define  DMA_DCR3_DSIZE_MASK         0x60000u
#define  DMA_DCR3_DSIZE_SHIFT        17
#define  DMA_DCR3_DSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_DSIZE_SHIFT))&DMA_DCR3_DSIZE_MASK)
//   Destination size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR3_DINC_MASK          0x80000u
#define  DMA_DCR3_DINC_SHIFT         19
//   Destination increment
//     0b0 ==> No change to the DAR after a successful transfer.
//     0b1 ==> The DAR increments by 1, 2, 4 depending upon the size of the transfer.

#define  DMA_DCR3_SSIZE_MASK         0x300000u
#define  DMA_DCR3_SSIZE_SHIFT        20
#define  DMA_DCR3_SSIZE(x)           (((uint32_t)(((uint32_t)(x))<<DMA_DCR3_SSIZE_SHIFT))&DMA_DCR3_SSIZE_MASK)
//   Source size
//     0b00 ==> Longword
//     0b01 ==> Byte
//     0b10 ==> Word
//     0b11 ==> Reserved (generates a configuration error (DSRn[CE]) if incorrectly specified at time of channel activation)

#define  DMA_DCR3_SINC_MASK          0x400000u
#define  DMA_DCR3_SINC_SHIFT         22
//   Source increment
//     0b0 ==> No change to SAR after a successful transfer.
//     0b1 ==> The SAR increments by 1, 2, 4 as determined by the transfer size.

#define  DMA_DCR3_EADREQ_MASK        0x800000u
#define  DMA_DCR3_EADREQ_SHIFT       23
//   Enable asynchronous DMA requests
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  DMA_DCR3_AA_MASK            0x10000000u
#define  DMA_DCR3_AA_SHIFT           28
//   Auto-align
//     0b0 ==> Auto-align disabled
//     0b1 ==> If SSIZE indicates a transfer no smaller than DSIZE, source accesses are auto-aligned; otherwise, destination accesses are auto-aligned. Source alignment takes precedence over destination alignment. If auto-alignment is enabled, the appropriate address register increments, regardless of DINC or SINC.

#define  DMA_DCR3_CS_MASK            0x20000000u
#define  DMA_DCR3_CS_SHIFT           29
//   Cycle steal
//     0b0 ==> DMA continuously makes read/write transfers until the BCR decrements to 0.
//     0b1 ==> Forces a single read/write transfer per request.

#define  DMA_DCR3_ERQ_MASK           0x40000000u
#define  DMA_DCR3_ERQ_SHIFT          30
//   Enable peripheral request
//     0b0 ==> Peripheral request is ignored.
//     0b1 ==> Enables peripheral request to initiate transfer. A software-initiated request (setting the START bit) is always enabled.

#define  DMA_DCR3_EINT_MASK          0x80000000u
#define  DMA_DCR3_EINT_SHIFT         31
//   Enable interrupt on completion of transfer
//     0b0 ==> No interrupt is generated.
//     0b1 ==> Interrupt signal is enabled.

#define  DMAMUX0_CHCFG0_SOURCE_MASK  0x3Fu
#define  DMAMUX0_CHCFG0_SOURCE_SHIFT 0
#define  DMAMUX0_CHCFG0_SOURCE(x)    (((uint8_t)(((uint8_t)(x))<<DMAMUX0_CHCFG0_SOURCE_SHIFT))&DMAMUX0_CHCFG0_SOURCE_MASK)
//   DMA Channel Source (Slot)

#define  DMAMUX0_CHCFG0_TRIG_MASK    0x40u
#define  DMAMUX0_CHCFG0_TRIG_SHIFT   6
//   DMA Channel Trigger Enable
//     0b0 ==> Triggering is disabled. If triggering is disabled, and the ENBL bit is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)
//     0b1 ==> Triggering is enabled. If triggering is enabled, and the ENBL bit is set, the DMAMUX is in Periodic Trigger mode.

#define  DMAMUX0_CHCFG0_ENBL_MASK    0x80u
#define  DMAMUX0_CHCFG0_ENBL_SHIFT   7
//   DMA Channel Enable
//     0b0 ==> DMA channel is disabled. This mode is primarily used during configuration of the DMA Mux. The DMA has separate channel enables/disables, which should be used to disable or re-configure a DMA channel.
//     0b1 ==> DMA channel is enabled

#define  DMAMUX0_CHCFG1_SOURCE_MASK  0x3Fu
#define  DMAMUX0_CHCFG1_SOURCE_SHIFT 0
#define  DMAMUX0_CHCFG1_SOURCE(x)    (((uint8_t)(((uint8_t)(x))<<DMAMUX0_CHCFG1_SOURCE_SHIFT))&DMAMUX0_CHCFG1_SOURCE_MASK)
//   DMA Channel Source (Slot)

#define  DMAMUX0_CHCFG1_TRIG_MASK    0x40u
#define  DMAMUX0_CHCFG1_TRIG_SHIFT   6
//   DMA Channel Trigger Enable
//     0b0 ==> Triggering is disabled. If triggering is disabled, and the ENBL bit is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)
//     0b1 ==> Triggering is enabled. If triggering is enabled, and the ENBL bit is set, the DMAMUX is in Periodic Trigger mode.

#define  DMAMUX0_CHCFG1_ENBL_MASK    0x80u
#define  DMAMUX0_CHCFG1_ENBL_SHIFT   7
//   DMA Channel Enable
//     0b0 ==> DMA channel is disabled. This mode is primarily used during configuration of the DMA Mux. The DMA has separate channel enables/disables, which should be used to disable or re-configure a DMA channel.
//     0b1 ==> DMA channel is enabled

#define  DMAMUX0_CHCFG2_SOURCE_MASK  0x3Fu
#define  DMAMUX0_CHCFG2_SOURCE_SHIFT 0
#define  DMAMUX0_CHCFG2_SOURCE(x)    (((uint8_t)(((uint8_t)(x))<<DMAMUX0_CHCFG2_SOURCE_SHIFT))&DMAMUX0_CHCFG2_SOURCE_MASK)
//   DMA Channel Source (Slot)

#define  DMAMUX0_CHCFG2_TRIG_MASK    0x40u
#define  DMAMUX0_CHCFG2_TRIG_SHIFT   6
//   DMA Channel Trigger Enable
//     0b0 ==> Triggering is disabled. If triggering is disabled, and the ENBL bit is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)
//     0b1 ==> Triggering is enabled. If triggering is enabled, and the ENBL bit is set, the DMAMUX is in Periodic Trigger mode.

#define  DMAMUX0_CHCFG2_ENBL_MASK    0x80u
#define  DMAMUX0_CHCFG2_ENBL_SHIFT   7
//   DMA Channel Enable
//     0b0 ==> DMA channel is disabled. This mode is primarily used during configuration of the DMA Mux. The DMA has separate channel enables/disables, which should be used to disable or re-configure a DMA channel.
//     0b1 ==> DMA channel is enabled

#define  DMAMUX0_CHCFG3_SOURCE_MASK  0x3Fu
#define  DMAMUX0_CHCFG3_SOURCE_SHIFT 0
#define  DMAMUX0_CHCFG3_SOURCE(x)    (((uint8_t)(((uint8_t)(x))<<DMAMUX0_CHCFG3_SOURCE_SHIFT))&DMAMUX0_CHCFG3_SOURCE_MASK)
//   DMA Channel Source (Slot)

#define  DMAMUX0_CHCFG3_TRIG_MASK    0x40u
#define  DMAMUX0_CHCFG3_TRIG_SHIFT   6
//   DMA Channel Trigger Enable
//     0b0 ==> Triggering is disabled. If triggering is disabled, and the ENBL bit is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)
//     0b1 ==> Triggering is enabled. If triggering is enabled, and the ENBL bit is set, the DMAMUX is in Periodic Trigger mode.

#define  DMAMUX0_CHCFG3_ENBL_MASK    0x80u
#define  DMAMUX0_CHCFG3_ENBL_SHIFT   7
//   DMA Channel Enable
//     0b0 ==> DMA channel is disabled. This mode is primarily used during configuration of the DMA Mux. The DMA has separate channel enables/disables, which should be used to disable or re-configure a DMA channel.
//     0b1 ==> DMA channel is enabled

#define  FTFA_FSTAT_MGSTAT0_MASK     0x1u
#define  FTFA_FSTAT_MGSTAT0_SHIFT    0
//   Memory Controller Command Completion Status Flag

#define  FTFA_FSTAT_FPVIOL_MASK      0x10u
#define  FTFA_FSTAT_FPVIOL_SHIFT     4
//   Flash Protection Violation Flag
//     0b0 ==> No protection violation detected
//     0b1 ==> Protection violation detected

#define  FTFA_FSTAT_ACCERR_MASK      0x20u
#define  FTFA_FSTAT_ACCERR_SHIFT     5
//   Flash Access Error Flag
//     0b0 ==> No access error detected
//     0b1 ==> Access error detected

#define  FTFA_FSTAT_RDCOLERR_MASK    0x40u
#define  FTFA_FSTAT_RDCOLERR_SHIFT   6
//   Flash Read Collision Error Flag
//     0b0 ==> No collision error detected
//     0b1 ==> Collision error detected

#define  FTFA_FSTAT_CCIF_MASK        0x80u
#define  FTFA_FSTAT_CCIF_SHIFT       7
//   Command Complete Interrupt Flag
//     0b0 ==> Flash command in progress
//     0b1 ==> Flash command has completed

#define  FTFA_FCNFG_ERSSUSP_MASK     0x10u
#define  FTFA_FCNFG_ERSSUSP_SHIFT    4
//   Erase Suspend
//     0b0 ==> No suspend requested
//     0b1 ==> Suspend the current Erase Flash Sector command execution.

#define  FTFA_FCNFG_ERSAREQ_MASK     0x20u
#define  FTFA_FCNFG_ERSAREQ_SHIFT    5
//   Erase All Request
//     0b0 ==> No request or request complete
//     0b1 ==> Request to: run the Erase All Blocks command, verify the erased state, program the security byte in the Flash Configuration Field to the unsecure state, and release MCU security by setting the FSEC[SEC] field to the unsecure state.

#define  FTFA_FCNFG_RDCOLLIE_MASK    0x40u
#define  FTFA_FCNFG_RDCOLLIE_SHIFT   6
//   Read Collision Error Interrupt Enable
//     0b0 ==> Read collision error interrupt disabled
//     0b1 ==> Read collision error interrupt enabled. An interrupt request is generated whenever a flash memory read collision error is detected (see the description of FSTAT[RDCOLERR]).

#define  FTFA_FCNFG_CCIE_MASK        0x80u
#define  FTFA_FCNFG_CCIE_SHIFT       7
//   Command Complete Interrupt Enable
//     0b0 ==> Command complete interrupt disabled
//     0b1 ==> Command complete interrupt enabled. An interrupt request is generated whenever the FSTAT[CCIF] flag is set.

#define  FTFA_FSEC_SEC_MASK          0x3u
#define  FTFA_FSEC_SEC_SHIFT         0
#define  FTFA_FSEC_SEC(x)            (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_SEC_SHIFT))&FTFA_FSEC_SEC_MASK)
//   Flash Security
//     0b00 ==> MCU security status is secure
//     0b01 ==> MCU security status is secure
//     0b10 ==> MCU security status is unsecure (The standard shipping condition of the flash memory module is unsecure.)
//     0b11 ==> MCU security status is secure

#define  FTFA_FSEC_FSLACC_MASK       0xCu
#define  FTFA_FSEC_FSLACC_SHIFT      2
#define  FTFA_FSEC_FSLACC(x)         (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_FSLACC_SHIFT))&FTFA_FSEC_FSLACC_MASK)
//   Freescale Failure Analysis Access Code
//     0b00 ==> Freescale factory access granted
//     0b01 ==> Freescale factory access denied
//     0b10 ==> Freescale factory access denied
//     0b11 ==> Freescale factory access granted

#define  FTFA_FSEC_MEEN_MASK         0x30u
#define  FTFA_FSEC_MEEN_SHIFT        4
#define  FTFA_FSEC_MEEN(x)           (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_MEEN_SHIFT))&FTFA_FSEC_MEEN_MASK)
//   Mass Erase Enable Bits
//     0b00 ==> Mass erase is enabled
//     0b01 ==> Mass erase is enabled
//     0b10 ==> Mass erase is disabled
//     0b11 ==> Mass erase is enabled

#define  FTFA_FSEC_KEYEN_MASK        0xC0u
#define  FTFA_FSEC_KEYEN_SHIFT       6
#define  FTFA_FSEC_KEYEN(x)          (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_KEYEN_SHIFT))&FTFA_FSEC_KEYEN_MASK)
//   Backdoor Key Security Enable
//     0b00 ==> Backdoor key access disabled
//     0b01 ==> Backdoor key access disabled (preferred KEYEN state to disable backdoor key access)
//     0b10 ==> Backdoor key access enabled
//     0b11 ==> Backdoor key access disabled

#define  FTFA_FOPT_OPT_MASK          0xFFu
#define  FTFA_FOPT_OPT_SHIFT         0
#define  FTFA_FOPT_OPT(x)            (((uint8_t)(((uint8_t)(x))<<FTFA_FOPT_OPT_SHIFT))&FTFA_FOPT_OPT_MASK)
//   Nonvolatile Option

#define  FTFA_FCCOB3_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB3_CCOBn_SHIFT     0
#define  FTFA_FCCOB3_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB3_CCOBn_SHIFT))&FTFA_FCCOB3_CCOBn_MASK)

#define  FTFA_FCCOB2_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB2_CCOBn_SHIFT     0
#define  FTFA_FCCOB2_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB2_CCOBn_SHIFT))&FTFA_FCCOB2_CCOBn_MASK)

#define  FTFA_FCCOB1_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB1_CCOBn_SHIFT     0
#define  FTFA_FCCOB1_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB1_CCOBn_SHIFT))&FTFA_FCCOB1_CCOBn_MASK)

#define  FTFA_FCCOB0_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB0_CCOBn_SHIFT     0
#define  FTFA_FCCOB0_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB0_CCOBn_SHIFT))&FTFA_FCCOB0_CCOBn_MASK)

#define  FTFA_FCCOB7_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB7_CCOBn_SHIFT     0
#define  FTFA_FCCOB7_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB7_CCOBn_SHIFT))&FTFA_FCCOB7_CCOBn_MASK)

#define  FTFA_FCCOB6_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB6_CCOBn_SHIFT     0
#define  FTFA_FCCOB6_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB6_CCOBn_SHIFT))&FTFA_FCCOB6_CCOBn_MASK)

#define  FTFA_FCCOB5_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB5_CCOBn_SHIFT     0
#define  FTFA_FCCOB5_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB5_CCOBn_SHIFT))&FTFA_FCCOB5_CCOBn_MASK)

#define  FTFA_FCCOB4_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB4_CCOBn_SHIFT     0
#define  FTFA_FCCOB4_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB4_CCOBn_SHIFT))&FTFA_FCCOB4_CCOBn_MASK)

#define  FTFA_FCCOBB_CCOBn_MASK      0xFFu
#define  FTFA_FCCOBB_CCOBn_SHIFT     0
#define  FTFA_FCCOBB_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBB_CCOBn_SHIFT))&FTFA_FCCOBB_CCOBn_MASK)

#define  FTFA_FCCOBA_CCOBn_MASK      0xFFu
#define  FTFA_FCCOBA_CCOBn_SHIFT     0
#define  FTFA_FCCOBA_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBA_CCOBn_SHIFT))&FTFA_FCCOBA_CCOBn_MASK)

#define  FTFA_FCCOB9_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB9_CCOBn_SHIFT     0
#define  FTFA_FCCOB9_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB9_CCOBn_SHIFT))&FTFA_FCCOB9_CCOBn_MASK)

#define  FTFA_FCCOB8_CCOBn_MASK      0xFFu
#define  FTFA_FCCOB8_CCOBn_SHIFT     0
#define  FTFA_FCCOB8_CCOBn(x)        (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB8_CCOBn_SHIFT))&FTFA_FCCOB8_CCOBn_MASK)

#define  FTFA_FPROT3_PROT_MASK       0xFFu
#define  FTFA_FPROT3_PROT_SHIFT      0
#define  FTFA_FPROT3_PROT(x)         (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT3_PROT_SHIFT))&FTFA_FPROT3_PROT_MASK)
//   Program Flash Region Protect
//     0b0 ==> Program flash region is protected.
//     0b1 ==> Program flash region is not protected

#define  FTFA_FPROT2_PROT_MASK       0xFFu
#define  FTFA_FPROT2_PROT_SHIFT      0
#define  FTFA_FPROT2_PROT(x)         (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT2_PROT_SHIFT))&FTFA_FPROT2_PROT_MASK)
//   Program Flash Region Protect
//     0b0 ==> Program flash region is protected.
//     0b1 ==> Program flash region is not protected

#define  FTFA_FPROT1_PROT_MASK       0xFFu
#define  FTFA_FPROT1_PROT_SHIFT      0
#define  FTFA_FPROT1_PROT(x)         (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT1_PROT_SHIFT))&FTFA_FPROT1_PROT_MASK)
//   Program Flash Region Protect
//     0b0 ==> Program flash region is protected.
//     0b1 ==> Program flash region is not protected

#define  FTFA_FPROT0_PROT_MASK       0xFFu
#define  FTFA_FPROT0_PROT_SHIFT      0
#define  FTFA_FPROT0_PROT(x)         (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT0_PROT_SHIFT))&FTFA_FPROT0_PROT_MASK)
//   Program Flash Region Protect
//     0b0 ==> Program flash region is protected.
//     0b1 ==> Program flash region is not protected

#define  FTM0_SC_PS_MASK             0x7u
#define  FTM0_SC_PS_SHIFT            0
#define  FTM0_SC_PS(x)               (((uint32_t)(((uint32_t)(x))<<FTM0_SC_PS_SHIFT))&FTM0_SC_PS_MASK)
//   Prescale Factor Selection
//     0b000 ==> Divide by 1
//     0b001 ==> Divide by 2
//     0b010 ==> Divide by 4
//     0b011 ==> Divide by 8
//     0b100 ==> Divide by 16
//     0b101 ==> Divide by 32
//     0b110 ==> Divide by 64
//     0b111 ==> Divide by 128

#define  FTM0_SC_CMOD_MASK           0x18u
#define  FTM0_SC_CMOD_SHIFT          3
#define  FTM0_SC_CMOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_SC_CMOD_SHIFT))&FTM0_SC_CMOD_MASK)
//   Clock Mode Selection
//     0b00 ==> FTM counter is disabled
//     0b01 ==> FTM counter increments on every FTM counter clock
//     0b10 ==> FTM counter increments on rising edge of FTM_EXTCLK synchronized to the FTM counter clock
//     0b11 ==> Reserved

#define  FTM0_SC_CPWMS_MASK          0x20u
#define  FTM0_SC_CPWMS_SHIFT         5
//   Center-aligned PWM Select
//     0b0 ==> FTM counter operates in up counting mode.
//     0b1 ==> FTM counter operates in up-down counting mode.

#define  FTM0_SC_TOIE_MASK           0x40u
#define  FTM0_SC_TOIE_SHIFT          6
//   Timer Overflow Interrupt Enable
//     0b0 ==> Disable TOF interrupts. Use software polling or DMA request.
//     0b1 ==> Enable TOF interrupts. An interrupt is generated when TOF equals one.

#define  FTM0_SC_TOF_MASK            0x80u
#define  FTM0_SC_TOF_SHIFT           7
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM0_SC_DMA_MASK            0x100u
#define  FTM0_SC_DMA_SHIFT           8
//   DMA Enable
//     0b0 ==> Disables DMA transfers.
//     0b1 ==> Enables DMA transfers.

#define  FTM0_CNT_COUNT_MASK         0xFFFFu
#define  FTM0_CNT_COUNT_SHIFT        0
#define  FTM0_CNT_COUNT(x)           (((uint32_t)(((uint32_t)(x))<<FTM0_CNT_COUNT_SHIFT))&FTM0_CNT_COUNT_MASK)
//   Counter value

#define  FTM0_MOD_MOD_MASK           0xFFFFu
#define  FTM0_MOD_MOD_SHIFT          0
#define  FTM0_MOD_MOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_MOD_MOD_SHIFT))&FTM0_MOD_MOD_MASK)
//   Modulo value

#define  FTM0_C0SC_DMA_MASK          0x1u
#define  FTM0_C0SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C0SC_ELSA_MASK         0x4u
#define  FTM0_C0SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C0SC_ELSB_MASK         0x8u
#define  FTM0_C0SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C0SC_MSA_MASK          0x10u
#define  FTM0_C0SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C0SC_MSB_MASK          0x20u
#define  FTM0_C0SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C0SC_CHIE_MASK         0x40u
#define  FTM0_C0SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C0SC_CHF_MASK          0x80u
#define  FTM0_C0SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C0V_VAL_MASK           0xFFFFu
#define  FTM0_C0V_VAL_SHIFT          0
#define  FTM0_C0V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C0V_VAL_SHIFT))&FTM0_C0V_VAL_MASK)
//   Channel Value

#define  FTM0_C1SC_DMA_MASK          0x1u
#define  FTM0_C1SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C1SC_ELSA_MASK         0x4u
#define  FTM0_C1SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C1SC_ELSB_MASK         0x8u
#define  FTM0_C1SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C1SC_MSA_MASK          0x10u
#define  FTM0_C1SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C1SC_MSB_MASK          0x20u
#define  FTM0_C1SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C1SC_CHIE_MASK         0x40u
#define  FTM0_C1SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C1SC_CHF_MASK          0x80u
#define  FTM0_C1SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C1V_VAL_MASK           0xFFFFu
#define  FTM0_C1V_VAL_SHIFT          0
#define  FTM0_C1V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C1V_VAL_SHIFT))&FTM0_C1V_VAL_MASK)
//   Channel Value

#define  FTM0_C2SC_DMA_MASK          0x1u
#define  FTM0_C2SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C2SC_ELSA_MASK         0x4u
#define  FTM0_C2SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C2SC_ELSB_MASK         0x8u
#define  FTM0_C2SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C2SC_MSA_MASK          0x10u
#define  FTM0_C2SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C2SC_MSB_MASK          0x20u
#define  FTM0_C2SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C2SC_CHIE_MASK         0x40u
#define  FTM0_C2SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C2SC_CHF_MASK          0x80u
#define  FTM0_C2SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C2V_VAL_MASK           0xFFFFu
#define  FTM0_C2V_VAL_SHIFT          0
#define  FTM0_C2V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C2V_VAL_SHIFT))&FTM0_C2V_VAL_MASK)
//   Channel Value

#define  FTM0_C3SC_DMA_MASK          0x1u
#define  FTM0_C3SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C3SC_ELSA_MASK         0x4u
#define  FTM0_C3SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C3SC_ELSB_MASK         0x8u
#define  FTM0_C3SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C3SC_MSA_MASK          0x10u
#define  FTM0_C3SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C3SC_MSB_MASK          0x20u
#define  FTM0_C3SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C3SC_CHIE_MASK         0x40u
#define  FTM0_C3SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C3SC_CHF_MASK          0x80u
#define  FTM0_C3SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C3V_VAL_MASK           0xFFFFu
#define  FTM0_C3V_VAL_SHIFT          0
#define  FTM0_C3V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C3V_VAL_SHIFT))&FTM0_C3V_VAL_MASK)
//   Channel Value

#define  FTM0_C4SC_DMA_MASK          0x1u
#define  FTM0_C4SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C4SC_ELSA_MASK         0x4u
#define  FTM0_C4SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C4SC_ELSB_MASK         0x8u
#define  FTM0_C4SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C4SC_MSA_MASK          0x10u
#define  FTM0_C4SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C4SC_MSB_MASK          0x20u
#define  FTM0_C4SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C4SC_CHIE_MASK         0x40u
#define  FTM0_C4SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C4SC_CHF_MASK          0x80u
#define  FTM0_C4SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C4V_VAL_MASK           0xFFFFu
#define  FTM0_C4V_VAL_SHIFT          0
#define  FTM0_C4V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C4V_VAL_SHIFT))&FTM0_C4V_VAL_MASK)
//   Channel Value

#define  FTM0_C5SC_DMA_MASK          0x1u
#define  FTM0_C5SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM0_C5SC_ELSA_MASK         0x4u
#define  FTM0_C5SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM0_C5SC_ELSB_MASK         0x8u
#define  FTM0_C5SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM0_C5SC_MSA_MASK          0x10u
#define  FTM0_C5SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM0_C5SC_MSB_MASK          0x20u
#define  FTM0_C5SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM0_C5SC_CHIE_MASK         0x40u
#define  FTM0_C5SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM0_C5SC_CHF_MASK          0x80u
#define  FTM0_C5SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_C5V_VAL_MASK           0xFFFFu
#define  FTM0_C5V_VAL_SHIFT          0
#define  FTM0_C5V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM0_C5V_VAL_SHIFT))&FTM0_C5V_VAL_MASK)
//   Channel Value

#define  FTM0_STATUS_CH0F_MASK       0x1u
#define  FTM0_STATUS_CH0F_SHIFT      0
//   Channel 0 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_CH1F_MASK       0x2u
#define  FTM0_STATUS_CH1F_SHIFT      1
//   Channel 1 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_CH2F_MASK       0x4u
#define  FTM0_STATUS_CH2F_SHIFT      2
//   Channel 2 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_CH3F_MASK       0x8u
#define  FTM0_STATUS_CH3F_SHIFT      3
//   Channel 3 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_CH4F_MASK       0x10u
#define  FTM0_STATUS_CH4F_SHIFT      4
//   Channel 4 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_CH5F_MASK       0x20u
#define  FTM0_STATUS_CH5F_SHIFT      5
//   Channel 5 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM0_STATUS_TOF_MASK        0x100u
#define  FTM0_STATUS_TOF_SHIFT       8
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM0_CONF_DOZEEN_MASK       0x20u
#define  FTM0_CONF_DOZEEN_SHIFT      5
//   Doze Enable
//     0b0 ==> Internal FTM counter continues in Doze mode.
//     0b1 ==> Internal FTM counter is paused and does not increment during Doze mode. Trigger inputs and input capture events are also ignored.

#define  FTM0_CONF_DBGMODE_MASK      0xC0u
#define  FTM0_CONF_DBGMODE_SHIFT     6
#define  FTM0_CONF_DBGMODE(x)        (((uint32_t)(((uint32_t)(x))<<FTM0_CONF_DBGMODE_SHIFT))&FTM0_CONF_DBGMODE_MASK)
//   Debug Mode
//     0b00 ==> FTM counter is paused and does not increment during debug mode. Trigger inputs and input capture events are also ignored.
//     0b11 ==> FTM counter continues in debug mode.

#define  FTM0_CONF_GTBEEN_MASK       0x200u
#define  FTM0_CONF_GTBEEN_SHIFT      9
//   Global time base enable
//     0b0 ==> All channels use the internally generated FTM counter as their timebase
//     0b1 ==> All channels use an externally generated global timebase as their timebase

#define  FTM0_CONF_CSOT_MASK         0x10000u
#define  FTM0_CONF_CSOT_SHIFT        16
//   Counter Start on Trigger
//     0b0 ==> FTM counter starts to increment immediately, once it is enabled.
//     0b1 ==> FTM counter only starts to increment when it a rising edge on the selected input trigger is detected, after it has been enabled or after it has stopped due to overflow.

#define  FTM0_CONF_CSOO_MASK         0x20000u
#define  FTM0_CONF_CSOO_SHIFT        17
//   Counter Stop On Overflow
//     0b0 ==> FTM counter continues incrementing or decrementing after overflow
//     0b1 ==> FTM counter stops incrementing or decrementing after overflow.

#define  FTM0_CONF_CROT_MASK         0x40000u
#define  FTM0_CONF_CROT_SHIFT        18
//   Counter Reload On Trigger
//     0b0 ==> Counter is not reloaded due to a rising edge on the selected input trigger
//     0b1 ==> Counter is reloaded when a rising edge is detected on the selected input trigger

#define  FTM0_CONF_TRGSEL_MASK       0xF000000u
#define  FTM0_CONF_TRGSEL_SHIFT      24
#define  FTM0_CONF_TRGSEL(x)         (((uint32_t)(((uint32_t)(x))<<FTM0_CONF_TRGSEL_SHIFT))&FTM0_CONF_TRGSEL_MASK)
//   Trigger Select

#define  FTM1_SC_PS_MASK             0x7u
#define  FTM1_SC_PS_SHIFT            0
#define  FTM1_SC_PS(x)               (((uint32_t)(((uint32_t)(x))<<FTM1_SC_PS_SHIFT))&FTM1_SC_PS_MASK)
//   Prescale Factor Selection
//     0b000 ==> Divide by 1
//     0b001 ==> Divide by 2
//     0b010 ==> Divide by 4
//     0b011 ==> Divide by 8
//     0b100 ==> Divide by 16
//     0b101 ==> Divide by 32
//     0b110 ==> Divide by 64
//     0b111 ==> Divide by 128

#define  FTM1_SC_CMOD_MASK           0x18u
#define  FTM1_SC_CMOD_SHIFT          3
#define  FTM1_SC_CMOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_SC_CMOD_SHIFT))&FTM1_SC_CMOD_MASK)
//   Clock Mode Selection
//     0b00 ==> FTM counter is disabled
//     0b01 ==> FTM counter increments on every FTM counter clock
//     0b10 ==> FTM counter increments on rising edge of FTM_EXTCLK synchronized to the FTM counter clock
//     0b11 ==> Reserved

#define  FTM1_SC_CPWMS_MASK          0x20u
#define  FTM1_SC_CPWMS_SHIFT         5
//   Center-aligned PWM Select
//     0b0 ==> FTM counter operates in up counting mode.
//     0b1 ==> FTM counter operates in up-down counting mode.

#define  FTM1_SC_TOIE_MASK           0x40u
#define  FTM1_SC_TOIE_SHIFT          6
//   Timer Overflow Interrupt Enable
//     0b0 ==> Disable TOF interrupts. Use software polling or DMA request.
//     0b1 ==> Enable TOF interrupts. An interrupt is generated when TOF equals one.

#define  FTM1_SC_TOF_MASK            0x80u
#define  FTM1_SC_TOF_SHIFT           7
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM1_SC_DMA_MASK            0x100u
#define  FTM1_SC_DMA_SHIFT           8
//   DMA Enable
//     0b0 ==> Disables DMA transfers.
//     0b1 ==> Enables DMA transfers.

#define  FTM1_CNT_COUNT_MASK         0xFFFFu
#define  FTM1_CNT_COUNT_SHIFT        0
#define  FTM1_CNT_COUNT(x)           (((uint32_t)(((uint32_t)(x))<<FTM1_CNT_COUNT_SHIFT))&FTM1_CNT_COUNT_MASK)
//   Counter value

#define  FTM1_MOD_MOD_MASK           0xFFFFu
#define  FTM1_MOD_MOD_SHIFT          0
#define  FTM1_MOD_MOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_MOD_MOD_SHIFT))&FTM1_MOD_MOD_MASK)
//   Modulo value

#define  FTM1_C0SC_DMA_MASK          0x1u
#define  FTM1_C0SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C0SC_ELSA_MASK         0x4u
#define  FTM1_C0SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C0SC_ELSB_MASK         0x8u
#define  FTM1_C0SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C0SC_MSA_MASK          0x10u
#define  FTM1_C0SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C0SC_MSB_MASK          0x20u
#define  FTM1_C0SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C0SC_CHIE_MASK         0x40u
#define  FTM1_C0SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C0SC_CHF_MASK          0x80u
#define  FTM1_C0SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C0V_VAL_MASK           0xFFFFu
#define  FTM1_C0V_VAL_SHIFT          0
#define  FTM1_C0V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C0V_VAL_SHIFT))&FTM1_C0V_VAL_MASK)
//   Channel Value

#define  FTM1_C1SC_DMA_MASK          0x1u
#define  FTM1_C1SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C1SC_ELSA_MASK         0x4u
#define  FTM1_C1SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C1SC_ELSB_MASK         0x8u
#define  FTM1_C1SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C1SC_MSA_MASK          0x10u
#define  FTM1_C1SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C1SC_MSB_MASK          0x20u
#define  FTM1_C1SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C1SC_CHIE_MASK         0x40u
#define  FTM1_C1SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C1SC_CHF_MASK          0x80u
#define  FTM1_C1SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C1V_VAL_MASK           0xFFFFu
#define  FTM1_C1V_VAL_SHIFT          0
#define  FTM1_C1V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C1V_VAL_SHIFT))&FTM1_C1V_VAL_MASK)
//   Channel Value

#define  FTM1_C2SC_DMA_MASK          0x1u
#define  FTM1_C2SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C2SC_ELSA_MASK         0x4u
#define  FTM1_C2SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C2SC_ELSB_MASK         0x8u
#define  FTM1_C2SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C2SC_MSA_MASK          0x10u
#define  FTM1_C2SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C2SC_MSB_MASK          0x20u
#define  FTM1_C2SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C2SC_CHIE_MASK         0x40u
#define  FTM1_C2SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C2SC_CHF_MASK          0x80u
#define  FTM1_C2SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C2V_VAL_MASK           0xFFFFu
#define  FTM1_C2V_VAL_SHIFT          0
#define  FTM1_C2V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C2V_VAL_SHIFT))&FTM1_C2V_VAL_MASK)
//   Channel Value

#define  FTM1_C3SC_DMA_MASK          0x1u
#define  FTM1_C3SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C3SC_ELSA_MASK         0x4u
#define  FTM1_C3SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C3SC_ELSB_MASK         0x8u
#define  FTM1_C3SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C3SC_MSA_MASK          0x10u
#define  FTM1_C3SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C3SC_MSB_MASK          0x20u
#define  FTM1_C3SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C3SC_CHIE_MASK         0x40u
#define  FTM1_C3SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C3SC_CHF_MASK          0x80u
#define  FTM1_C3SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C3V_VAL_MASK           0xFFFFu
#define  FTM1_C3V_VAL_SHIFT          0
#define  FTM1_C3V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C3V_VAL_SHIFT))&FTM1_C3V_VAL_MASK)
//   Channel Value

#define  FTM1_C4SC_DMA_MASK          0x1u
#define  FTM1_C4SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C4SC_ELSA_MASK         0x4u
#define  FTM1_C4SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C4SC_ELSB_MASK         0x8u
#define  FTM1_C4SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C4SC_MSA_MASK          0x10u
#define  FTM1_C4SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C4SC_MSB_MASK          0x20u
#define  FTM1_C4SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C4SC_CHIE_MASK         0x40u
#define  FTM1_C4SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C4SC_CHF_MASK          0x80u
#define  FTM1_C4SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C4V_VAL_MASK           0xFFFFu
#define  FTM1_C4V_VAL_SHIFT          0
#define  FTM1_C4V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C4V_VAL_SHIFT))&FTM1_C4V_VAL_MASK)
//   Channel Value

#define  FTM1_C5SC_DMA_MASK          0x1u
#define  FTM1_C5SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM1_C5SC_ELSA_MASK         0x4u
#define  FTM1_C5SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM1_C5SC_ELSB_MASK         0x8u
#define  FTM1_C5SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM1_C5SC_MSA_MASK          0x10u
#define  FTM1_C5SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM1_C5SC_MSB_MASK          0x20u
#define  FTM1_C5SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM1_C5SC_CHIE_MASK         0x40u
#define  FTM1_C5SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM1_C5SC_CHF_MASK          0x80u
#define  FTM1_C5SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_C5V_VAL_MASK           0xFFFFu
#define  FTM1_C5V_VAL_SHIFT          0
#define  FTM1_C5V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM1_C5V_VAL_SHIFT))&FTM1_C5V_VAL_MASK)
//   Channel Value

#define  FTM1_STATUS_CH0F_MASK       0x1u
#define  FTM1_STATUS_CH0F_SHIFT      0
//   Channel 0 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_CH1F_MASK       0x2u
#define  FTM1_STATUS_CH1F_SHIFT      1
//   Channel 1 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_CH2F_MASK       0x4u
#define  FTM1_STATUS_CH2F_SHIFT      2
//   Channel 2 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_CH3F_MASK       0x8u
#define  FTM1_STATUS_CH3F_SHIFT      3
//   Channel 3 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_CH4F_MASK       0x10u
#define  FTM1_STATUS_CH4F_SHIFT      4
//   Channel 4 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_CH5F_MASK       0x20u
#define  FTM1_STATUS_CH5F_SHIFT      5
//   Channel 5 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM1_STATUS_TOF_MASK        0x100u
#define  FTM1_STATUS_TOF_SHIFT       8
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM1_CONF_DOZEEN_MASK       0x20u
#define  FTM1_CONF_DOZEEN_SHIFT      5
//   Doze Enable
//     0b0 ==> Internal FTM counter continues in Doze mode.
//     0b1 ==> Internal FTM counter is paused and does not increment during Doze mode. Trigger inputs and input capture events are also ignored.

#define  FTM1_CONF_DBGMODE_MASK      0xC0u
#define  FTM1_CONF_DBGMODE_SHIFT     6
#define  FTM1_CONF_DBGMODE(x)        (((uint32_t)(((uint32_t)(x))<<FTM1_CONF_DBGMODE_SHIFT))&FTM1_CONF_DBGMODE_MASK)
//   Debug Mode
//     0b00 ==> FTM counter is paused and does not increment during debug mode. Trigger inputs and input capture events are also ignored.
//     0b11 ==> FTM counter continues in debug mode.

#define  FTM1_CONF_GTBEEN_MASK       0x200u
#define  FTM1_CONF_GTBEEN_SHIFT      9
//   Global time base enable
//     0b0 ==> All channels use the internally generated FTM counter as their timebase
//     0b1 ==> All channels use an externally generated global timebase as their timebase

#define  FTM1_CONF_CSOT_MASK         0x10000u
#define  FTM1_CONF_CSOT_SHIFT        16
//   Counter Start on Trigger
//     0b0 ==> FTM counter starts to increment immediately, once it is enabled.
//     0b1 ==> FTM counter only starts to increment when it a rising edge on the selected input trigger is detected, after it has been enabled or after it has stopped due to overflow.

#define  FTM1_CONF_CSOO_MASK         0x20000u
#define  FTM1_CONF_CSOO_SHIFT        17
//   Counter Stop On Overflow
//     0b0 ==> FTM counter continues incrementing or decrementing after overflow
//     0b1 ==> FTM counter stops incrementing or decrementing after overflow.

#define  FTM1_CONF_CROT_MASK         0x40000u
#define  FTM1_CONF_CROT_SHIFT        18
//   Counter Reload On Trigger
//     0b0 ==> Counter is not reloaded due to a rising edge on the selected input trigger
//     0b1 ==> Counter is reloaded when a rising edge is detected on the selected input trigger

#define  FTM1_CONF_TRGSEL_MASK       0xF000000u
#define  FTM1_CONF_TRGSEL_SHIFT      24
#define  FTM1_CONF_TRGSEL(x)         (((uint32_t)(((uint32_t)(x))<<FTM1_CONF_TRGSEL_SHIFT))&FTM1_CONF_TRGSEL_MASK)
//   Trigger Select

#define  FTM2_SC_PS_MASK             0x7u
#define  FTM2_SC_PS_SHIFT            0
#define  FTM2_SC_PS(x)               (((uint32_t)(((uint32_t)(x))<<FTM2_SC_PS_SHIFT))&FTM2_SC_PS_MASK)
//   Prescale Factor Selection
//     0b000 ==> Divide by 1
//     0b001 ==> Divide by 2
//     0b010 ==> Divide by 4
//     0b011 ==> Divide by 8
//     0b100 ==> Divide by 16
//     0b101 ==> Divide by 32
//     0b110 ==> Divide by 64
//     0b111 ==> Divide by 128

#define  FTM2_SC_CMOD_MASK           0x18u
#define  FTM2_SC_CMOD_SHIFT          3
#define  FTM2_SC_CMOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_SC_CMOD_SHIFT))&FTM2_SC_CMOD_MASK)
//   Clock Mode Selection
//     0b00 ==> FTM counter is disabled
//     0b01 ==> FTM counter increments on every FTM counter clock
//     0b10 ==> FTM counter increments on rising edge of FTM_EXTCLK synchronized to the FTM counter clock
//     0b11 ==> Reserved

#define  FTM2_SC_CPWMS_MASK          0x20u
#define  FTM2_SC_CPWMS_SHIFT         5
//   Center-aligned PWM Select
//     0b0 ==> FTM counter operates in up counting mode.
//     0b1 ==> FTM counter operates in up-down counting mode.

#define  FTM2_SC_TOIE_MASK           0x40u
#define  FTM2_SC_TOIE_SHIFT          6
//   Timer Overflow Interrupt Enable
//     0b0 ==> Disable TOF interrupts. Use software polling or DMA request.
//     0b1 ==> Enable TOF interrupts. An interrupt is generated when TOF equals one.

#define  FTM2_SC_TOF_MASK            0x80u
#define  FTM2_SC_TOF_SHIFT           7
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM2_SC_DMA_MASK            0x100u
#define  FTM2_SC_DMA_SHIFT           8
//   DMA Enable
//     0b0 ==> Disables DMA transfers.
//     0b1 ==> Enables DMA transfers.

#define  FTM2_CNT_COUNT_MASK         0xFFFFu
#define  FTM2_CNT_COUNT_SHIFT        0
#define  FTM2_CNT_COUNT(x)           (((uint32_t)(((uint32_t)(x))<<FTM2_CNT_COUNT_SHIFT))&FTM2_CNT_COUNT_MASK)
//   Counter value

#define  FTM2_MOD_MOD_MASK           0xFFFFu
#define  FTM2_MOD_MOD_SHIFT          0
#define  FTM2_MOD_MOD(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_MOD_MOD_SHIFT))&FTM2_MOD_MOD_MASK)
//   Modulo value

#define  FTM2_C0SC_DMA_MASK          0x1u
#define  FTM2_C0SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C0SC_ELSA_MASK         0x4u
#define  FTM2_C0SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C0SC_ELSB_MASK         0x8u
#define  FTM2_C0SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C0SC_MSA_MASK          0x10u
#define  FTM2_C0SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C0SC_MSB_MASK          0x20u
#define  FTM2_C0SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C0SC_CHIE_MASK         0x40u
#define  FTM2_C0SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C0SC_CHF_MASK          0x80u
#define  FTM2_C0SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C0V_VAL_MASK           0xFFFFu
#define  FTM2_C0V_VAL_SHIFT          0
#define  FTM2_C0V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C0V_VAL_SHIFT))&FTM2_C0V_VAL_MASK)
//   Channel Value

#define  FTM2_C1SC_DMA_MASK          0x1u
#define  FTM2_C1SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C1SC_ELSA_MASK         0x4u
#define  FTM2_C1SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C1SC_ELSB_MASK         0x8u
#define  FTM2_C1SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C1SC_MSA_MASK          0x10u
#define  FTM2_C1SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C1SC_MSB_MASK          0x20u
#define  FTM2_C1SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C1SC_CHIE_MASK         0x40u
#define  FTM2_C1SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C1SC_CHF_MASK          0x80u
#define  FTM2_C1SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C1V_VAL_MASK           0xFFFFu
#define  FTM2_C1V_VAL_SHIFT          0
#define  FTM2_C1V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C1V_VAL_SHIFT))&FTM2_C1V_VAL_MASK)
//   Channel Value

#define  FTM2_C2SC_DMA_MASK          0x1u
#define  FTM2_C2SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C2SC_ELSA_MASK         0x4u
#define  FTM2_C2SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C2SC_ELSB_MASK         0x8u
#define  FTM2_C2SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C2SC_MSA_MASK          0x10u
#define  FTM2_C2SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C2SC_MSB_MASK          0x20u
#define  FTM2_C2SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C2SC_CHIE_MASK         0x40u
#define  FTM2_C2SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C2SC_CHF_MASK          0x80u
#define  FTM2_C2SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C2V_VAL_MASK           0xFFFFu
#define  FTM2_C2V_VAL_SHIFT          0
#define  FTM2_C2V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C2V_VAL_SHIFT))&FTM2_C2V_VAL_MASK)
//   Channel Value

#define  FTM2_C3SC_DMA_MASK          0x1u
#define  FTM2_C3SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C3SC_ELSA_MASK         0x4u
#define  FTM2_C3SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C3SC_ELSB_MASK         0x8u
#define  FTM2_C3SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C3SC_MSA_MASK          0x10u
#define  FTM2_C3SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C3SC_MSB_MASK          0x20u
#define  FTM2_C3SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C3SC_CHIE_MASK         0x40u
#define  FTM2_C3SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C3SC_CHF_MASK          0x80u
#define  FTM2_C3SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C3V_VAL_MASK           0xFFFFu
#define  FTM2_C3V_VAL_SHIFT          0
#define  FTM2_C3V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C3V_VAL_SHIFT))&FTM2_C3V_VAL_MASK)
//   Channel Value

#define  FTM2_C4SC_DMA_MASK          0x1u
#define  FTM2_C4SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C4SC_ELSA_MASK         0x4u
#define  FTM2_C4SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C4SC_ELSB_MASK         0x8u
#define  FTM2_C4SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C4SC_MSA_MASK          0x10u
#define  FTM2_C4SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C4SC_MSB_MASK          0x20u
#define  FTM2_C4SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C4SC_CHIE_MASK         0x40u
#define  FTM2_C4SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C4SC_CHF_MASK          0x80u
#define  FTM2_C4SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C4V_VAL_MASK           0xFFFFu
#define  FTM2_C4V_VAL_SHIFT          0
#define  FTM2_C4V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C4V_VAL_SHIFT))&FTM2_C4V_VAL_MASK)
//   Channel Value

#define  FTM2_C5SC_DMA_MASK          0x1u
#define  FTM2_C5SC_DMA_SHIFT         0
//   DMA Enable
//     0b0 ==> Disable DMA transfers.
//     0b1 ==> Enable DMA transfers.

#define  FTM2_C5SC_ELSA_MASK         0x4u
#define  FTM2_C5SC_ELSA_SHIFT        2
//   Edge or Level Select

#define  FTM2_C5SC_ELSB_MASK         0x8u
#define  FTM2_C5SC_ELSB_SHIFT        3
//   Edge or Level Select

#define  FTM2_C5SC_MSA_MASK          0x10u
#define  FTM2_C5SC_MSA_SHIFT         4
//   Channel Mode Select

#define  FTM2_C5SC_MSB_MASK          0x20u
#define  FTM2_C5SC_MSB_SHIFT         5
//   Channel Mode Select

#define  FTM2_C5SC_CHIE_MASK         0x40u
#define  FTM2_C5SC_CHIE_SHIFT        6
//   Channel Interrupt Enable
//     0b0 ==> Disable channel interrupts.
//     0b1 ==> Enable channel interrupts.

#define  FTM2_C5SC_CHF_MASK          0x80u
#define  FTM2_C5SC_CHF_SHIFT         7
//   Channel Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_C5V_VAL_MASK           0xFFFFu
#define  FTM2_C5V_VAL_SHIFT          0
#define  FTM2_C5V_VAL(x)             (((uint32_t)(((uint32_t)(x))<<FTM2_C5V_VAL_SHIFT))&FTM2_C5V_VAL_MASK)
//   Channel Value

#define  FTM2_STATUS_CH0F_MASK       0x1u
#define  FTM2_STATUS_CH0F_SHIFT      0
//   Channel 0 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_CH1F_MASK       0x2u
#define  FTM2_STATUS_CH1F_SHIFT      1
//   Channel 1 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_CH2F_MASK       0x4u
#define  FTM2_STATUS_CH2F_SHIFT      2
//   Channel 2 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_CH3F_MASK       0x8u
#define  FTM2_STATUS_CH3F_SHIFT      3
//   Channel 3 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_CH4F_MASK       0x10u
#define  FTM2_STATUS_CH4F_SHIFT      4
//   Channel 4 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_CH5F_MASK       0x20u
#define  FTM2_STATUS_CH5F_SHIFT      5
//   Channel 5 Flag
//     0b0 ==> No channel event has occurred.
//     0b1 ==> A channel event has occurred.

#define  FTM2_STATUS_TOF_MASK        0x100u
#define  FTM2_STATUS_TOF_SHIFT       8
//   Timer Overflow Flag
//     0b0 ==> FTM counter has not overflowed.
//     0b1 ==> FTM counter has overflowed.

#define  FTM2_CONF_DOZEEN_MASK       0x20u
#define  FTM2_CONF_DOZEEN_SHIFT      5
//   Doze Enable
//     0b0 ==> Internal FTM counter continues in Doze mode.
//     0b1 ==> Internal FTM counter is paused and does not increment during Doze mode. Trigger inputs and input capture events are also ignored.

#define  FTM2_CONF_DBGMODE_MASK      0xC0u
#define  FTM2_CONF_DBGMODE_SHIFT     6
#define  FTM2_CONF_DBGMODE(x)        (((uint32_t)(((uint32_t)(x))<<FTM2_CONF_DBGMODE_SHIFT))&FTM2_CONF_DBGMODE_MASK)
//   Debug Mode
//     0b00 ==> FTM counter is paused and does not increment during debug mode. Trigger inputs and input capture events are also ignored.
//     0b11 ==> FTM counter continues in debug mode.

#define  FTM2_CONF_GTBEEN_MASK       0x200u
#define  FTM2_CONF_GTBEEN_SHIFT      9
//   Global time base enable
//     0b0 ==> All channels use the internally generated FTM counter as their timebase
//     0b1 ==> All channels use an externally generated global timebase as their timebase

#define  FTM2_CONF_CSOT_MASK         0x10000u
#define  FTM2_CONF_CSOT_SHIFT        16
//   Counter Start on Trigger
//     0b0 ==> FTM counter starts to increment immediately, once it is enabled.
//     0b1 ==> FTM counter only starts to increment when it a rising edge on the selected input trigger is detected, after it has been enabled or after it has stopped due to overflow.

#define  FTM2_CONF_CSOO_MASK         0x20000u
#define  FTM2_CONF_CSOO_SHIFT        17
//   Counter Stop On Overflow
//     0b0 ==> FTM counter continues incrementing or decrementing after overflow
//     0b1 ==> FTM counter stops incrementing or decrementing after overflow.

#define  FTM2_CONF_CROT_MASK         0x40000u
#define  FTM2_CONF_CROT_SHIFT        18
//   Counter Reload On Trigger
//     0b0 ==> Counter is not reloaded due to a rising edge on the selected input trigger
//     0b1 ==> Counter is reloaded when a rising edge is detected on the selected input trigger

#define  FTM2_CONF_TRGSEL_MASK       0xF000000u
#define  FTM2_CONF_TRGSEL_SHIFT      24
#define  FTM2_CONF_TRGSEL(x)         (((uint32_t)(((uint32_t)(x))<<FTM2_CONF_TRGSEL_SHIFT))&FTM2_CONF_TRGSEL_MASK)
//   Trigger Select

#define  GPIOA_PDOR_PDO_MASK         0xFFFFFFFFu
#define  GPIOA_PDOR_PDO_SHIFT        0
#define  GPIOA_PDOR_PDO(x)           (((uint32_t)(((uint32_t)(x))<<GPIOA_PDOR_PDO_SHIFT))&GPIOA_PDOR_PDO_MASK)
//   Port Data Output
//     0b0 ==> Logic level 0 is driven on pin, provided pin is configured for general-purpose output.
//     0b1 ==> Logic level 1 is driven on pin, provided pin is configured for general-purpose output.

#define  GPIOA_PSOR_PTSO_MASK        0xFFFFFFFFu
#define  GPIOA_PSOR_PTSO_SHIFT       0
#define  GPIOA_PSOR_PTSO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOA_PSOR_PTSO_SHIFT))&GPIOA_PSOR_PTSO_MASK)
//   Port Set Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to logic 1.

#define  GPIOA_PCOR_PTCO_MASK        0xFFFFFFFFu
#define  GPIOA_PCOR_PTCO_SHIFT       0
#define  GPIOA_PCOR_PTCO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOA_PCOR_PTCO_SHIFT))&GPIOA_PCOR_PTCO_MASK)
//   Port Clear Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is cleared to logic 0.

#define  GPIOA_PTOR_PTTO_MASK        0xFFFFFFFFu
#define  GPIOA_PTOR_PTTO_SHIFT       0
#define  GPIOA_PTOR_PTTO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOA_PTOR_PTTO_SHIFT))&GPIOA_PTOR_PTTO_MASK)
//   Port Toggle Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to the inverse of its existing logic state.

#define  GPIOA_PDIR_PDI_MASK         0xFFFFFFFFu
#define  GPIOA_PDIR_PDI_SHIFT        0
#define  GPIOA_PDIR_PDI(x)           (((uint32_t)(((uint32_t)(x))<<GPIOA_PDIR_PDI_SHIFT))&GPIOA_PDIR_PDI_MASK)
//   Port Data Input
//     0b0 ==> Pin logic level is logic 0, or is not configured for use by digital function.
//     0b1 ==> Pin logic level is logic 1.

#define  GPIOA_PDDR_PDD_MASK         0xFFFFFFFFu
#define  GPIOA_PDDR_PDD_SHIFT        0
#define  GPIOA_PDDR_PDD(x)           (((uint32_t)(((uint32_t)(x))<<GPIOA_PDDR_PDD_SHIFT))&GPIOA_PDDR_PDD_MASK)
//   Port Data Direction
//     0b0 ==> Pin is configured as general-purpose input, for the GPIO function.
//     0b1 ==> Pin is configured as general-purpose output, for the GPIO function.

#define  GPIOB_PDOR_PDO_MASK         0xFFFFFFFFu
#define  GPIOB_PDOR_PDO_SHIFT        0
#define  GPIOB_PDOR_PDO(x)           (((uint32_t)(((uint32_t)(x))<<GPIOB_PDOR_PDO_SHIFT))&GPIOB_PDOR_PDO_MASK)
//   Port Data Output
//     0b0 ==> Logic level 0 is driven on pin, provided pin is configured for general-purpose output.
//     0b1 ==> Logic level 1 is driven on pin, provided pin is configured for general-purpose output.

#define  GPIOB_PSOR_PTSO_MASK        0xFFFFFFFFu
#define  GPIOB_PSOR_PTSO_SHIFT       0
#define  GPIOB_PSOR_PTSO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOB_PSOR_PTSO_SHIFT))&GPIOB_PSOR_PTSO_MASK)
//   Port Set Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to logic 1.

#define  GPIOB_PCOR_PTCO_MASK        0xFFFFFFFFu
#define  GPIOB_PCOR_PTCO_SHIFT       0
#define  GPIOB_PCOR_PTCO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOB_PCOR_PTCO_SHIFT))&GPIOB_PCOR_PTCO_MASK)
//   Port Clear Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is cleared to logic 0.

#define  GPIOB_PTOR_PTTO_MASK        0xFFFFFFFFu
#define  GPIOB_PTOR_PTTO_SHIFT       0
#define  GPIOB_PTOR_PTTO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOB_PTOR_PTTO_SHIFT))&GPIOB_PTOR_PTTO_MASK)
//   Port Toggle Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to the inverse of its existing logic state.

#define  GPIOB_PDIR_PDI_MASK         0xFFFFFFFFu
#define  GPIOB_PDIR_PDI_SHIFT        0
#define  GPIOB_PDIR_PDI(x)           (((uint32_t)(((uint32_t)(x))<<GPIOB_PDIR_PDI_SHIFT))&GPIOB_PDIR_PDI_MASK)
//   Port Data Input
//     0b0 ==> Pin logic level is logic 0, or is not configured for use by digital function.
//     0b1 ==> Pin logic level is logic 1.

#define  GPIOB_PDDR_PDD_MASK         0xFFFFFFFFu
#define  GPIOB_PDDR_PDD_SHIFT        0
#define  GPIOB_PDDR_PDD(x)           (((uint32_t)(((uint32_t)(x))<<GPIOB_PDDR_PDD_SHIFT))&GPIOB_PDDR_PDD_MASK)
//   Port Data Direction
//     0b0 ==> Pin is configured as general-purpose input, for the GPIO function.
//     0b1 ==> Pin is configured as general-purpose output, for the GPIO function.

#define  GPIOC_PDOR_PDO_MASK         0xFFFFFFFFu
#define  GPIOC_PDOR_PDO_SHIFT        0
#define  GPIOC_PDOR_PDO(x)           (((uint32_t)(((uint32_t)(x))<<GPIOC_PDOR_PDO_SHIFT))&GPIOC_PDOR_PDO_MASK)
//   Port Data Output
//     0b0 ==> Logic level 0 is driven on pin, provided pin is configured for general-purpose output.
//     0b1 ==> Logic level 1 is driven on pin, provided pin is configured for general-purpose output.

#define  GPIOC_PSOR_PTSO_MASK        0xFFFFFFFFu
#define  GPIOC_PSOR_PTSO_SHIFT       0
#define  GPIOC_PSOR_PTSO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOC_PSOR_PTSO_SHIFT))&GPIOC_PSOR_PTSO_MASK)
//   Port Set Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to logic 1.

#define  GPIOC_PCOR_PTCO_MASK        0xFFFFFFFFu
#define  GPIOC_PCOR_PTCO_SHIFT       0
#define  GPIOC_PCOR_PTCO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOC_PCOR_PTCO_SHIFT))&GPIOC_PCOR_PTCO_MASK)
//   Port Clear Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is cleared to logic 0.

#define  GPIOC_PTOR_PTTO_MASK        0xFFFFFFFFu
#define  GPIOC_PTOR_PTTO_SHIFT       0
#define  GPIOC_PTOR_PTTO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOC_PTOR_PTTO_SHIFT))&GPIOC_PTOR_PTTO_MASK)
//   Port Toggle Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to the inverse of its existing logic state.

#define  GPIOC_PDIR_PDI_MASK         0xFFFFFFFFu
#define  GPIOC_PDIR_PDI_SHIFT        0
#define  GPIOC_PDIR_PDI(x)           (((uint32_t)(((uint32_t)(x))<<GPIOC_PDIR_PDI_SHIFT))&GPIOC_PDIR_PDI_MASK)
//   Port Data Input
//     0b0 ==> Pin logic level is logic 0, or is not configured for use by digital function.
//     0b1 ==> Pin logic level is logic 1.

#define  GPIOC_PDDR_PDD_MASK         0xFFFFFFFFu
#define  GPIOC_PDDR_PDD_SHIFT        0
#define  GPIOC_PDDR_PDD(x)           (((uint32_t)(((uint32_t)(x))<<GPIOC_PDDR_PDD_SHIFT))&GPIOC_PDDR_PDD_MASK)
//   Port Data Direction
//     0b0 ==> Pin is configured as general-purpose input, for the GPIO function.
//     0b1 ==> Pin is configured as general-purpose output, for the GPIO function.

#define  GPIOD_PDOR_PDO_MASK         0xFFFFFFFFu
#define  GPIOD_PDOR_PDO_SHIFT        0
#define  GPIOD_PDOR_PDO(x)           (((uint32_t)(((uint32_t)(x))<<GPIOD_PDOR_PDO_SHIFT))&GPIOD_PDOR_PDO_MASK)
//   Port Data Output
//     0b0 ==> Logic level 0 is driven on pin, provided pin is configured for general-purpose output.
//     0b1 ==> Logic level 1 is driven on pin, provided pin is configured for general-purpose output.

#define  GPIOD_PSOR_PTSO_MASK        0xFFFFFFFFu
#define  GPIOD_PSOR_PTSO_SHIFT       0
#define  GPIOD_PSOR_PTSO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOD_PSOR_PTSO_SHIFT))&GPIOD_PSOR_PTSO_MASK)
//   Port Set Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to logic 1.

#define  GPIOD_PCOR_PTCO_MASK        0xFFFFFFFFu
#define  GPIOD_PCOR_PTCO_SHIFT       0
#define  GPIOD_PCOR_PTCO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOD_PCOR_PTCO_SHIFT))&GPIOD_PCOR_PTCO_MASK)
//   Port Clear Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is cleared to logic 0.

#define  GPIOD_PTOR_PTTO_MASK        0xFFFFFFFFu
#define  GPIOD_PTOR_PTTO_SHIFT       0
#define  GPIOD_PTOR_PTTO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOD_PTOR_PTTO_SHIFT))&GPIOD_PTOR_PTTO_MASK)
//   Port Toggle Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to the inverse of its existing logic state.

#define  GPIOD_PDIR_PDI_MASK         0xFFFFFFFFu
#define  GPIOD_PDIR_PDI_SHIFT        0
#define  GPIOD_PDIR_PDI(x)           (((uint32_t)(((uint32_t)(x))<<GPIOD_PDIR_PDI_SHIFT))&GPIOD_PDIR_PDI_MASK)
//   Port Data Input
//     0b0 ==> Pin logic level is logic 0, or is not configured for use by digital function.
//     0b1 ==> Pin logic level is logic 1.

#define  GPIOD_PDDR_PDD_MASK         0xFFFFFFFFu
#define  GPIOD_PDDR_PDD_SHIFT        0
#define  GPIOD_PDDR_PDD(x)           (((uint32_t)(((uint32_t)(x))<<GPIOD_PDDR_PDD_SHIFT))&GPIOD_PDDR_PDD_MASK)
//   Port Data Direction
//     0b0 ==> Pin is configured as general-purpose input, for the GPIO function.
//     0b1 ==> Pin is configured as general-purpose output, for the GPIO function.

#define  GPIOE_PDOR_PDO_MASK         0xFFFFFFFFu
#define  GPIOE_PDOR_PDO_SHIFT        0
#define  GPIOE_PDOR_PDO(x)           (((uint32_t)(((uint32_t)(x))<<GPIOE_PDOR_PDO_SHIFT))&GPIOE_PDOR_PDO_MASK)
//   Port Data Output
//     0b0 ==> Logic level 0 is driven on pin, provided pin is configured for general-purpose output.
//     0b1 ==> Logic level 1 is driven on pin, provided pin is configured for general-purpose output.

#define  GPIOE_PSOR_PTSO_MASK        0xFFFFFFFFu
#define  GPIOE_PSOR_PTSO_SHIFT       0
#define  GPIOE_PSOR_PTSO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOE_PSOR_PTSO_SHIFT))&GPIOE_PSOR_PTSO_MASK)
//   Port Set Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to logic 1.

#define  GPIOE_PCOR_PTCO_MASK        0xFFFFFFFFu
#define  GPIOE_PCOR_PTCO_SHIFT       0
#define  GPIOE_PCOR_PTCO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOE_PCOR_PTCO_SHIFT))&GPIOE_PCOR_PTCO_MASK)
//   Port Clear Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is cleared to logic 0.

#define  GPIOE_PTOR_PTTO_MASK        0xFFFFFFFFu
#define  GPIOE_PTOR_PTTO_SHIFT       0
#define  GPIOE_PTOR_PTTO(x)          (((uint32_t)(((uint32_t)(x))<<GPIOE_PTOR_PTTO_SHIFT))&GPIOE_PTOR_PTTO_MASK)
//   Port Toggle Output
//     0b0 ==> Corresponding bit in PDORn does not change.
//     0b1 ==> Corresponding bit in PDORn is set to the inverse of its existing logic state.

#define  GPIOE_PDIR_PDI_MASK         0xFFFFFFFFu
#define  GPIOE_PDIR_PDI_SHIFT        0
#define  GPIOE_PDIR_PDI(x)           (((uint32_t)(((uint32_t)(x))<<GPIOE_PDIR_PDI_SHIFT))&GPIOE_PDIR_PDI_MASK)
//   Port Data Input
//     0b0 ==> Pin logic level is logic 0, or is not configured for use by digital function.
//     0b1 ==> Pin logic level is logic 1.

#define  GPIOE_PDDR_PDD_MASK         0xFFFFFFFFu
#define  GPIOE_PDDR_PDD_SHIFT        0
#define  GPIOE_PDDR_PDD(x)           (((uint32_t)(((uint32_t)(x))<<GPIOE_PDDR_PDD_SHIFT))&GPIOE_PDDR_PDD_MASK)
//   Port Data Direction
//     0b0 ==> Pin is configured as general-purpose input, for the GPIO function.
//     0b1 ==> Pin is configured as general-purpose output, for the GPIO function.

#define  I2C0_A1_AD_MASK             0xFEu
#define  I2C0_A1_AD_SHIFT            1
#define  I2C0_A1_AD(x)               (((uint8_t)(((uint8_t)(x))<<I2C0_A1_AD_SHIFT))&I2C0_A1_AD_MASK)
//   Address

#define  I2C0_F_ICR_MASK             0x3Fu
#define  I2C0_F_ICR_SHIFT            0
#define  I2C0_F_ICR(x)               (((uint8_t)(((uint8_t)(x))<<I2C0_F_ICR_SHIFT))&I2C0_F_ICR_MASK)
//   ClockRate

#define  I2C0_F_MULT_MASK            0xC0u
#define  I2C0_F_MULT_SHIFT           6
#define  I2C0_F_MULT(x)              (((uint8_t)(((uint8_t)(x))<<I2C0_F_MULT_SHIFT))&I2C0_F_MULT_MASK)
//     0b00 ==> mul = 1
//     0b01 ==> mul = 2
//     0b10 ==> mul = 4
//     0b11 ==> Reserved

#define  I2C0_C1_DMAEN_MASK          0x1u
#define  I2C0_C1_DMAEN_SHIFT         0
//   DMA Enable
//     0b0 ==> All DMA signalling disabled.
//     0b1 ==> DMA transfer is enabled and the following conditions trigger the DMA request: While FACK = 0, a data byte is received, either address or data is transmitted. (ACK/NACK automatic) While FACK = 0, the first byte received matches the A1 register or is general call address. If any address matching occurs, IAAS and TCF are set. If the direction of transfer is known from master to slave, then it is not required to check the SRW. With this assumption, DMA can also be used in this
//             case. In other cases, if the master reads data from the slave, then it is required to rewrite the C1 register operation. With this assumption, DMA cannot be used. When FACK = 1, an address or a data byte is transmitted.

#define  I2C0_C1_WUEN_MASK           0x2u
#define  I2C0_C1_WUEN_SHIFT          1
//   Wakeup Enable
//     0b0 ==> Normal operation. No interrupt generated when address matching in low power mode.
//     0b1 ==> Enables the wakeup function in low power mode.

#define  I2C0_C1_RSTA_MASK           0x4u
#define  I2C0_C1_RSTA_SHIFT          2
//   Repeat START

#define  I2C0_C1_TXAK_MASK           0x8u
#define  I2C0_C1_TXAK_SHIFT          3
//   Transmit Acknowledge Enable
//     0b0 ==> An acknowledge signal is sent to the bus on the following receiving byte (if FACK is cleared) or the current receiving byte (if FACK is set).
//     0b1 ==> No acknowledge signal is sent to the bus on the following receiving data byte (if FACK is cleared) or the current receiving data byte (if FACK is set).

#define  I2C0_C1_TX_MASK             0x10u
#define  I2C0_C1_TX_SHIFT            4
//   Transmit Mode Select
//     0b0 ==> Receive
//     0b1 ==> Transmit

#define  I2C0_C1_MST_MASK            0x20u
#define  I2C0_C1_MST_SHIFT           5
//   Master Mode Select
//     0b0 ==> Slave mode
//     0b1 ==> Master mode

#define  I2C0_C1_IICIE_MASK          0x40u
#define  I2C0_C1_IICIE_SHIFT         6
//   I2C Interrupt Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C0_C1_IICEN_MASK          0x80u
#define  I2C0_C1_IICEN_SHIFT         7
//   I2C Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C0_S_RXAK_MASK            0x1u
#define  I2C0_S_RXAK_SHIFT           0
//   Receive Acknowledge
//     0b0 ==> Acknowledge signal was received after the completion of one byte of data transmission on the bus
//     0b1 ==> No acknowledge signal detected

#define  I2C0_S_IICIF_MASK           0x2u
#define  I2C0_S_IICIF_SHIFT          1
//   Interrupt Flag
//     0b0 ==> No interrupt pending
//     0b1 ==> Interrupt pending

#define  I2C0_S_SRW_MASK             0x4u
#define  I2C0_S_SRW_SHIFT            2
//   Slave Read/Write
//     0b0 ==> Slave receive, master writing to slave
//     0b1 ==> Slave transmit, master reading from slave

#define  I2C0_S_RAM_MASK             0x8u
#define  I2C0_S_RAM_SHIFT            3
//   Range Address Match
//     0b0 ==> Not addressed
//     0b1 ==> Addressed as a slave

#define  I2C0_S_ARBL_MASK            0x10u
#define  I2C0_S_ARBL_SHIFT           4
//   Arbitration Lost
//     0b0 ==> Standard bus operation.
//     0b1 ==> Loss of arbitration.

#define  I2C0_S_BUSY_MASK            0x20u
#define  I2C0_S_BUSY_SHIFT           5
//   Bus Busy
//     0b0 ==> Bus is idle
//     0b1 ==> Bus is busy

#define  I2C0_S_IAAS_MASK            0x40u
#define  I2C0_S_IAAS_SHIFT           6
//   Addressed As A Slave
//     0b0 ==> Not addressed
//     0b1 ==> Addressed as a slave

#define  I2C0_S_TCF_MASK             0x80u
#define  I2C0_S_TCF_SHIFT            7
//   Transfer Complete Flag
//     0b0 ==> Transfer in progress
//     0b1 ==> Transfer complete

#define  I2C0_D_DATA_MASK            0xFFu
#define  I2C0_D_DATA_SHIFT           0
#define  I2C0_D_DATA(x)              (((uint8_t)(((uint8_t)(x))<<I2C0_D_DATA_SHIFT))&I2C0_D_DATA_MASK)
//   Data

#define  I2C0_C2_AD_MASK             0x7u
#define  I2C0_C2_AD_SHIFT            0
#define  I2C0_C2_AD(x)               (((uint8_t)(((uint8_t)(x))<<I2C0_C2_AD_SHIFT))&I2C0_C2_AD_MASK)
//   Slave Address

#define  I2C0_C2_RMEN_MASK           0x8u
#define  I2C0_C2_RMEN_SHIFT          3
//   Range Address Matching Enable
//     0b0 ==> Range mode disabled. No address match occurs for an address within the range of values of the A1 and RA registers.
//     0b1 ==> Range mode enabled. Address matching occurs when a slave receives an address within the range of values of the A1 and RA registers.

#define  I2C0_C2_SBRC_MASK           0x10u
#define  I2C0_C2_SBRC_SHIFT          4
//   Slave Baud Rate Control
//     0b0 ==> The slave baud rate follows the master baud rate and clock stretching may occur
//     0b1 ==> Slave baud rate is independent of the master baud rate

#define  I2C0_C2_HDRS_MASK           0x20u
#define  I2C0_C2_HDRS_SHIFT          5
//   High Drive Select
//     0b0 ==> Normal drive mode
//     0b1 ==> High drive mode

#define  I2C0_C2_ADEXT_MASK          0x40u
#define  I2C0_C2_ADEXT_SHIFT         6
//   Address Extension
//     0b0 ==> 7-bit address scheme
//     0b1 ==> 10-bit address scheme

#define  I2C0_C2_GCAEN_MASK          0x80u
#define  I2C0_C2_GCAEN_SHIFT         7
//   General Call Address Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C0_FLT_FLT_MASK           0x1Fu
#define  I2C0_FLT_FLT_SHIFT          0
#define  I2C0_FLT_FLT(x)             (((uint8_t)(((uint8_t)(x))<<I2C0_FLT_FLT_SHIFT))&I2C0_FLT_FLT_MASK)
//   I2C Programmable Filter Factor
//     0b0 ==> No filter/bypass

#define  I2C0_FLT_STOPIE_MASK        0x20u
#define  I2C0_FLT_STOPIE_SHIFT       5
//   I2C Bus Stop Interrupt Enable
//     0b0 ==> Stop detection interrupt is disabled
//     0b1 ==> Stop detection interrupt is enabled

#define  I2C0_FLT_STOPF_MASK         0x40u
#define  I2C0_FLT_STOPF_SHIFT        6
//   I2C Bus Stop Detect Flag
//     0b0 ==> No stop happens on I2C bus
//     0b1 ==> Stop detected on I2C bus

#define  I2C0_FLT_SHEN_MASK          0x80u
#define  I2C0_FLT_SHEN_SHIFT         7
//   Stop Hold Enable
//     0b0 ==> Stop holdoff is disabled. The MCU's entry to stop mode is not gated.
//     0b1 ==> Stop holdoff is enabled.

#define  I2C0_RA_RAD_MASK            0xFEu
#define  I2C0_RA_RAD_SHIFT           1
#define  I2C0_RA_RAD(x)              (((uint8_t)(((uint8_t)(x))<<I2C0_RA_RAD_SHIFT))&I2C0_RA_RAD_MASK)
//   Range Slave Address

#define  I2C0_SMB_SHTF2IE_MASK       0x1u
#define  I2C0_SMB_SHTF2IE_SHIFT      0
//   SHTF2 Interrupt Enable
//     0b0 ==> SHTF2 interrupt is disabled
//     0b1 ==> SHTF2 interrupt is enabled

#define  I2C0_SMB_SHTF2_MASK         0x2u
#define  I2C0_SMB_SHTF2_SHIFT        1
//   SCL High Timeout Flag 2
//     0b0 ==> No SCL high and SDA low timeout occurs
//     0b1 ==> SCL high and SDA low timeout occurs

#define  I2C0_SMB_SHTF1_MASK         0x4u
#define  I2C0_SMB_SHTF1_SHIFT        2
//   SCL High Timeout Flag 1
//     0b0 ==> No SCL high and SDA high timeout occurs
//     0b1 ==> SCL high and SDA high timeout occurs

#define  I2C0_SMB_SLTF_MASK          0x8u
#define  I2C0_SMB_SLTF_SHIFT         3
//   SCL Low Timeout Flag
//     0b0 ==> No low timeout occurs
//     0b1 ==> Low timeout occurs

#define  I2C0_SMB_TCKSEL_MASK        0x10u
#define  I2C0_SMB_TCKSEL_SHIFT       4
//   Timeout Counter Clock Select
//     0b0 ==> Timeout counter counts at the frequency of the bus clock / 64
//     0b1 ==> Timeout counter counts at the frequency of the bus clock

#define  I2C0_SMB_SIICAEN_MASK       0x20u
#define  I2C0_SMB_SIICAEN_SHIFT      5
//   Second I2C Address Enable
//     0b0 ==> I2C address register 2 matching is disabled
//     0b1 ==> I2C address register 2 matching is enabled

#define  I2C0_SMB_ALERTEN_MASK       0x40u
#define  I2C0_SMB_ALERTEN_SHIFT      6
//   SMBus Alert Response Address Enable
//     0b0 ==> SMBus alert response address matching is disabled
//     0b1 ==> SMBus alert response address matching is enabled

#define  I2C0_SMB_FACK_MASK          0x80u
#define  I2C0_SMB_FACK_SHIFT         7
//   Fast NACK/ACK Enable
//     0b0 ==> An ACK or NACK is sent on the following receiving data byte
//     0b1 ==> Writing 0 to TXAK after receiving a data byte generates an ACK. Writing 1 to TXAK after receiving a data byte generates a NACK.

#define  I2C0_A2_SAD_MASK            0xFEu
#define  I2C0_A2_SAD_SHIFT           1
#define  I2C0_A2_SAD(x)              (((uint8_t)(((uint8_t)(x))<<I2C0_A2_SAD_SHIFT))&I2C0_A2_SAD_MASK)
//   SMBus Address

#define  I2C0_SLTH_SSLT_MASK         0xFFu
#define  I2C0_SLTH_SSLT_SHIFT        0
#define  I2C0_SLTH_SSLT(x)           (((uint8_t)(((uint8_t)(x))<<I2C0_SLTH_SSLT_SHIFT))&I2C0_SLTH_SSLT_MASK)

#define  I2C0_SLTL_SSLT_MASK         0xFFu
#define  I2C0_SLTL_SSLT_SHIFT        0
#define  I2C0_SLTL_SSLT(x)           (((uint8_t)(((uint8_t)(x))<<I2C0_SLTL_SSLT_SHIFT))&I2C0_SLTL_SSLT_MASK)

#define  I2C1_A1_AD_MASK             0xFEu
#define  I2C1_A1_AD_SHIFT            1
#define  I2C1_A1_AD(x)               (((uint8_t)(((uint8_t)(x))<<I2C1_A1_AD_SHIFT))&I2C1_A1_AD_MASK)
//   Address

#define  I2C1_F_ICR_MASK             0x3Fu
#define  I2C1_F_ICR_SHIFT            0
#define  I2C1_F_ICR(x)               (((uint8_t)(((uint8_t)(x))<<I2C1_F_ICR_SHIFT))&I2C1_F_ICR_MASK)
//   ClockRate

#define  I2C1_F_MULT_MASK            0xC0u
#define  I2C1_F_MULT_SHIFT           6
#define  I2C1_F_MULT(x)              (((uint8_t)(((uint8_t)(x))<<I2C1_F_MULT_SHIFT))&I2C1_F_MULT_MASK)
//     0b00 ==> mul = 1
//     0b01 ==> mul = 2
//     0b10 ==> mul = 4
//     0b11 ==> Reserved

#define  I2C1_C1_DMAEN_MASK          0x1u
#define  I2C1_C1_DMAEN_SHIFT         0
//   DMA Enable
//     0b0 ==> All DMA signalling disabled.
//     0b1 ==> DMA transfer is enabled and the following conditions trigger the DMA request: While FACK = 0, a data byte is received, either address or data is transmitted. (ACK/NACK automatic) While FACK = 0, the first byte received matches the A1 register or is general call address. If any address matching occurs, IAAS and TCF are set. If the direction of transfer is known from master to slave, then it is not required to check the SRW. With this assumption, DMA can also be used in this
//             case. In other cases, if the master reads data from the slave, then it is required to rewrite the C1 register operation. With this assumption, DMA cannot be used. When FACK = 1, an address or a data byte is transmitted.

#define  I2C1_C1_WUEN_MASK           0x2u
#define  I2C1_C1_WUEN_SHIFT          1
//   Wakeup Enable
//     0b0 ==> Normal operation. No interrupt generated when address matching in low power mode.
//     0b1 ==> Enables the wakeup function in low power mode.

#define  I2C1_C1_RSTA_MASK           0x4u
#define  I2C1_C1_RSTA_SHIFT          2
//   Repeat START

#define  I2C1_C1_TXAK_MASK           0x8u
#define  I2C1_C1_TXAK_SHIFT          3
//   Transmit Acknowledge Enable
//     0b0 ==> An acknowledge signal is sent to the bus on the following receiving byte (if FACK is cleared) or the current receiving byte (if FACK is set).
//     0b1 ==> No acknowledge signal is sent to the bus on the following receiving data byte (if FACK is cleared) or the current receiving data byte (if FACK is set).

#define  I2C1_C1_TX_MASK             0x10u
#define  I2C1_C1_TX_SHIFT            4
//   Transmit Mode Select
//     0b0 ==> Receive
//     0b1 ==> Transmit

#define  I2C1_C1_MST_MASK            0x20u
#define  I2C1_C1_MST_SHIFT           5
//   Master Mode Select
//     0b0 ==> Slave mode
//     0b1 ==> Master mode

#define  I2C1_C1_IICIE_MASK          0x40u
#define  I2C1_C1_IICIE_SHIFT         6
//   I2C Interrupt Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C1_C1_IICEN_MASK          0x80u
#define  I2C1_C1_IICEN_SHIFT         7
//   I2C Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C1_S_RXAK_MASK            0x1u
#define  I2C1_S_RXAK_SHIFT           0
//   Receive Acknowledge
//     0b0 ==> Acknowledge signal was received after the completion of one byte of data transmission on the bus
//     0b1 ==> No acknowledge signal detected

#define  I2C1_S_IICIF_MASK           0x2u
#define  I2C1_S_IICIF_SHIFT          1
//   Interrupt Flag
//     0b0 ==> No interrupt pending
//     0b1 ==> Interrupt pending

#define  I2C1_S_SRW_MASK             0x4u
#define  I2C1_S_SRW_SHIFT            2
//   Slave Read/Write
//     0b0 ==> Slave receive, master writing to slave
//     0b1 ==> Slave transmit, master reading from slave

#define  I2C1_S_RAM_MASK             0x8u
#define  I2C1_S_RAM_SHIFT            3
//   Range Address Match
//     0b0 ==> Not addressed
//     0b1 ==> Addressed as a slave

#define  I2C1_S_ARBL_MASK            0x10u
#define  I2C1_S_ARBL_SHIFT           4
//   Arbitration Lost
//     0b0 ==> Standard bus operation.
//     0b1 ==> Loss of arbitration.

#define  I2C1_S_BUSY_MASK            0x20u
#define  I2C1_S_BUSY_SHIFT           5
//   Bus Busy
//     0b0 ==> Bus is idle
//     0b1 ==> Bus is busy

#define  I2C1_S_IAAS_MASK            0x40u
#define  I2C1_S_IAAS_SHIFT           6
//   Addressed As A Slave
//     0b0 ==> Not addressed
//     0b1 ==> Addressed as a slave

#define  I2C1_S_TCF_MASK             0x80u
#define  I2C1_S_TCF_SHIFT            7
//   Transfer Complete Flag
//     0b0 ==> Transfer in progress
//     0b1 ==> Transfer complete

#define  I2C1_D_DATA_MASK            0xFFu
#define  I2C1_D_DATA_SHIFT           0
#define  I2C1_D_DATA(x)              (((uint8_t)(((uint8_t)(x))<<I2C1_D_DATA_SHIFT))&I2C1_D_DATA_MASK)
//   Data

#define  I2C1_C2_AD_MASK             0x7u
#define  I2C1_C2_AD_SHIFT            0
#define  I2C1_C2_AD(x)               (((uint8_t)(((uint8_t)(x))<<I2C1_C2_AD_SHIFT))&I2C1_C2_AD_MASK)
//   Slave Address

#define  I2C1_C2_RMEN_MASK           0x8u
#define  I2C1_C2_RMEN_SHIFT          3
//   Range Address Matching Enable
//     0b0 ==> Range mode disabled. No address match occurs for an address within the range of values of the A1 and RA registers.
//     0b1 ==> Range mode enabled. Address matching occurs when a slave receives an address within the range of values of the A1 and RA registers.

#define  I2C1_C2_SBRC_MASK           0x10u
#define  I2C1_C2_SBRC_SHIFT          4
//   Slave Baud Rate Control
//     0b0 ==> The slave baud rate follows the master baud rate and clock stretching may occur
//     0b1 ==> Slave baud rate is independent of the master baud rate

#define  I2C1_C2_HDRS_MASK           0x20u
#define  I2C1_C2_HDRS_SHIFT          5
//   High Drive Select
//     0b0 ==> Normal drive mode
//     0b1 ==> High drive mode

#define  I2C1_C2_ADEXT_MASK          0x40u
#define  I2C1_C2_ADEXT_SHIFT         6
//   Address Extension
//     0b0 ==> 7-bit address scheme
//     0b1 ==> 10-bit address scheme

#define  I2C1_C2_GCAEN_MASK          0x80u
#define  I2C1_C2_GCAEN_SHIFT         7
//   General Call Address Enable
//     0b0 ==> Disabled
//     0b1 ==> Enabled

#define  I2C1_FLT_FLT_MASK           0x1Fu
#define  I2C1_FLT_FLT_SHIFT          0
#define  I2C1_FLT_FLT(x)             (((uint8_t)(((uint8_t)(x))<<I2C1_FLT_FLT_SHIFT))&I2C1_FLT_FLT_MASK)
//   I2C Programmable Filter Factor
//     0b0 ==> No filter/bypass

#define  I2C1_FLT_STOPIE_MASK        0x20u
#define  I2C1_FLT_STOPIE_SHIFT       5
//   I2C Bus Stop Interrupt Enable
//     0b0 ==> Stop detection interrupt is disabled
//     0b1 ==> Stop detection interrupt is enabled

#define  I2C1_FLT_STOPF_MASK         0x40u
#define  I2C1_FLT_STOPF_SHIFT        6
//   I2C Bus Stop Detect Flag
//     0b0 ==> No stop happens on I2C bus
//     0b1 ==> Stop detected on I2C bus

#define  I2C1_FLT_SHEN_MASK          0x80u
#define  I2C1_FLT_SHEN_SHIFT         7
//   Stop Hold Enable
//     0b0 ==> Stop holdoff is disabled. The MCU's entry to stop mode is not gated.
//     0b1 ==> Stop holdoff is enabled.

#define  I2C1_RA_RAD_MASK            0xFEu
#define  I2C1_RA_RAD_SHIFT           1
#define  I2C1_RA_RAD(x)              (((uint8_t)(((uint8_t)(x))<<I2C1_RA_RAD_SHIFT))&I2C1_RA_RAD_MASK)
//   Range Slave Address

#define  I2C1_SMB_SHTF2IE_MASK       0x1u
#define  I2C1_SMB_SHTF2IE_SHIFT      0
//   SHTF2 Interrupt Enable
//     0b0 ==> SHTF2 interrupt is disabled
//     0b1 ==> SHTF2 interrupt is enabled

#define  I2C1_SMB_SHTF2_MASK         0x2u
#define  I2C1_SMB_SHTF2_SHIFT        1
//   SCL High Timeout Flag 2
//     0b0 ==> No SCL high and SDA low timeout occurs
//     0b1 ==> SCL high and SDA low timeout occurs

#define  I2C1_SMB_SHTF1_MASK         0x4u
#define  I2C1_SMB_SHTF1_SHIFT        2
//   SCL High Timeout Flag 1
//     0b0 ==> No SCL high and SDA high timeout occurs
//     0b1 ==> SCL high and SDA high timeout occurs

#define  I2C1_SMB_SLTF_MASK          0x8u
#define  I2C1_SMB_SLTF_SHIFT         3
//   SCL Low Timeout Flag
//     0b0 ==> No low timeout occurs
//     0b1 ==> Low timeout occurs

#define  I2C1_SMB_TCKSEL_MASK        0x10u
#define  I2C1_SMB_TCKSEL_SHIFT       4
//   Timeout Counter Clock Select
//     0b0 ==> Timeout counter counts at the frequency of the bus clock / 64
//     0b1 ==> Timeout counter counts at the frequency of the bus clock

#define  I2C1_SMB_SIICAEN_MASK       0x20u
#define  I2C1_SMB_SIICAEN_SHIFT      5
//   Second I2C Address Enable
//     0b0 ==> I2C address register 2 matching is disabled
//     0b1 ==> I2C address register 2 matching is enabled

#define  I2C1_SMB_ALERTEN_MASK       0x40u
#define  I2C1_SMB_ALERTEN_SHIFT      6
//   SMBus Alert Response Address Enable
//     0b0 ==> SMBus alert response address matching is disabled
//     0b1 ==> SMBus alert response address matching is enabled

#define  I2C1_SMB_FACK_MASK          0x80u
#define  I2C1_SMB_FACK_SHIFT         7
//   Fast NACK/ACK Enable
//     0b0 ==> An ACK or NACK is sent on the following receiving data byte
//     0b1 ==> Writing 0 to TXAK after receiving a data byte generates an ACK. Writing 1 to TXAK after receiving a data byte generates a NACK.

#define  I2C1_A2_SAD_MASK            0xFEu
#define  I2C1_A2_SAD_SHIFT           1
#define  I2C1_A2_SAD(x)              (((uint8_t)(((uint8_t)(x))<<I2C1_A2_SAD_SHIFT))&I2C1_A2_SAD_MASK)
//   SMBus Address

#define  I2C1_SLTH_SSLT_MASK         0xFFu
#define  I2C1_SLTH_SSLT_SHIFT        0
#define  I2C1_SLTH_SSLT(x)           (((uint8_t)(((uint8_t)(x))<<I2C1_SLTH_SSLT_SHIFT))&I2C1_SLTH_SSLT_MASK)

#define  I2C1_SLTL_SSLT_MASK         0xFFu
#define  I2C1_SLTL_SSLT_SHIFT        0
#define  I2C1_SLTL_SSLT(x)           (((uint8_t)(((uint8_t)(x))<<I2C1_SLTL_SSLT_SHIFT))&I2C1_SLTL_SSLT_MASK)

#define  LLWU_PE1_WUPE0_MASK         0x3u
#define  LLWU_PE1_WUPE0_SHIFT        0
#define  LLWU_PE1_WUPE0(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE0_SHIFT))&LLWU_PE1_WUPE0_MASK)
//   Wakeup Pin Enable For LLWU_P0
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE1_WUPE1_MASK         0xCu
#define  LLWU_PE1_WUPE1_SHIFT        2
#define  LLWU_PE1_WUPE1(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE1_SHIFT))&LLWU_PE1_WUPE1_MASK)
//   Wakeup Pin Enable For LLWU_P1
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE1_WUPE2_MASK         0x30u
#define  LLWU_PE1_WUPE2_SHIFT        4
#define  LLWU_PE1_WUPE2(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE2_SHIFT))&LLWU_PE1_WUPE2_MASK)
//   Wakeup Pin Enable For LLWU_P2
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE1_WUPE3_MASK         0xC0u
#define  LLWU_PE1_WUPE3_SHIFT        6
#define  LLWU_PE1_WUPE3(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE3_SHIFT))&LLWU_PE1_WUPE3_MASK)
//   Wakeup Pin Enable For LLWU_P3
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE2_WUPE4_MASK         0x3u
#define  LLWU_PE2_WUPE4_SHIFT        0
#define  LLWU_PE2_WUPE4(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE4_SHIFT))&LLWU_PE2_WUPE4_MASK)
//   Wakeup Pin Enable For LLWU_P4
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE2_WUPE5_MASK         0xCu
#define  LLWU_PE2_WUPE5_SHIFT        2
#define  LLWU_PE2_WUPE5(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE5_SHIFT))&LLWU_PE2_WUPE5_MASK)
//   Wakeup Pin Enable For LLWU_P5
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE2_WUPE6_MASK         0x30u
#define  LLWU_PE2_WUPE6_SHIFT        4
#define  LLWU_PE2_WUPE6(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE6_SHIFT))&LLWU_PE2_WUPE6_MASK)
//   Wakeup Pin Enable For LLWU_P6
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE2_WUPE7_MASK         0xC0u
#define  LLWU_PE2_WUPE7_SHIFT        6
#define  LLWU_PE2_WUPE7(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE7_SHIFT))&LLWU_PE2_WUPE7_MASK)
//   Wakeup Pin Enable For LLWU_P7
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE3_WUPE8_MASK         0x3u
#define  LLWU_PE3_WUPE8_SHIFT        0
#define  LLWU_PE3_WUPE8(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE8_SHIFT))&LLWU_PE3_WUPE8_MASK)
//   Wakeup Pin Enable For LLWU_P8
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE3_WUPE9_MASK         0xCu
#define  LLWU_PE3_WUPE9_SHIFT        2
#define  LLWU_PE3_WUPE9(x)           (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE9_SHIFT))&LLWU_PE3_WUPE9_MASK)
//   Wakeup Pin Enable For LLWU_P9
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE3_WUPE10_MASK        0x30u
#define  LLWU_PE3_WUPE10_SHIFT       4
#define  LLWU_PE3_WUPE10(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE10_SHIFT))&LLWU_PE3_WUPE10_MASK)
//   Wakeup Pin Enable For LLWU_P10
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE3_WUPE11_MASK        0xC0u
#define  LLWU_PE3_WUPE11_SHIFT       6
#define  LLWU_PE3_WUPE11(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE11_SHIFT))&LLWU_PE3_WUPE11_MASK)
//   Wakeup Pin Enable For LLWU_P11
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE4_WUPE12_MASK        0x3u
#define  LLWU_PE4_WUPE12_SHIFT       0
#define  LLWU_PE4_WUPE12(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE12_SHIFT))&LLWU_PE4_WUPE12_MASK)
//   Wakeup Pin Enable For LLWU_P12
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE4_WUPE13_MASK        0xCu
#define  LLWU_PE4_WUPE13_SHIFT       2
#define  LLWU_PE4_WUPE13(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE13_SHIFT))&LLWU_PE4_WUPE13_MASK)
//   Wakeup Pin Enable For LLWU_P13
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE4_WUPE14_MASK        0x30u
#define  LLWU_PE4_WUPE14_SHIFT       4
#define  LLWU_PE4_WUPE14(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE14_SHIFT))&LLWU_PE4_WUPE14_MASK)
//   Wakeup Pin Enable For LLWU_P14
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_PE4_WUPE15_MASK        0xC0u
#define  LLWU_PE4_WUPE15_SHIFT       6
#define  LLWU_PE4_WUPE15(x)          (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE15_SHIFT))&LLWU_PE4_WUPE15_MASK)
//   Wakeup Pin Enable For LLWU_P15
//     0b00 ==> External input pin disabled as wakeup input
//     0b01 ==> External input pin enabled with rising edge detection
//     0b10 ==> External input pin enabled with falling edge detection
//     0b11 ==> External input pin enabled with any change detection

#define  LLWU_ME_WUME0_MASK          0x1u
#define  LLWU_ME_WUME0_SHIFT         0
//   Wakeup Module Enable For Module 0
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME1_MASK          0x2u
#define  LLWU_ME_WUME1_SHIFT         1
//   Wakeup Module Enable for Module 1
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME2_MASK          0x4u
#define  LLWU_ME_WUME2_SHIFT         2
//   Wakeup Module Enable For Module 2
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME3_MASK          0x8u
#define  LLWU_ME_WUME3_SHIFT         3
//   Wakeup Module Enable For Module 3
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME4_MASK          0x10u
#define  LLWU_ME_WUME4_SHIFT         4
//   Wakeup Module Enable For Module 4
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME5_MASK          0x20u
#define  LLWU_ME_WUME5_SHIFT         5
//   Wakeup Module Enable For Module 5
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME6_MASK          0x40u
#define  LLWU_ME_WUME6_SHIFT         6
//   Wakeup Module Enable For Module 6
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_ME_WUME7_MASK          0x80u
#define  LLWU_ME_WUME7_SHIFT         7
//   Wakeup Module Enable For Module 7
//     0b0 ==> Internal module flag not used as wakeup source
//     0b1 ==> Internal module flag used as wakeup source

#define  LLWU_F1_WUF0_MASK           0x1u
#define  LLWU_F1_WUF0_SHIFT          0
//   Wakeup Flag For LLWU_P0
//     0b0 ==> LLWU_P0 input was not a wakeup source
//     0b1 ==> LLWU_P0 input was a wakeup source

#define  LLWU_F1_WUF1_MASK           0x2u
#define  LLWU_F1_WUF1_SHIFT          1
//   Wakeup Flag For LLWU_P1
//     0b0 ==> LLWU_P1 input was not a wakeup source
//     0b1 ==> LLWU_P1 input was a wakeup source

#define  LLWU_F1_WUF2_MASK           0x4u
#define  LLWU_F1_WUF2_SHIFT          2
//   Wakeup Flag For LLWU_P2
//     0b0 ==> LLWU_P2 input was not a wakeup source
//     0b1 ==> LLWU_P2 input was a wakeup source

#define  LLWU_F1_WUF3_MASK           0x8u
#define  LLWU_F1_WUF3_SHIFT          3
//   Wakeup Flag For LLWU_P3
//     0b0 ==> LLWU_P3 input was not a wakeup source
//     0b1 ==> LLWU_P3 input was a wakeup source

#define  LLWU_F1_WUF4_MASK           0x10u
#define  LLWU_F1_WUF4_SHIFT          4
//   Wakeup Flag For LLWU_P4
//     0b0 ==> LLWU_P4 input was not a wakeup source
//     0b1 ==> LLWU_P4 input was a wakeup source

#define  LLWU_F1_WUF5_MASK           0x20u
#define  LLWU_F1_WUF5_SHIFT          5
//   Wakeup Flag For LLWU_P5
//     0b0 ==> LLWU_P5 input was not a wakeup source
//     0b1 ==> LLWU_P5 input was a wakeup source

#define  LLWU_F1_WUF6_MASK           0x40u
#define  LLWU_F1_WUF6_SHIFT          6
//   Wakeup Flag For LLWU_P6
//     0b0 ==> LLWU_P6 input was not a wakeup source
//     0b1 ==> LLWU_P6 input was a wakeup source

#define  LLWU_F1_WUF7_MASK           0x80u
#define  LLWU_F1_WUF7_SHIFT          7
//   Wakeup Flag For LLWU_P7
//     0b0 ==> LLWU_P7 input was not a wakeup source
//     0b1 ==> LLWU_P7 input was a wakeup source

#define  LLWU_F2_WUF8_MASK           0x1u
#define  LLWU_F2_WUF8_SHIFT          0
//   Wakeup Flag For LLWU_P8
//     0b0 ==> LLWU_P8 input was not a wakeup source
//     0b1 ==> LLWU_P8 input was a wakeup source

#define  LLWU_F2_WUF9_MASK           0x2u
#define  LLWU_F2_WUF9_SHIFT          1
//   Wakeup Flag For LLWU_P9
//     0b0 ==> LLWU_P9 input was not a wakeup source
//     0b1 ==> LLWU_P9 input was a wakeup source

#define  LLWU_F2_WUF10_MASK          0x4u
#define  LLWU_F2_WUF10_SHIFT         2
//   Wakeup Flag For LLWU_P10
//     0b0 ==> LLWU_P10 input was not a wakeup source
//     0b1 ==> LLWU_P10 input was a wakeup source

#define  LLWU_F2_WUF11_MASK          0x8u
#define  LLWU_F2_WUF11_SHIFT         3
//   Wakeup Flag For LLWU_P11
//     0b0 ==> LLWU_P11 input was not a wakeup source
//     0b1 ==> LLWU_P11 input was a wakeup source

#define  LLWU_F2_WUF12_MASK          0x10u
#define  LLWU_F2_WUF12_SHIFT         4
//   Wakeup Flag For LLWU_P12
//     0b0 ==> LLWU_P12 input was not a wakeup source
//     0b1 ==> LLWU_P12 input was a wakeup source

#define  LLWU_F2_WUF13_MASK          0x20u
#define  LLWU_F2_WUF13_SHIFT         5
//   Wakeup Flag For LLWU_P13
//     0b0 ==> LLWU_P13 input was not a wakeup source
//     0b1 ==> LLWU_P13 input was a wakeup source

#define  LLWU_F2_WUF14_MASK          0x40u
#define  LLWU_F2_WUF14_SHIFT         6
//   Wakeup Flag For LLWU_P14
//     0b0 ==> LLWU_P14 input was not a wakeup source
//     0b1 ==> LLWU_P14 input was a wakeup source

#define  LLWU_F2_WUF15_MASK          0x80u
#define  LLWU_F2_WUF15_SHIFT         7
//   Wakeup Flag For LLWU_P15
//     0b0 ==> LLWU_P15 input was not a wakeup source
//     0b1 ==> LLWU_P15 input was a wakeup source

#define  LLWU_F3_MWUF0_MASK          0x1u
#define  LLWU_F3_MWUF0_SHIFT         0
//   Wakeup flag For module 0
//     0b0 ==> Module 0 input was not a wakeup source
//     0b1 ==> Module 0 input was a wakeup source

#define  LLWU_F3_MWUF1_MASK          0x2u
#define  LLWU_F3_MWUF1_SHIFT         1
//   Wakeup flag For module 1
//     0b0 ==> Module 1 input was not a wakeup source
//     0b1 ==> Module 1 input was a wakeup source

#define  LLWU_F3_MWUF2_MASK          0x4u
#define  LLWU_F3_MWUF2_SHIFT         2
//   Wakeup flag For module 2
//     0b0 ==> Module 2 input was not a wakeup source
//     0b1 ==> Module 2 input was a wakeup source

#define  LLWU_F3_MWUF3_MASK          0x8u
#define  LLWU_F3_MWUF3_SHIFT         3
//   Wakeup flag For module 3
//     0b0 ==> Module 3 input was not a wakeup source
//     0b1 ==> Module 3 input was a wakeup source

#define  LLWU_F3_MWUF4_MASK          0x10u
#define  LLWU_F3_MWUF4_SHIFT         4
//   Wakeup flag For module 4
//     0b0 ==> Module 4 input was not a wakeup source
//     0b1 ==> Module 4 input was a wakeup source

#define  LLWU_F3_MWUF5_MASK          0x20u
#define  LLWU_F3_MWUF5_SHIFT         5
//   Wakeup flag For module 5
//     0b0 ==> Module 5 input was not a wakeup source
//     0b1 ==> Module 5 input was a wakeup source

#define  LLWU_F3_MWUF6_MASK          0x40u
#define  LLWU_F3_MWUF6_SHIFT         6
//   Wakeup flag For module 6
//     0b0 ==> Module 6 input was not a wakeup source
//     0b1 ==> Module 6 input was a wakeup source

#define  LLWU_F3_MWUF7_MASK          0x80u
#define  LLWU_F3_MWUF7_SHIFT         7
//   Wakeup flag For module 7
//     0b0 ==> Module 7 input was not a wakeup source
//     0b1 ==> Module 7 input was a wakeup source

#define  LLWU_FILT1_FILTSEL_MASK     0xFu
#define  LLWU_FILT1_FILTSEL_SHIFT    0
#define  LLWU_FILT1_FILTSEL(x)       (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTSEL_SHIFT))&LLWU_FILT1_FILTSEL_MASK)
//   Filter Pin Select
//     0b0000 ==> Select LLWU_P0 for filter
//     0b1111 ==> Select LLWU_P15 for filter

#define  LLWU_FILT1_FILTE_MASK       0x60u
#define  LLWU_FILT1_FILTE_SHIFT      5
#define  LLWU_FILT1_FILTE(x)         (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTE_SHIFT))&LLWU_FILT1_FILTE_MASK)
//   Digital Filter On External Pin
//     0b00 ==> Filter disabled
//     0b01 ==> Filter posedge detect enabled
//     0b10 ==> Filter negedge detect enabled
//     0b11 ==> Filter any edge detect enabled

#define  LLWU_FILT1_FILTF_MASK       0x80u
#define  LLWU_FILT1_FILTF_SHIFT      7
//   Filter Detect Flag
//     0b0 ==> Pin Filter 1 was not a wakeup source
//     0b1 ==> Pin Filter 1 was a wakeup source

#define  LLWU_FILT2_FILTSEL_MASK     0xFu
#define  LLWU_FILT2_FILTSEL_SHIFT    0
#define  LLWU_FILT2_FILTSEL(x)       (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTSEL_SHIFT))&LLWU_FILT2_FILTSEL_MASK)
//   Filter Pin Select
//     0b0000 ==> Select LLWU_P0 for filter
//     0b1111 ==> Select LLWU_P15 for filter

#define  LLWU_FILT2_FILTE_MASK       0x60u
#define  LLWU_FILT2_FILTE_SHIFT      5
#define  LLWU_FILT2_FILTE(x)         (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTE_SHIFT))&LLWU_FILT2_FILTE_MASK)
//   Digital Filter On External Pin
//     0b00 ==> Filter disabled
//     0b01 ==> Filter posedge detect enabled
//     0b10 ==> Filter negedge detect enabled
//     0b11 ==> Filter any edge detect enabled

#define  LLWU_FILT2_FILTF_MASK       0x80u
#define  LLWU_FILT2_FILTF_SHIFT      7
//   Filter Detect Flag
//     0b0 ==> Pin Filter 2 was not a wakeup source
//     0b1 ==> Pin Filter 2 was a wakeup source

#define  LPTMR0_CSR_TEN_MASK         0x1u
#define  LPTMR0_CSR_TEN_SHIFT        0
//   Timer Enable
//     0b0 ==> LPTMR is disabled and internal logic is reset.
//     0b1 ==> LPTMR is enabled.

#define  LPTMR0_CSR_TMS_MASK         0x2u
#define  LPTMR0_CSR_TMS_SHIFT        1
//   Timer Mode Select
//     0b0 ==> Time Counter mode.
//     0b1 ==> Pulse Counter mode.

#define  LPTMR0_CSR_TFC_MASK         0x4u
#define  LPTMR0_CSR_TFC_SHIFT        2
//   Timer Free-Running Counter
//     0b0 ==> CNR is reset whenever TCF is set.
//     0b1 ==> CNR is reset on overflow.

#define  LPTMR0_CSR_TPP_MASK         0x8u
#define  LPTMR0_CSR_TPP_SHIFT        3
//   Timer Pin Polarity
//     0b0 ==> Pulse Counter input source is active-high, and the CNR will increment on the rising-edge.
//     0b1 ==> Pulse Counter input source is active-low, and the CNR will increment on the falling-edge.

#define  LPTMR0_CSR_TPS_MASK         0x30u
#define  LPTMR0_CSR_TPS_SHIFT        4
#define  LPTMR0_CSR_TPS(x)           (((uint32_t)(((uint32_t)(x))<<LPTMR0_CSR_TPS_SHIFT))&LPTMR0_CSR_TPS_MASK)
//   Timer Pin Select
//     0b00 ==> Pulse counter input 0 is selected.
//     0b01 ==> Pulse counter input 1 is selected.
//     0b10 ==> Pulse counter input 2 is selected.
//     0b11 ==> Pulse counter input 3 is selected.

#define  LPTMR0_CSR_TIE_MASK         0x40u
#define  LPTMR0_CSR_TIE_SHIFT        6
//   Timer Interrupt Enable
//     0b0 ==> Timer interrupt disabled.
//     0b1 ==> Timer interrupt enabled.

#define  LPTMR0_CSR_TCF_MASK         0x80u
#define  LPTMR0_CSR_TCF_SHIFT        7
//   Timer Compare Flag
//     0b0 ==> The value of CNR is not equal to CMR and increments.
//     0b1 ==> The value of CNR is equal to CMR and increments.

#define  LPTMR0_PSR_PCS_MASK         0x3u
#define  LPTMR0_PSR_PCS_SHIFT        0
#define  LPTMR0_PSR_PCS(x)           (((uint32_t)(((uint32_t)(x))<<LPTMR0_PSR_PCS_SHIFT))&LPTMR0_PSR_PCS_MASK)
//   Prescaler Clock Select
//     0b00 ==> Prescaler/glitch filter clock 0 selected.
//     0b01 ==> Prescaler/glitch filter clock 1 selected.
//     0b10 ==> Prescaler/glitch filter clock 2 selected.
//     0b11 ==> Prescaler/glitch filter clock 3 selected.

#define  LPTMR0_PSR_PBYP_MASK        0x4u
#define  LPTMR0_PSR_PBYP_SHIFT       2
//   Prescaler Bypass
//     0b0 ==> Prescaler/glitch filter is enabled.
//     0b1 ==> Prescaler/glitch filter is bypassed.

#define  LPTMR0_PSR_PRESCALE_MASK    0x78u
#define  LPTMR0_PSR_PRESCALE_SHIFT   3
#define  LPTMR0_PSR_PRESCALE(x)      (((uint32_t)(((uint32_t)(x))<<LPTMR0_PSR_PRESCALE_SHIFT))&LPTMR0_PSR_PRESCALE_MASK)
//   Prescale Value
//     0b0000 ==> Prescaler divides the prescaler clock by 2; glitch filter does not support this configuration.
//     0b0001 ==> Prescaler divides the prescaler clock by 4; glitch filter recognizes change on input pin after 2 rising clock edges.
//     0b0010 ==> Prescaler divides the prescaler clock by 8; glitch filter recognizes change on input pin after 4 rising clock edges.
//     0b0011 ==> Prescaler divides the prescaler clock by 16; glitch filter recognizes change on input pin after 8 rising clock edges.
//     0b0100 ==> Prescaler divides the prescaler clock by 32; glitch filter recognizes change on input pin after 16 rising clock edges.
//     0b0101 ==> Prescaler divides the prescaler clock by 64; glitch filter recognizes change on input pin after 32 rising clock edges.
//     0b0110 ==> Prescaler divides the prescaler clock by 128; glitch filter recognizes change on input pin after 64 rising clock edges.
//     0b0111 ==> Prescaler divides the prescaler clock by 256; glitch filter recognizes change on input pin after 128 rising clock edges.
//     0b1000 ==> Prescaler divides the prescaler clock by 512; glitch filter recognizes change on input pin after 256 rising clock edges.
//     0b1001 ==> Prescaler divides the prescaler clock by 1024; glitch filter recognizes change on input pin after 512 rising clock edges.
//     0b1010 ==> Prescaler divides the prescaler clock by 2048; glitch filter recognizes change on input pin after 1024 rising clock edges.
//     0b1011 ==> Prescaler divides the prescaler clock by 4096; glitch filter recognizes change on input pin after 2048 rising clock edges.
//     0b1100 ==> Prescaler divides the prescaler clock by 8192; glitch filter recognizes change on input pin after 4096 rising clock edges.
//     0b1101 ==> Prescaler divides the prescaler clock by 16,384; glitch filter recognizes change on input pin after 8192 rising clock edges.
//     0b1110 ==> Prescaler divides the prescaler clock by 32,768; glitch filter recognizes change on input pin after 16,384 rising clock edges.
//     0b1111 ==> Prescaler divides the prescaler clock by 65,536; glitch filter recognizes change on input pin after 32,768 rising clock edges.

#define  LPTMR0_CMR_COMPARE_MASK     0xFFFFu
#define  LPTMR0_CMR_COMPARE_SHIFT    0
#define  LPTMR0_CMR_COMPARE(x)       (((uint32_t)(((uint32_t)(x))<<LPTMR0_CMR_COMPARE_SHIFT))&LPTMR0_CMR_COMPARE_MASK)
//   Compare Value

#define  LPTMR0_CNR_COUNTER_MASK     0xFFFFu
#define  LPTMR0_CNR_COUNTER_SHIFT    0
#define  LPTMR0_CNR_COUNTER(x)       (((uint32_t)(((uint32_t)(x))<<LPTMR0_CNR_COUNTER_SHIFT))&LPTMR0_CNR_COUNTER_MASK)
//   Counter Value

#define  MCG_C1_IREFSTEN_MASK        0x1u
#define  MCG_C1_IREFSTEN_SHIFT       0
//   Internal Reference Stop Enable
//     0b0 ==> Internal reference clock is disabled in Stop mode.
//     0b1 ==> Internal reference clock is enabled in Stop mode if IRCLKEN is set or if MCG is in FEI, FBI, or BLPI modes before entering Stop mode.

#define  MCG_C1_IRCLKEN_MASK         0x2u
#define  MCG_C1_IRCLKEN_SHIFT        1
//   Internal Reference Clock Enable
//     0b0 ==> MCGIRCLK inactive.
//     0b1 ==> MCGIRCLK active.

#define  MCG_C1_IREFS_MASK           0x4u
#define  MCG_C1_IREFS_SHIFT          2
//   Internal Reference Select
//     0b0 ==> External reference clock is selected.
//     0b1 ==> The slow internal reference clock is selected.

#define  MCG_C1_FRDIV_MASK           0x38u
#define  MCG_C1_FRDIV_SHIFT          3
#define  MCG_C1_FRDIV(x)             (((uint8_t)(((uint8_t)(x))<<MCG_C1_FRDIV_SHIFT))&MCG_C1_FRDIV_MASK)
//   FLL External Reference Divider
//     0b000 ==> If RANGE 0 = 0 , Divide Factor is 1; for all other RANGE 0 values, Divide Factor is 32.
//     0b001 ==> If RANGE 0 = 0 , Divide Factor is 2; for all other RANGE 0 values, Divide Factor is 64.
//     0b010 ==> If RANGE 0 = 0 , Divide Factor is 4; for all other RANGE 0 values, Divide Factor is 128.
//     0b011 ==> If RANGE 0 = 0 , Divide Factor is 8; for all other RANGE 0 values, Divide Factor is 256.
//     0b100 ==> If RANGE 0 = 0 , Divide Factor is 16; for all other RANGE 0 values, Divide Factor is 512.
//     0b101 ==> If RANGE 0 = 0 , Divide Factor is 32; for all other RANGE 0 values, Divide Factor is 1024.
//     0b110 ==> If RANGE 0 = 0 , Divide Factor is 64; for all other RANGE 0 values, Divide Factor is 1280 .
//     0b111 ==> If RANGE 0 = 0 , Divide Factor is 128; for all other RANGE 0 values, Divide Factor is 1536 .

#define  MCG_C1_CLKS_MASK            0xC0u
#define  MCG_C1_CLKS_SHIFT           6
#define  MCG_C1_CLKS(x)              (((uint8_t)(((uint8_t)(x))<<MCG_C1_CLKS_SHIFT))&MCG_C1_CLKS_MASK)
//   Clock Source Select
//     0b00 ==> Encoding 0 - Output of FLL or PLL is selected (depends on PLLS control bit).
//     0b01 ==> Encoding 1 - Internal reference clock is selected.
//     0b10 ==> Encoding 2 - External reference clock is selected.
//     0b11 ==> Encoding 3 - Reserved.

#define  MCG_C2_IRCS_MASK            0x1u
#define  MCG_C2_IRCS_SHIFT           0
//   Internal Reference Clock Select
//     0b0 ==> Slow internal reference clock selected.
//     0b1 ==> Fast internal reference clock selected.

#define  MCG_C2_LP_MASK              0x2u
#define  MCG_C2_LP_SHIFT             1
//   Low Power Select
//     0b0 ==> FLL or PLL is not disabled in bypass modes.
//     0b1 ==> FLL or PLL is disabled in bypass modes (lower power)

#define  MCG_C2_EREFS0_MASK          0x4u
#define  MCG_C2_EREFS0_SHIFT         2
//   External Reference Select
//     0b0 ==> External reference clock requested.
//     0b1 ==> Oscillator requested.

#define  MCG_C2_HGO0_MASK            0x8u
#define  MCG_C2_HGO0_SHIFT           3
//   High Gain Oscillator Select
//     0b0 ==> Configure crystal oscillator for low-power operation.
//     0b1 ==> Configure crystal oscillator for high-gain operation.

#define  MCG_C2_RANGE0_MASK          0x30u
#define  MCG_C2_RANGE0_SHIFT         4
#define  MCG_C2_RANGE0(x)            (((uint8_t)(((uint8_t)(x))<<MCG_C2_RANGE0_SHIFT))&MCG_C2_RANGE0_MASK)
//   Frequency Range Select
//     0b00 ==> Encoding 0 - Low frequency range selected for the crystal oscillator .
//     0b01 ==> Encoding 1 - High frequency range selected for the crystal oscillator .

#define  MCG_C2_LOCRE0_MASK          0x80u
#define  MCG_C2_LOCRE0_SHIFT         7
//   Loss of Clock Reset Enable
//     0b0 ==> Interrupt request is generated on a loss of OSC0 external reference clock.
//     0b1 ==> Generate a reset request on a loss of OSC0 external reference clock.

#define  MCG_C3_SCTRIM_MASK          0xFFu
#define  MCG_C3_SCTRIM_SHIFT         0
#define  MCG_C3_SCTRIM(x)            (((uint8_t)(((uint8_t)(x))<<MCG_C3_SCTRIM_SHIFT))&MCG_C3_SCTRIM_MASK)
//   Slow Internal Reference Clock Trim Setting

#define  MCG_C4_SCFTRIM_MASK         0x1u
#define  MCG_C4_SCFTRIM_SHIFT        0
//   Slow Internal Reference Clock Fine Trim

#define  MCG_C4_FCTRIM_MASK          0x1Eu
#define  MCG_C4_FCTRIM_SHIFT         1
#define  MCG_C4_FCTRIM(x)            (((uint8_t)(((uint8_t)(x))<<MCG_C4_FCTRIM_SHIFT))&MCG_C4_FCTRIM_MASK)
//   Fast Internal Reference Clock Trim Setting

#define  MCG_C4_DRST_DRS_MASK        0x60u
#define  MCG_C4_DRST_DRS_SHIFT       5
#define  MCG_C4_DRST_DRS(x)          (((uint8_t)(((uint8_t)(x))<<MCG_C4_DRST_DRS_SHIFT))&MCG_C4_DRST_DRS_MASK)
//   DCO Range Select
//     0b00 ==> Encoding 0 - Low range (reset default).
//     0b01 ==> Encoding 1 - Mid range.
//     0b10 ==> Encoding 2 - Mid-high range.
//     0b11 ==> Encoding 3 - High range.

#define  MCG_C4_DMX32_MASK           0x80u
#define  MCG_C4_DMX32_SHIFT          7
//   DCO Maximum Frequency with 32.768 kHz Reference
//     0b0 ==> DCO has a default range of 25%.
//     0b1 ==> DCO is fine-tuned for maximum frequency with 32.768 kHz reference.

#define  MCG_C5_PRDIV0_MASK          0x1Fu
#define  MCG_C5_PRDIV0_SHIFT         0
#define  MCG_C5_PRDIV0(x)            (((uint8_t)(((uint8_t)(x))<<MCG_C5_PRDIV0_SHIFT))&MCG_C5_PRDIV0_MASK)
//   PLL External Reference Divider

#define  MCG_C5_PLLSTEN0_MASK        0x20u
#define  MCG_C5_PLLSTEN0_SHIFT       5
//   PLL Stop Enable
//     0b0 ==> MCGPLLCLK is disabled in any of the Stop modes.
//     0b1 ==> MCGPLLCLK is enabled if system is in Normal Stop mode.

#define  MCG_C5_PLLCLKEN0_MASK       0x40u
#define  MCG_C5_PLLCLKEN0_SHIFT      6
//   PLL Clock Enable
//     0b0 ==> MCGPLLCLK is inactive.
//     0b1 ==> MCGPLLCLK is active.

#define  MCG_C6_VDIV0_MASK           0x1Fu
#define  MCG_C6_VDIV0_SHIFT          0
#define  MCG_C6_VDIV0(x)             (((uint8_t)(((uint8_t)(x))<<MCG_C6_VDIV0_SHIFT))&MCG_C6_VDIV0_MASK)
//   VCO 0 Divider

#define  MCG_C6_CME0_MASK            0x20u
#define  MCG_C6_CME0_SHIFT           5
//   Clock Monitor Enable
//     0b0 ==> External clock monitor is disabled for OSC0.
//     0b1 ==> External clock monitor is enabled for OSC0.

#define  MCG_C6_PLLS_MASK            0x40u
#define  MCG_C6_PLLS_SHIFT           6
//   PLL Select
//     0b0 ==> FLL is selected.
//     0b1 ==> PLL is selected (PRDIV 0 need to be programmed to the correct divider to generate a PLL reference clock in the range of 2-4 MHz prior to setting the PLLS bit).

#define  MCG_C6_LOLIE0_MASK          0x80u
#define  MCG_C6_LOLIE0_SHIFT         7
//   Loss of Lock Interrrupt Enable
//     0b0 ==> No interrupt request is generated on loss of lock.
//     0b1 ==> Generate an interrupt request on loss of lock.

#define  MCG_S_IRCST_MASK            0x1u
#define  MCG_S_IRCST_SHIFT           0
//   Internal Reference Clock Status
//     0b0 ==> Source of internal reference clock is the slow clock (32 kHz IRC).
//     0b1 ==> Source of internal reference clock is the fast clock (4 MHz IRC).

#define  MCG_S_OSCINIT0_MASK         0x2u
#define  MCG_S_OSCINIT0_SHIFT        1
//   OSC Initialization

#define  MCG_S_CLKST_MASK            0xCu
#define  MCG_S_CLKST_SHIFT           2
#define  MCG_S_CLKST(x)              (((uint8_t)(((uint8_t)(x))<<MCG_S_CLKST_SHIFT))&MCG_S_CLKST_MASK)
//   Clock Mode Status
//     0b00 ==> Encoding 0 - Output of the FLL is selected (reset default).
//     0b01 ==> Encoding 1 - Internal reference clock is selected.
//     0b10 ==> Encoding 2 - External reference clock is selected.
//     0b11 ==> Encoding 3 - Output of the PLL is selected.

#define  MCG_S_IREFST_MASK           0x10u
#define  MCG_S_IREFST_SHIFT          4
//   Internal Reference Status
//     0b0 ==> Source of FLL reference clock is the external reference clock.
//     0b1 ==> Source of FLL reference clock is the internal reference clock.

#define  MCG_S_PLLST_MASK            0x20u
#define  MCG_S_PLLST_SHIFT           5
//   PLL Select Status
//     0b0 ==> Source of PLLS clock is FLL clock.
//     0b1 ==> Source of PLLS clock is PLL clock.

#define  MCG_S_LOCK0_MASK            0x40u
#define  MCG_S_LOCK0_SHIFT           6
//   Lock Status
//     0b0 ==> PLL is currently unlocked.
//     0b1 ==> PLL is currently locked.

#define  MCG_S_LOLS0_MASK            0x80u
#define  MCG_S_LOLS0_SHIFT           7
//   Loss of Lock Status
//     0b0 ==> PLL has not lost lock since LOLS 0 was last cleared.
//     0b1 ==> PLL has lost lock since LOLS 0 was last cleared.

#define  MCG_SC_LOCS0_MASK           0x1u
#define  MCG_SC_LOCS0_SHIFT          0
//   OSC0 Loss of Clock Status
//     0b0 ==> Loss of OSC0 has not occurred.
//     0b1 ==> Loss of OSC0 has occurred.

#define  MCG_SC_FCRDIV_MASK          0xEu
#define  MCG_SC_FCRDIV_SHIFT         1
#define  MCG_SC_FCRDIV(x)            (((uint8_t)(((uint8_t)(x))<<MCG_SC_FCRDIV_SHIFT))&MCG_SC_FCRDIV_MASK)
//   Fast Clock Internal Reference Divider
//     0b000 ==> Divide Factor is 1
//     0b001 ==> Divide Factor is 2.
//     0b010 ==> Divide Factor is 4.
//     0b011 ==> Divide Factor is 8.
//     0b100 ==> Divide Factor is 16
//     0b101 ==> Divide Factor is 32
//     0b110 ==> Divide Factor is 64
//     0b111 ==> Divide Factor is 128.

#define  MCG_SC_FLTPRSRV_MASK        0x10u
#define  MCG_SC_FLTPRSRV_SHIFT       4
//   FLL Filter Preserve Enable
//     0b0 ==> FLL filter and FLL frequency will reset on changes to currect clock mode.
//     0b1 ==> Fll filter and FLL frequency retain their previous values during new clock mode change.

#define  MCG_SC_ATMF_MASK            0x20u
#define  MCG_SC_ATMF_SHIFT           5
//   Automatic Trim Machine Fail Flag
//     0b0 ==> Automatic Trim Machine completed normally.
//     0b1 ==> Automatic Trim Machine failed.

#define  MCG_SC_ATMS_MASK            0x40u
#define  MCG_SC_ATMS_SHIFT           6
//   Automatic Trim Machine Select
//     0b0 ==> 32 kHz Internal Reference Clock selected.
//     0b1 ==> 4 MHz Internal Reference Clock selected.

#define  MCG_SC_ATME_MASK            0x80u
#define  MCG_SC_ATME_SHIFT           7
//   Automatic Trim Machine Enable
//     0b0 ==> Auto Trim Machine disabled.
//     0b1 ==> Auto Trim Machine enabled.

#define  MCG_ATCVH_ATCVH_MASK        0xFFu
#define  MCG_ATCVH_ATCVH_SHIFT       0
#define  MCG_ATCVH_ATCVH(x)          (((uint8_t)(((uint8_t)(x))<<MCG_ATCVH_ATCVH_SHIFT))&MCG_ATCVH_ATCVH_MASK)
//   ATM Compare Value High

#define  MCG_ATCVL_ATCVL_MASK        0xFFu
#define  MCG_ATCVL_ATCVL_SHIFT       0
#define  MCG_ATCVL_ATCVL(x)          (((uint8_t)(((uint8_t)(x))<<MCG_ATCVL_ATCVL_SHIFT))&MCG_ATCVL_ATCVL_MASK)
//   ATM Compare Value Low

#define  MCG_C8_LOLRE_MASK           0x40u
#define  MCG_C8_LOLRE_SHIFT          6
//     0b0 ==> Interrupt request is generated on a PLL loss of lock indication. The PLL loss of lock interrupt enable bit must also be set to generate the interrupt request.
//     0b1 ==> Generate a reset request on a PLL loss of lock indication.

#define  MCM_PLASC_ASC_MASK          0xFFu
#define  MCM_PLASC_ASC_SHIFT         0
#define  MCM_PLASC_ASC(x)            (((uint16_t)(((uint16_t)(x))<<MCM_PLASC_ASC_SHIFT))&MCM_PLASC_ASC_MASK)
//   Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch's slave input port.
//     0b0 ==> A bus slave connection to AXBS input port n is absent
//     0b1 ==> A bus slave connection to AXBS input port n is present

#define  MCM_PLAMC_AMC_MASK          0xFFu
#define  MCM_PLAMC_AMC_SHIFT         0
#define  MCM_PLAMC_AMC(x)            (((uint16_t)(((uint16_t)(x))<<MCM_PLAMC_AMC_SHIFT))&MCM_PLAMC_AMC_MASK)
//   Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port.
//     0b0 ==> A bus master connection to AXBS input port n is absent
//     0b1 ==> A bus master connection to AXBS input port n is present

#define  MCM_PLACR_ARB_MASK          0x200u
#define  MCM_PLACR_ARB_SHIFT         9
//   Arbitration select
//     0b0 ==> Fixed-priority arbitration for the crossbar masters
//     0b1 ==> Round-robin arbitration for the crossbar masters

#define  MCM_PLACR_CFCC_MASK         0x400u
#define  MCM_PLACR_CFCC_SHIFT        10
//   Clear Flash Controller Cache

#define  MCM_PLACR_DFCDA_MASK        0x800u
#define  MCM_PLACR_DFCDA_SHIFT       11
//   Disable Flash Controller Data Caching
//     0b0 ==> Enable flash controller data caching
//     0b1 ==> Disable flash controller data caching.

#define  MCM_PLACR_DFCIC_MASK        0x1000u
#define  MCM_PLACR_DFCIC_SHIFT       12
//   Disable Flash Controller Instruction Caching
//     0b0 ==> Enable flash controller instruction caching.
//     0b1 ==> Disable flash controller instruction caching.

#define  MCM_PLACR_DFCC_MASK         0x2000u
#define  MCM_PLACR_DFCC_SHIFT        13
//   Disable Flash Controller Cache
//     0b0 ==> Enable flash controller cache.
//     0b1 ==> Disable flash controller cache.

#define  MCM_PLACR_EFDS_MASK         0x4000u
#define  MCM_PLACR_EFDS_SHIFT        14
//   Enable Flash Data Speculation
//     0b0 ==> Disable flash data speculation.
//     0b1 ==> Enable flash data speculation.

#define  MCM_PLACR_DFCS_MASK         0x8000u
#define  MCM_PLACR_DFCS_SHIFT        15
//   Disable Flash Controller Speculation
//     0b0 ==> Enable flash controller speculation.
//     0b1 ==> Disable flash controller speculation.

#define  MCM_PLACR_ESFC_MASK         0x10000u
#define  MCM_PLACR_ESFC_SHIFT        16
//   Enable Stalling Flash Controller
//     0b0 ==> Disable stalling flash controller when flash is busy.
//     0b1 ==> Enable stalling flash controller when flash is busy.

#define  MCM_CPO_CPOREQ_MASK         0x1u
#define  MCM_CPO_CPOREQ_SHIFT        0
//   Compute Operation request
//     0b0 ==> Request is cleared.
//     0b1 ==> Request Compute Operation.

#define  MCM_CPO_CPOACK_MASK         0x2u
#define  MCM_CPO_CPOACK_SHIFT        1
//   Compute Operation acknowledge

#define  MCM_CPO_CPOWOI_MASK         0x4u
#define  MCM_CPO_CPOWOI_SHIFT        2
//   Compute Operation wakeup on interrupt

#define  MTB_POSITION_WRAP_MASK      0x4u
#define  MTB_POSITION_WRAP_SHIFT     2

#define  MTB_POSITION_POINTER_MASK   0xFFFFFFF8u
#define  MTB_POSITION_POINTER_SHIFT  3
#define  MTB_POSITION_POINTER(x)     (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_POINTER_SHIFT))&MTB_POSITION_POINTER_MASK)
//   Trace Packet Address Pointer

#define  MTB_MASTER_MASK_MASK        0x1Fu
#define  MTB_MASTER_MASK_SHIFT       0
#define  MTB_MASTER_MASK(x)          (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_MASK_SHIFT))&MTB_MASTER_MASK_MASK)
//   Mask

#define  MTB_MASTER_TSTARTEN_MASK    0x20u
#define  MTB_MASTER_TSTARTEN_SHIFT   5
//   Trace start input enable

#define  MTB_MASTER_TSTOPEN_MASK     0x40u
#define  MTB_MASTER_TSTOPEN_SHIFT    6
//   Trace stop input enable

#define  MTB_MASTER_SFRWPRIV_MASK    0x80u
#define  MTB_MASTER_SFRWPRIV_SHIFT   7
//   Special Function Register Write Privilege bit

#define  MTB_MASTER_RAMPRIV_MASK     0x100u
#define  MTB_MASTER_RAMPRIV_SHIFT    8
//   RAM privilege bit

#define  MTB_MASTER_HALTREQ_MASK     0x200u
#define  MTB_MASTER_HALTREQ_SHIFT    9
//   Halt request bit

#define  MTB_MASTER_EN_MASK          0x80000000u
#define  MTB_MASTER_EN_SHIFT         31
//   Main trace enable bit

#define  MTB_FLOW_AUTOSTOP_MASK      0x1u
#define  MTB_FLOW_AUTOSTOP_SHIFT     0

#define  MTB_FLOW_AUTOHALT_MASK      0x2u
#define  MTB_FLOW_AUTOHALT_SHIFT     1

#define  MTB_FLOW_WATERMARK_MASK     0xFFFFFFF8u
#define  MTB_FLOW_WATERMARK_SHIFT    3
#define  MTB_FLOW_WATERMARK(x)       (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_WATERMARK_SHIFT))&MTB_FLOW_WATERMARK_MASK)
//   WATERMARK value

#define  MTB_BASE_BASEADDR_MASK      0xFFFFFFFFu
#define  MTB_BASE_BASEADDR_SHIFT     0
#define  MTB_BASE_BASEADDR(x)        (((uint32_t)(((uint32_t)(x))<<MTB_BASE_BASEADDR_SHIFT))&MTB_BASE_BASEADDR_MASK)

#define  MTB_MODECTRL_MODECTRL_MASK  0xFFFFFFFFu
#define  MTB_MODECTRL_MODECTRL_SHIFT 0
#define  MTB_MODECTRL_MODECTRL(x)    (((uint32_t)(((uint32_t)(x))<<MTB_MODECTRL_MODECTRL_SHIFT))&MTB_MODECTRL_MODECTRL_MASK)

#define  MTB_TAGSET_TAGSET_MASK      0xFFFFFFFFu
#define  MTB_TAGSET_TAGSET_SHIFT     0
#define  MTB_TAGSET_TAGSET(x)        (((uint32_t)(((uint32_t)(x))<<MTB_TAGSET_TAGSET_SHIFT))&MTB_TAGSET_TAGSET_MASK)

#define  MTB_TAGCLEAR_TAGCLEAR_MASK  0xFFFFFFFFu
#define  MTB_TAGCLEAR_TAGCLEAR_SHIFT 0
#define  MTB_TAGCLEAR_TAGCLEAR(x)    (((uint32_t)(((uint32_t)(x))<<MTB_TAGCLEAR_TAGCLEAR_SHIFT))&MTB_TAGCLEAR_TAGCLEAR_MASK)

#define  MTB_LOCKACCESS_LOCKACCESS_MASK 0xFFFFFFFFu
#define  MTB_LOCKACCESS_LOCKACCESS_SHIFT 0
#define  MTB_LOCKACCESS_LOCKACCESS(x) (((uint32_t)(((uint32_t)(x))<<MTB_LOCKACCESS_LOCKACCESS_SHIFT))&MTB_LOCKACCESS_LOCKACCESS_MASK)

#define  MTB_LOCKSTAT_LOCKSTAT_MASK  0xFFFFFFFFu
#define  MTB_LOCKSTAT_LOCKSTAT_SHIFT 0
#define  MTB_LOCKSTAT_LOCKSTAT(x)    (((uint32_t)(((uint32_t)(x))<<MTB_LOCKSTAT_LOCKSTAT_SHIFT))&MTB_LOCKSTAT_LOCKSTAT_MASK)

#define  MTB_AUTHSTAT_BIT0_MASK      0x1u
#define  MTB_AUTHSTAT_BIT0_SHIFT     0

#define  MTB_AUTHSTAT_BIT1_MASK      0x2u
#define  MTB_AUTHSTAT_BIT1_SHIFT     1

#define  MTB_AUTHSTAT_BIT2_MASK      0x4u
#define  MTB_AUTHSTAT_BIT2_SHIFT     2

#define  MTB_AUTHSTAT_BIT3_MASK      0x8u
#define  MTB_AUTHSTAT_BIT3_SHIFT     3

#define  MTB_DEVICEARCH_DEVICEARCH_MASK 0xFFFFFFFFu
#define  MTB_DEVICEARCH_DEVICEARCH_SHIFT 0
#define  MTB_DEVICEARCH_DEVICEARCH(x) (((uint32_t)(((uint32_t)(x))<<MTB_DEVICEARCH_DEVICEARCH_SHIFT))&MTB_DEVICEARCH_DEVICEARCH_MASK)

#define  MTB_DEVICECFG_DEVICECFG_MASK 0xFFFFFFFFu
#define  MTB_DEVICECFG_DEVICECFG_SHIFT 0
#define  MTB_DEVICECFG_DEVICECFG(x)  (((uint32_t)(((uint32_t)(x))<<MTB_DEVICECFG_DEVICECFG_SHIFT))&MTB_DEVICECFG_DEVICECFG_MASK)

#define  MTB_DEVICETYPID_DEVICETYPID_MASK 0xFFFFFFFFu
#define  MTB_DEVICETYPID_DEVICETYPID_SHIFT 0
#define  MTB_DEVICETYPID_DEVICETYPID(x) (((uint32_t)(((uint32_t)(x))<<MTB_DEVICETYPID_DEVICETYPID_SHIFT))&MTB_DEVICETYPID_DEVICETYPID_MASK)

#define  MTB_PERIPHID4_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID4_PERIPHID_SHIFT 0
#define  MTB_PERIPHID4_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID4_PERIPHID_SHIFT))&MTB_PERIPHID4_PERIPHID_MASK)

#define  MTB_PERIPHID5_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID5_PERIPHID_SHIFT 0
#define  MTB_PERIPHID5_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID5_PERIPHID_SHIFT))&MTB_PERIPHID5_PERIPHID_MASK)

#define  MTB_PERIPHID6_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID6_PERIPHID_SHIFT 0
#define  MTB_PERIPHID6_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID6_PERIPHID_SHIFT))&MTB_PERIPHID6_PERIPHID_MASK)

#define  MTB_PERIPHID7_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID7_PERIPHID_SHIFT 0
#define  MTB_PERIPHID7_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID7_PERIPHID_SHIFT))&MTB_PERIPHID7_PERIPHID_MASK)

#define  MTB_PERIPHID0_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID0_PERIPHID_SHIFT 0
#define  MTB_PERIPHID0_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID0_PERIPHID_SHIFT))&MTB_PERIPHID0_PERIPHID_MASK)

#define  MTB_PERIPHID1_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID1_PERIPHID_SHIFT 0
#define  MTB_PERIPHID1_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID1_PERIPHID_SHIFT))&MTB_PERIPHID1_PERIPHID_MASK)

#define  MTB_PERIPHID2_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID2_PERIPHID_SHIFT 0
#define  MTB_PERIPHID2_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID2_PERIPHID_SHIFT))&MTB_PERIPHID2_PERIPHID_MASK)

#define  MTB_PERIPHID3_PERIPHID_MASK 0xFFFFFFFFu
#define  MTB_PERIPHID3_PERIPHID_SHIFT 0
#define  MTB_PERIPHID3_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID3_PERIPHID_SHIFT))&MTB_PERIPHID3_PERIPHID_MASK)

#define  MTB_COMPID0_COMPID_MASK     0xFFFFFFFFu
#define  MTB_COMPID0_COMPID_SHIFT    0
#define  MTB_COMPID0_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<MTB_COMPID0_COMPID_SHIFT))&MTB_COMPID0_COMPID_MASK)
//   Component ID

#define  MTB_COMPID1_COMPID_MASK     0xFFFFFFFFu
#define  MTB_COMPID1_COMPID_SHIFT    0
#define  MTB_COMPID1_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<MTB_COMPID1_COMPID_SHIFT))&MTB_COMPID1_COMPID_MASK)
//   Component ID

#define  MTB_COMPID2_COMPID_MASK     0xFFFFFFFFu
#define  MTB_COMPID2_COMPID_SHIFT    0
#define  MTB_COMPID2_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<MTB_COMPID2_COMPID_SHIFT))&MTB_COMPID2_COMPID_MASK)
//   Component ID

#define  MTB_COMPID3_COMPID_MASK     0xFFFFFFFFu
#define  MTB_COMPID3_COMPID_SHIFT    0
#define  MTB_COMPID3_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<MTB_COMPID3_COMPID_SHIFT))&MTB_COMPID3_COMPID_MASK)
//   Component ID

#define  MTBDWT_CTRL_DWTCFGCTRL_MASK 0xFFFFFFFu
#define  MTBDWT_CTRL_DWTCFGCTRL_SHIFT 0
#define  MTBDWT_CTRL_DWTCFGCTRL(x)   (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_DWTCFGCTRL_SHIFT))&MTBDWT_CTRL_DWTCFGCTRL_MASK)
//   DWT configuration controls

#define  MTBDWT_CTRL_NUMCMP_MASK     0xF0000000u
#define  MTBDWT_CTRL_NUMCMP_SHIFT    28
#define  MTBDWT_CTRL_NUMCMP(x)       (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_NUMCMP_SHIFT))&MTBDWT_CTRL_NUMCMP_MASK)
//   Number of comparators

#define  MTBDWT_COMP0_COMP_MASK      0xFFFFFFFFu
#define  MTBDWT_COMP0_COMP_SHIFT     0
#define  MTBDWT_COMP0_COMP(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMP0_COMP_SHIFT))&MTBDWT_COMP0_COMP_MASK)
//   Reference value for comparison

#define  MTBDWT_MASK0_MASK_MASK      0x1Fu
#define  MTBDWT_MASK0_MASK_SHIFT     0
#define  MTBDWT_MASK0_MASK(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_MASK0_MASK_SHIFT))&MTBDWT_MASK0_MASK_MASK)
//   MASK

#define  MTBDWT_MASK1_MASK_MASK      0x1Fu
#define  MTBDWT_MASK1_MASK_SHIFT     0
#define  MTBDWT_MASK1_MASK(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_MASK1_MASK_SHIFT))&MTBDWT_MASK1_MASK_MASK)
//   MASK

#define  MTBDWT_COMP1_COMP_MASK      0xFFFFFFFFu
#define  MTBDWT_COMP1_COMP_SHIFT     0
#define  MTBDWT_COMP1_COMP(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMP1_COMP_SHIFT))&MTBDWT_COMP1_COMP_MASK)
//   Reference value for comparison

#define  MTBDWT_FCT1_FUNCTION_MASK   0xFu
#define  MTBDWT_FCT1_FUNCTION_SHIFT  0
#define  MTBDWT_FCT1_FUNCTION(x)     (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT1_FUNCTION_SHIFT))&MTBDWT_FCT1_FUNCTION_MASK)
//   Function
//     0b0000 ==> Disabled.
//     0b0100 ==> Instruction fetch.
//     0b0101 ==> Data operand read.
//     0b0110 ==> Data operand write.
//     0b0111 ==> Data operand (read + write).

#define  MTBDWT_FCT1_MATCHED_MASK    0x1000000u
#define  MTBDWT_FCT1_MATCHED_SHIFT   24
//   Comparator match
//     0b0 ==> No match.
//     0b1 ==> Match occurred.

#define  MTBDWT_TBCTRL_ACOMP0_MASK   0x1u
#define  MTBDWT_TBCTRL_ACOMP0_SHIFT  0
//   Action based on Comparator 0 match
//     0b0 ==> Trigger TSTOP based on the assertion of MTBDWT_FUNCTION0[MATCHED].
//     0b1 ==> Trigger TSTART based on the assertion of MTBDWT_FUNCTION0[MATCHED].

#define  MTBDWT_TBCTRL_ACOMP1_MASK   0x2u
#define  MTBDWT_TBCTRL_ACOMP1_SHIFT  1
//   Action based on Comparator 1 match
//     0b0 ==> Trigger TSTOP based on the assertion of MTBDWT_FUNCTION1[MATCHED].
//     0b1 ==> Trigger TSTART based on the assertion of MTBDWT_FUNCTION1[MATCHED].

#define  MTBDWT_TBCTRL_NUMCOMP_MASK  0xF0000000u
#define  MTBDWT_TBCTRL_NUMCOMP_SHIFT 28
#define  MTBDWT_TBCTRL_NUMCOMP(x)    (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_NUMCOMP_SHIFT))&MTBDWT_TBCTRL_NUMCOMP_MASK)
//   Number of Comparators

#define  MTBDWT_DEVICECFG_DEVICECFG_MASK 0xFFFFFFFFu
#define  MTBDWT_DEVICECFG_DEVICECFG_SHIFT 0
#define  MTBDWT_DEVICECFG_DEVICECFG(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICECFG_DEVICECFG_SHIFT))&MTBDWT_DEVICECFG_DEVICECFG_MASK)

#define  MTBDWT_DEVICETYPID_DEVICETYPID_MASK 0xFFFFFFFFu
#define  MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT 0
#define  MTBDWT_DEVICETYPID_DEVICETYPID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT))&MTBDWT_DEVICETYPID_DEVICETYPID_MASK)

#define  MTBDWT_PERIPHID4_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID4_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID4_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID4_PERIPHID_SHIFT))&MTBDWT_PERIPHID4_PERIPHID_MASK)

#define  MTBDWT_PERIPHID5_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID5_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID5_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID5_PERIPHID_SHIFT))&MTBDWT_PERIPHID5_PERIPHID_MASK)

#define  MTBDWT_PERIPHID6_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID6_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID6_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID6_PERIPHID_SHIFT))&MTBDWT_PERIPHID6_PERIPHID_MASK)

#define  MTBDWT_PERIPHID7_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID7_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID7_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID7_PERIPHID_SHIFT))&MTBDWT_PERIPHID7_PERIPHID_MASK)

#define  MTBDWT_PERIPHID0_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID0_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID0_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID0_PERIPHID_SHIFT))&MTBDWT_PERIPHID0_PERIPHID_MASK)

#define  MTBDWT_PERIPHID1_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID1_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID1_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID1_PERIPHID_SHIFT))&MTBDWT_PERIPHID1_PERIPHID_MASK)

#define  MTBDWT_PERIPHID2_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID2_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID2_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID2_PERIPHID_SHIFT))&MTBDWT_PERIPHID2_PERIPHID_MASK)

#define  MTBDWT_PERIPHID3_PERIPHID_MASK 0xFFFFFFFFu
#define  MTBDWT_PERIPHID3_PERIPHID_SHIFT 0
#define  MTBDWT_PERIPHID3_PERIPHID(x) (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID3_PERIPHID_SHIFT))&MTBDWT_PERIPHID3_PERIPHID_MASK)

#define  MTBDWT_COMPID0_COMPID_MASK  0xFFFFFFFFu
#define  MTBDWT_COMPID0_COMPID_SHIFT 0
#define  MTBDWT_COMPID0_COMPID(x)    (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID0_COMPID_SHIFT))&MTBDWT_COMPID0_COMPID_MASK)
//   Component ID

#define  MTBDWT_COMPID1_COMPID_MASK  0xFFFFFFFFu
#define  MTBDWT_COMPID1_COMPID_SHIFT 0
#define  MTBDWT_COMPID1_COMPID(x)    (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID1_COMPID_SHIFT))&MTBDWT_COMPID1_COMPID_MASK)
//   Component ID

#define  MTBDWT_COMPID2_COMPID_MASK  0xFFFFFFFFu
#define  MTBDWT_COMPID2_COMPID_SHIFT 0
#define  MTBDWT_COMPID2_COMPID(x)    (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID2_COMPID_SHIFT))&MTBDWT_COMPID2_COMPID_MASK)
//   Component ID

#define  MTBDWT_COMPID3_COMPID_MASK  0xFFFFFFFFu
#define  MTBDWT_COMPID3_COMPID_SHIFT 0
#define  MTBDWT_COMPID3_COMPID(x)    (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID3_COMPID_SHIFT))&MTBDWT_COMPID3_COMPID_MASK)
//   Component ID

#define  OSC0_CR_SC16P_MASK          0x1u
#define  OSC0_CR_SC16P_SHIFT         0
//   Oscillator 16 pF Capacitor Load Configure
//     0b0 ==> Disable the selection.
//     0b1 ==> Add 16 pF capacitor to the oscillator load.

#define  OSC0_CR_SC8P_MASK           0x2u
#define  OSC0_CR_SC8P_SHIFT          1
//   Oscillator 8 pF Capacitor Load Configure
//     0b0 ==> Disable the selection.
//     0b1 ==> Add 8 pF capacitor to the oscillator load.

#define  OSC0_CR_SC4P_MASK           0x4u
#define  OSC0_CR_SC4P_SHIFT          2
//   Oscillator 4 pF Capacitor Load Configure
//     0b0 ==> Disable the selection.
//     0b1 ==> Add 4 pF capacitor to the oscillator load.

#define  OSC0_CR_SC2P_MASK           0x8u
#define  OSC0_CR_SC2P_SHIFT          3
//   Oscillator 2 pF Capacitor Load Configure
//     0b0 ==> Disable the selection.
//     0b1 ==> Add 2 pF capacitor to the oscillator load.

#define  OSC0_CR_EREFSTEN_MASK       0x20u
#define  OSC0_CR_EREFSTEN_SHIFT      5
//   External Reference Stop Enable
//     0b0 ==> External reference clock is disabled in Stop mode.
//     0b1 ==> External reference clock stays enabled in Stop mode if ERCLKEN is set before entering Stop mode.

#define  OSC0_CR_ERCLKEN_MASK        0x80u
#define  OSC0_CR_ERCLKEN_SHIFT       7
//   External Reference Enable
//     0b0 ==> External reference clock is inactive.
//     0b1 ==> External reference clock is enabled.

#define  PIT_MCR_FRZ_MASK            0x1u
#define  PIT_MCR_FRZ_SHIFT           0
//   Freeze
//     0b0 ==> Timers continue to run in Debug mode.
//     0b1 ==> Timers are stopped in Debug mode.

#define  PIT_MCR_MDIS_MASK           0x2u
#define  PIT_MCR_MDIS_SHIFT          1
//   Module Disable
//     0b0 ==> Clock for PIT timers is enabled.
//     0b1 ==> Clock for PIT timers is disabled.

#define  PIT_LTMR64H_LTH_MASK        0xFFFFFFFFu
#define  PIT_LTMR64H_LTH_SHIFT       0
#define  PIT_LTMR64H_LTH(x)          (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64H_LTH_SHIFT))&PIT_LTMR64H_LTH_MASK)
//   Life Timer value

#define  PIT_LTMR64L_LTL_MASK        0xFFFFFFFFu
#define  PIT_LTMR64L_LTL_SHIFT       0
#define  PIT_LTMR64L_LTL(x)          (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64L_LTL_SHIFT))&PIT_LTMR64L_LTL_MASK)
//   Life Timer value

#define  PIT_LDVAL0_TSV_MASK         0xFFFFFFFFu
#define  PIT_LDVAL0_TSV_SHIFT        0
#define  PIT_LDVAL0_TSV(x)           (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL0_TSV_SHIFT))&PIT_LDVAL0_TSV_MASK)
//   Timer Start Value

#define  PIT_CVAL0_TVL_MASK          0xFFFFFFFFu
#define  PIT_CVAL0_TVL_SHIFT         0
#define  PIT_CVAL0_TVL(x)            (((uint32_t)(((uint32_t)(x))<<PIT_CVAL0_TVL_SHIFT))&PIT_CVAL0_TVL_MASK)
//   Current Timer Value

#define  PIT_TCTRL0_TEN_MASK         0x1u
#define  PIT_TCTRL0_TEN_SHIFT        0
//   Timer Enable
//     0b0 ==> Timer n is disabled.
//     0b1 ==> Timer n is enabled.

#define  PIT_TCTRL0_TIE_MASK         0x2u
#define  PIT_TCTRL0_TIE_SHIFT        1
//   Timer Interrupt Enable
//     0b0 ==> Interrupt requests from Timer n are disabled.
//     0b1 ==> Interrupt will be requested whenever TIF is set.

#define  PIT_TCTRL0_CHN_MASK         0x4u
#define  PIT_TCTRL0_CHN_SHIFT        2
//   Chain Mode
//     0b0 ==> Timer is not chained.
//     0b1 ==> Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1.

#define  PIT_TFLG0_TIF_MASK          0x1u
#define  PIT_TFLG0_TIF_SHIFT         0
//   Timer Interrupt Flag
//     0b0 ==> Timeout has not yet occurred.
//     0b1 ==> Timeout has occurred.

#define  PIT_LDVAL1_TSV_MASK         0xFFFFFFFFu
#define  PIT_LDVAL1_TSV_SHIFT        0
#define  PIT_LDVAL1_TSV(x)           (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL1_TSV_SHIFT))&PIT_LDVAL1_TSV_MASK)
//   Timer Start Value

#define  PIT_CVAL1_TVL_MASK          0xFFFFFFFFu
#define  PIT_CVAL1_TVL_SHIFT         0
#define  PIT_CVAL1_TVL(x)            (((uint32_t)(((uint32_t)(x))<<PIT_CVAL1_TVL_SHIFT))&PIT_CVAL1_TVL_MASK)
//   Current Timer Value

#define  PIT_TCTRL1_TEN_MASK         0x1u
#define  PIT_TCTRL1_TEN_SHIFT        0
//   Timer Enable
//     0b0 ==> Timer n is disabled.
//     0b1 ==> Timer n is enabled.

#define  PIT_TCTRL1_TIE_MASK         0x2u
#define  PIT_TCTRL1_TIE_SHIFT        1
//   Timer Interrupt Enable
//     0b0 ==> Interrupt requests from Timer n are disabled.
//     0b1 ==> Interrupt will be requested whenever TIF is set.

#define  PIT_TCTRL1_CHN_MASK         0x4u
#define  PIT_TCTRL1_CHN_SHIFT        2
//   Chain Mode
//     0b0 ==> Timer is not chained.
//     0b1 ==> Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1.

#define  PIT_TFLG1_TIF_MASK          0x1u
#define  PIT_TFLG1_TIF_SHIFT         0
//   Timer Interrupt Flag
//     0b0 ==> Timeout has not yet occurred.
//     0b1 ==> Timeout has occurred.

#define  PIT_LDVAL2_TSV_MASK         0xFFFFFFFFu
#define  PIT_LDVAL2_TSV_SHIFT        0
#define  PIT_LDVAL2_TSV(x)           (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL2_TSV_SHIFT))&PIT_LDVAL2_TSV_MASK)
//   Timer Start Value

#define  PIT_CVAL2_TVL_MASK          0xFFFFFFFFu
#define  PIT_CVAL2_TVL_SHIFT         0
#define  PIT_CVAL2_TVL(x)            (((uint32_t)(((uint32_t)(x))<<PIT_CVAL2_TVL_SHIFT))&PIT_CVAL2_TVL_MASK)
//   Current Timer Value

#define  PIT_TCTRL2_TEN_MASK         0x1u
#define  PIT_TCTRL2_TEN_SHIFT        0
//   Timer Enable
//     0b0 ==> Timer n is disabled.
//     0b1 ==> Timer n is enabled.

#define  PIT_TCTRL2_TIE_MASK         0x2u
#define  PIT_TCTRL2_TIE_SHIFT        1
//   Timer Interrupt Enable
//     0b0 ==> Interrupt requests from Timer n are disabled.
//     0b1 ==> Interrupt will be requested whenever TIF is set.

#define  PIT_TCTRL2_CHN_MASK         0x4u
#define  PIT_TCTRL2_CHN_SHIFT        2
//   Chain Mode
//     0b0 ==> Timer is not chained.
//     0b1 ==> Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1.

#define  PIT_TFLG2_TIF_MASK          0x1u
#define  PIT_TFLG2_TIF_SHIFT         0
//   Timer Interrupt Flag
//     0b0 ==> Timeout has not yet occurred.
//     0b1 ==> Timeout has occurred.

#define  PIT_LDVAL3_TSV_MASK         0xFFFFFFFFu
#define  PIT_LDVAL3_TSV_SHIFT        0
#define  PIT_LDVAL3_TSV(x)           (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL3_TSV_SHIFT))&PIT_LDVAL3_TSV_MASK)
//   Timer Start Value

#define  PIT_CVAL3_TVL_MASK          0xFFFFFFFFu
#define  PIT_CVAL3_TVL_SHIFT         0
#define  PIT_CVAL3_TVL(x)            (((uint32_t)(((uint32_t)(x))<<PIT_CVAL3_TVL_SHIFT))&PIT_CVAL3_TVL_MASK)
//   Current Timer Value

#define  PIT_TCTRL3_TEN_MASK         0x1u
#define  PIT_TCTRL3_TEN_SHIFT        0
//   Timer Enable
//     0b0 ==> Timer n is disabled.
//     0b1 ==> Timer n is enabled.

#define  PIT_TCTRL3_TIE_MASK         0x2u
#define  PIT_TCTRL3_TIE_SHIFT        1
//   Timer Interrupt Enable
//     0b0 ==> Interrupt requests from Timer n are disabled.
//     0b1 ==> Interrupt will be requested whenever TIF is set.

#define  PIT_TCTRL3_CHN_MASK         0x4u
#define  PIT_TCTRL3_CHN_SHIFT        2
//   Chain Mode
//     0b0 ==> Timer is not chained.
//     0b1 ==> Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1.

#define  PIT_TFLG3_TIF_MASK          0x1u
#define  PIT_TFLG3_TIF_SHIFT         0
//   Timer Interrupt Flag
//     0b0 ==> Timeout has not yet occurred.
//     0b1 ==> Timeout has occurred.

#define  PMC_LVDSC1_LVDV_MASK        0x3u
#define  PMC_LVDSC1_LVDV_SHIFT       0
#define  PMC_LVDSC1_LVDV(x)          (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDV_SHIFT))&PMC_LVDSC1_LVDV_MASK)
//   Low-Voltage Detect Voltage Select
//     0b00 ==> Low trip point selected (V LVD = V LVDL )
//     0b01 ==> High trip point selected (V LVD = V LVDH )
//     0b10 ==> Reserved
//     0b11 ==> Reserved

#define  PMC_LVDSC1_LVDRE_MASK       0x10u
#define  PMC_LVDSC1_LVDRE_SHIFT      4
//   Low-Voltage Detect Reset Enable
//     0b0 ==> LVDF does not generate hardware resets
//     0b1 ==> Force an MCU reset when LVDF = 1

#define  PMC_LVDSC1_LVDIE_MASK       0x20u
#define  PMC_LVDSC1_LVDIE_SHIFT      5
//   Low-Voltage Detect Interrupt Enable
//     0b0 ==> Hardware interrupt disabled (use polling)
//     0b1 ==> Request a hardware interrupt when LVDF = 1

#define  PMC_LVDSC1_LVDACK_MASK      0x40u
#define  PMC_LVDSC1_LVDACK_SHIFT     6
//   Low-Voltage Detect Acknowledge

#define  PMC_LVDSC1_LVDF_MASK        0x80u
#define  PMC_LVDSC1_LVDF_SHIFT       7
//   Low-Voltage Detect Flag
//     0b0 ==> Low-voltage event not detected
//     0b1 ==> Low-voltage event detected

#define  PMC_LVDSC2_LVWV_MASK        0x3u
#define  PMC_LVDSC2_LVWV_SHIFT       0
#define  PMC_LVDSC2_LVWV(x)          (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWV_SHIFT))&PMC_LVDSC2_LVWV_MASK)
//   Low-Voltage Warning Voltage Select
//     0b00 ==> Low trip point selected (VLVW = VLVW1)
//     0b01 ==> Mid 1 trip point selected (VLVW = VLVW2)
//     0b10 ==> Mid 2 trip point selected (VLVW = VLVW3)
//     0b11 ==> High trip point selected (VLVW = VLVW4)

#define  PMC_LVDSC2_LVWIE_MASK       0x20u
#define  PMC_LVDSC2_LVWIE_SHIFT      5
//   Low-Voltage Warning Interrupt Enable
//     0b0 ==> Hardware interrupt disabled (use polling)
//     0b1 ==> Request a hardware interrupt when LVWF = 1

#define  PMC_LVDSC2_LVWACK_MASK      0x40u
#define  PMC_LVDSC2_LVWACK_SHIFT     6
//   Low-Voltage Warning Acknowledge

#define  PMC_LVDSC2_LVWF_MASK        0x80u
#define  PMC_LVDSC2_LVWF_SHIFT       7
//   Low-Voltage Warning Flag
//     0b0 ==> Low-voltage warning event not detected
//     0b1 ==> Low-voltage warning event detected

#define  PMC_REGSC_BGBE_MASK         0x1u
#define  PMC_REGSC_BGBE_SHIFT        0
//   Bandgap Buffer Enable
//     0b0 ==> Bandgap buffer not enabled
//     0b1 ==> Bandgap buffer enabled

#define  PMC_REGSC_REGONS_MASK       0x4u
#define  PMC_REGSC_REGONS_SHIFT      2
//   Regulator In Run Regulation Status
//     0b0 ==> Regulator is in stop regulation or in transition to/from it
//     0b1 ==> Regulator is in run regulation

#define  PMC_REGSC_ACKISO_MASK       0x8u
#define  PMC_REGSC_ACKISO_SHIFT      3
//   Acknowledge Isolation
//     0b0 ==> Peripherals and I/O pads are in normal run state
//     0b1 ==> Certain peripherals and I/O pads are in an isolated and latched state

#define  PMC_REGSC_BGEN_MASK         0x10u
#define  PMC_REGSC_BGEN_SHIFT        4
//   Bandgap Enable In VLPx Operation
//     0b0 ==> Bandgap voltage reference is disabled in VLPx , LLS , and VLLSx modes
//     0b1 ==> Bandgap voltage reference is enabled in VLPx , LLS , and VLLSx modes

#define  PORTA_PCR0_PS_MASK          0x1u
#define  PORTA_PCR0_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR0_PE_MASK          0x2u
#define  PORTA_PCR0_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR0_SRE_MASK         0x4u
#define  PORTA_PCR0_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR0_PFE_MASK         0x10u
#define  PORTA_PCR0_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR0_DSE_MASK         0x40u
#define  PORTA_PCR0_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR0_MUX_MASK         0x700u
#define  PORTA_PCR0_MUX_SHIFT        8
#define  PORTA_PCR0_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR0_MUX_SHIFT))&PORTA_PCR0_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR0_IRQC_MASK        0xF0000u
#define  PORTA_PCR0_IRQC_SHIFT       16
#define  PORTA_PCR0_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR0_IRQC_SHIFT))&PORTA_PCR0_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR0_ISF_MASK         0x1000000u
#define  PORTA_PCR0_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR1_PS_MASK          0x1u
#define  PORTA_PCR1_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR1_PE_MASK          0x2u
#define  PORTA_PCR1_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR1_SRE_MASK         0x4u
#define  PORTA_PCR1_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR1_PFE_MASK         0x10u
#define  PORTA_PCR1_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR1_DSE_MASK         0x40u
#define  PORTA_PCR1_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR1_MUX_MASK         0x700u
#define  PORTA_PCR1_MUX_SHIFT        8
#define  PORTA_PCR1_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR1_MUX_SHIFT))&PORTA_PCR1_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR1_IRQC_MASK        0xF0000u
#define  PORTA_PCR1_IRQC_SHIFT       16
#define  PORTA_PCR1_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR1_IRQC_SHIFT))&PORTA_PCR1_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR1_ISF_MASK         0x1000000u
#define  PORTA_PCR1_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR2_PS_MASK          0x1u
#define  PORTA_PCR2_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR2_PE_MASK          0x2u
#define  PORTA_PCR2_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR2_SRE_MASK         0x4u
#define  PORTA_PCR2_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR2_PFE_MASK         0x10u
#define  PORTA_PCR2_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR2_DSE_MASK         0x40u
#define  PORTA_PCR2_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR2_MUX_MASK         0x700u
#define  PORTA_PCR2_MUX_SHIFT        8
#define  PORTA_PCR2_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR2_MUX_SHIFT))&PORTA_PCR2_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR2_IRQC_MASK        0xF0000u
#define  PORTA_PCR2_IRQC_SHIFT       16
#define  PORTA_PCR2_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR2_IRQC_SHIFT))&PORTA_PCR2_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR2_ISF_MASK         0x1000000u
#define  PORTA_PCR2_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR3_PS_MASK          0x1u
#define  PORTA_PCR3_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR3_PE_MASK          0x2u
#define  PORTA_PCR3_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR3_SRE_MASK         0x4u
#define  PORTA_PCR3_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR3_PFE_MASK         0x10u
#define  PORTA_PCR3_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR3_DSE_MASK         0x40u
#define  PORTA_PCR3_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR3_MUX_MASK         0x700u
#define  PORTA_PCR3_MUX_SHIFT        8
#define  PORTA_PCR3_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR3_MUX_SHIFT))&PORTA_PCR3_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR3_IRQC_MASK        0xF0000u
#define  PORTA_PCR3_IRQC_SHIFT       16
#define  PORTA_PCR3_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR3_IRQC_SHIFT))&PORTA_PCR3_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR3_ISF_MASK         0x1000000u
#define  PORTA_PCR3_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR4_PS_MASK          0x1u
#define  PORTA_PCR4_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR4_PE_MASK          0x2u
#define  PORTA_PCR4_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR4_SRE_MASK         0x4u
#define  PORTA_PCR4_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR4_PFE_MASK         0x10u
#define  PORTA_PCR4_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR4_DSE_MASK         0x40u
#define  PORTA_PCR4_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR4_MUX_MASK         0x700u
#define  PORTA_PCR4_MUX_SHIFT        8
#define  PORTA_PCR4_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR4_MUX_SHIFT))&PORTA_PCR4_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR4_IRQC_MASK        0xF0000u
#define  PORTA_PCR4_IRQC_SHIFT       16
#define  PORTA_PCR4_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR4_IRQC_SHIFT))&PORTA_PCR4_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR4_ISF_MASK         0x1000000u
#define  PORTA_PCR4_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR5_PS_MASK          0x1u
#define  PORTA_PCR5_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR5_PE_MASK          0x2u
#define  PORTA_PCR5_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR5_SRE_MASK         0x4u
#define  PORTA_PCR5_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR5_PFE_MASK         0x10u
#define  PORTA_PCR5_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR5_DSE_MASK         0x40u
#define  PORTA_PCR5_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR5_MUX_MASK         0x700u
#define  PORTA_PCR5_MUX_SHIFT        8
#define  PORTA_PCR5_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR5_MUX_SHIFT))&PORTA_PCR5_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR5_IRQC_MASK        0xF0000u
#define  PORTA_PCR5_IRQC_SHIFT       16
#define  PORTA_PCR5_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR5_IRQC_SHIFT))&PORTA_PCR5_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR5_ISF_MASK         0x1000000u
#define  PORTA_PCR5_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR6_PS_MASK          0x1u
#define  PORTA_PCR6_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR6_PE_MASK          0x2u
#define  PORTA_PCR6_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR6_SRE_MASK         0x4u
#define  PORTA_PCR6_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR6_PFE_MASK         0x10u
#define  PORTA_PCR6_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR6_DSE_MASK         0x40u
#define  PORTA_PCR6_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR6_MUX_MASK         0x700u
#define  PORTA_PCR6_MUX_SHIFT        8
#define  PORTA_PCR6_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR6_MUX_SHIFT))&PORTA_PCR6_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR6_IRQC_MASK        0xF0000u
#define  PORTA_PCR6_IRQC_SHIFT       16
#define  PORTA_PCR6_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR6_IRQC_SHIFT))&PORTA_PCR6_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR6_ISF_MASK         0x1000000u
#define  PORTA_PCR6_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR7_PS_MASK          0x1u
#define  PORTA_PCR7_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR7_PE_MASK          0x2u
#define  PORTA_PCR7_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR7_SRE_MASK         0x4u
#define  PORTA_PCR7_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR7_PFE_MASK         0x10u
#define  PORTA_PCR7_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR7_DSE_MASK         0x40u
#define  PORTA_PCR7_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR7_MUX_MASK         0x700u
#define  PORTA_PCR7_MUX_SHIFT        8
#define  PORTA_PCR7_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR7_MUX_SHIFT))&PORTA_PCR7_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR7_IRQC_MASK        0xF0000u
#define  PORTA_PCR7_IRQC_SHIFT       16
#define  PORTA_PCR7_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR7_IRQC_SHIFT))&PORTA_PCR7_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR7_ISF_MASK         0x1000000u
#define  PORTA_PCR7_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR8_PS_MASK          0x1u
#define  PORTA_PCR8_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR8_PE_MASK          0x2u
#define  PORTA_PCR8_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR8_SRE_MASK         0x4u
#define  PORTA_PCR8_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR8_PFE_MASK         0x10u
#define  PORTA_PCR8_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR8_DSE_MASK         0x40u
#define  PORTA_PCR8_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR8_MUX_MASK         0x700u
#define  PORTA_PCR8_MUX_SHIFT        8
#define  PORTA_PCR8_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR8_MUX_SHIFT))&PORTA_PCR8_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR8_IRQC_MASK        0xF0000u
#define  PORTA_PCR8_IRQC_SHIFT       16
#define  PORTA_PCR8_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR8_IRQC_SHIFT))&PORTA_PCR8_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR8_ISF_MASK         0x1000000u
#define  PORTA_PCR8_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR9_PS_MASK          0x1u
#define  PORTA_PCR9_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR9_PE_MASK          0x2u
#define  PORTA_PCR9_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR9_SRE_MASK         0x4u
#define  PORTA_PCR9_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR9_PFE_MASK         0x10u
#define  PORTA_PCR9_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR9_DSE_MASK         0x40u
#define  PORTA_PCR9_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR9_MUX_MASK         0x700u
#define  PORTA_PCR9_MUX_SHIFT        8
#define  PORTA_PCR9_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_PCR9_MUX_SHIFT))&PORTA_PCR9_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR9_IRQC_MASK        0xF0000u
#define  PORTA_PCR9_IRQC_SHIFT       16
#define  PORTA_PCR9_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR9_IRQC_SHIFT))&PORTA_PCR9_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR9_ISF_MASK         0x1000000u
#define  PORTA_PCR9_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR10_PS_MASK         0x1u
#define  PORTA_PCR10_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR10_PE_MASK         0x2u
#define  PORTA_PCR10_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR10_SRE_MASK        0x4u
#define  PORTA_PCR10_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR10_PFE_MASK        0x10u
#define  PORTA_PCR10_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR10_DSE_MASK        0x40u
#define  PORTA_PCR10_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR10_MUX_MASK        0x700u
#define  PORTA_PCR10_MUX_SHIFT       8
#define  PORTA_PCR10_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR10_MUX_SHIFT))&PORTA_PCR10_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR10_IRQC_MASK       0xF0000u
#define  PORTA_PCR10_IRQC_SHIFT      16
#define  PORTA_PCR10_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR10_IRQC_SHIFT))&PORTA_PCR10_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR10_ISF_MASK        0x1000000u
#define  PORTA_PCR10_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR11_PS_MASK         0x1u
#define  PORTA_PCR11_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR11_PE_MASK         0x2u
#define  PORTA_PCR11_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR11_SRE_MASK        0x4u
#define  PORTA_PCR11_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR11_PFE_MASK        0x10u
#define  PORTA_PCR11_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR11_DSE_MASK        0x40u
#define  PORTA_PCR11_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR11_MUX_MASK        0x700u
#define  PORTA_PCR11_MUX_SHIFT       8
#define  PORTA_PCR11_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR11_MUX_SHIFT))&PORTA_PCR11_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR11_IRQC_MASK       0xF0000u
#define  PORTA_PCR11_IRQC_SHIFT      16
#define  PORTA_PCR11_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR11_IRQC_SHIFT))&PORTA_PCR11_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR11_ISF_MASK        0x1000000u
#define  PORTA_PCR11_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR12_PS_MASK         0x1u
#define  PORTA_PCR12_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR12_PE_MASK         0x2u
#define  PORTA_PCR12_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR12_SRE_MASK        0x4u
#define  PORTA_PCR12_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR12_PFE_MASK        0x10u
#define  PORTA_PCR12_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR12_DSE_MASK        0x40u
#define  PORTA_PCR12_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR12_MUX_MASK        0x700u
#define  PORTA_PCR12_MUX_SHIFT       8
#define  PORTA_PCR12_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR12_MUX_SHIFT))&PORTA_PCR12_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR12_IRQC_MASK       0xF0000u
#define  PORTA_PCR12_IRQC_SHIFT      16
#define  PORTA_PCR12_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR12_IRQC_SHIFT))&PORTA_PCR12_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR12_ISF_MASK        0x1000000u
#define  PORTA_PCR12_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR13_PS_MASK         0x1u
#define  PORTA_PCR13_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR13_PE_MASK         0x2u
#define  PORTA_PCR13_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR13_SRE_MASK        0x4u
#define  PORTA_PCR13_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR13_PFE_MASK        0x10u
#define  PORTA_PCR13_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR13_DSE_MASK        0x40u
#define  PORTA_PCR13_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR13_MUX_MASK        0x700u
#define  PORTA_PCR13_MUX_SHIFT       8
#define  PORTA_PCR13_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR13_MUX_SHIFT))&PORTA_PCR13_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR13_IRQC_MASK       0xF0000u
#define  PORTA_PCR13_IRQC_SHIFT      16
#define  PORTA_PCR13_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR13_IRQC_SHIFT))&PORTA_PCR13_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR13_ISF_MASK        0x1000000u
#define  PORTA_PCR13_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR14_PS_MASK         0x1u
#define  PORTA_PCR14_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR14_PE_MASK         0x2u
#define  PORTA_PCR14_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR14_SRE_MASK        0x4u
#define  PORTA_PCR14_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR14_PFE_MASK        0x10u
#define  PORTA_PCR14_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR14_DSE_MASK        0x40u
#define  PORTA_PCR14_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR14_MUX_MASK        0x700u
#define  PORTA_PCR14_MUX_SHIFT       8
#define  PORTA_PCR14_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR14_MUX_SHIFT))&PORTA_PCR14_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR14_IRQC_MASK       0xF0000u
#define  PORTA_PCR14_IRQC_SHIFT      16
#define  PORTA_PCR14_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR14_IRQC_SHIFT))&PORTA_PCR14_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR14_ISF_MASK        0x1000000u
#define  PORTA_PCR14_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR15_PS_MASK         0x1u
#define  PORTA_PCR15_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR15_PE_MASK         0x2u
#define  PORTA_PCR15_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR15_SRE_MASK        0x4u
#define  PORTA_PCR15_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR15_PFE_MASK        0x10u
#define  PORTA_PCR15_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR15_DSE_MASK        0x40u
#define  PORTA_PCR15_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR15_MUX_MASK        0x700u
#define  PORTA_PCR15_MUX_SHIFT       8
#define  PORTA_PCR15_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR15_MUX_SHIFT))&PORTA_PCR15_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR15_IRQC_MASK       0xF0000u
#define  PORTA_PCR15_IRQC_SHIFT      16
#define  PORTA_PCR15_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR15_IRQC_SHIFT))&PORTA_PCR15_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR15_ISF_MASK        0x1000000u
#define  PORTA_PCR15_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR16_PS_MASK         0x1u
#define  PORTA_PCR16_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR16_PE_MASK         0x2u
#define  PORTA_PCR16_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR16_SRE_MASK        0x4u
#define  PORTA_PCR16_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR16_PFE_MASK        0x10u
#define  PORTA_PCR16_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR16_DSE_MASK        0x40u
#define  PORTA_PCR16_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR16_MUX_MASK        0x700u
#define  PORTA_PCR16_MUX_SHIFT       8
#define  PORTA_PCR16_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR16_MUX_SHIFT))&PORTA_PCR16_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR16_IRQC_MASK       0xF0000u
#define  PORTA_PCR16_IRQC_SHIFT      16
#define  PORTA_PCR16_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR16_IRQC_SHIFT))&PORTA_PCR16_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR16_ISF_MASK        0x1000000u
#define  PORTA_PCR16_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR17_PS_MASK         0x1u
#define  PORTA_PCR17_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR17_PE_MASK         0x2u
#define  PORTA_PCR17_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR17_SRE_MASK        0x4u
#define  PORTA_PCR17_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR17_PFE_MASK        0x10u
#define  PORTA_PCR17_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR17_DSE_MASK        0x40u
#define  PORTA_PCR17_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR17_MUX_MASK        0x700u
#define  PORTA_PCR17_MUX_SHIFT       8
#define  PORTA_PCR17_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR17_MUX_SHIFT))&PORTA_PCR17_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR17_IRQC_MASK       0xF0000u
#define  PORTA_PCR17_IRQC_SHIFT      16
#define  PORTA_PCR17_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR17_IRQC_SHIFT))&PORTA_PCR17_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR17_ISF_MASK        0x1000000u
#define  PORTA_PCR17_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR18_PS_MASK         0x1u
#define  PORTA_PCR18_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR18_PE_MASK         0x2u
#define  PORTA_PCR18_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR18_SRE_MASK        0x4u
#define  PORTA_PCR18_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR18_PFE_MASK        0x10u
#define  PORTA_PCR18_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR18_DSE_MASK        0x40u
#define  PORTA_PCR18_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR18_MUX_MASK        0x700u
#define  PORTA_PCR18_MUX_SHIFT       8
#define  PORTA_PCR18_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR18_MUX_SHIFT))&PORTA_PCR18_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR18_IRQC_MASK       0xF0000u
#define  PORTA_PCR18_IRQC_SHIFT      16
#define  PORTA_PCR18_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR18_IRQC_SHIFT))&PORTA_PCR18_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR18_ISF_MASK        0x1000000u
#define  PORTA_PCR18_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR19_PS_MASK         0x1u
#define  PORTA_PCR19_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR19_PE_MASK         0x2u
#define  PORTA_PCR19_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR19_SRE_MASK        0x4u
#define  PORTA_PCR19_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR19_PFE_MASK        0x10u
#define  PORTA_PCR19_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR19_DSE_MASK        0x40u
#define  PORTA_PCR19_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR19_MUX_MASK        0x700u
#define  PORTA_PCR19_MUX_SHIFT       8
#define  PORTA_PCR19_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR19_MUX_SHIFT))&PORTA_PCR19_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR19_IRQC_MASK       0xF0000u
#define  PORTA_PCR19_IRQC_SHIFT      16
#define  PORTA_PCR19_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR19_IRQC_SHIFT))&PORTA_PCR19_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR19_ISF_MASK        0x1000000u
#define  PORTA_PCR19_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR20_PS_MASK         0x1u
#define  PORTA_PCR20_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR20_PE_MASK         0x2u
#define  PORTA_PCR20_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR20_SRE_MASK        0x4u
#define  PORTA_PCR20_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR20_PFE_MASK        0x10u
#define  PORTA_PCR20_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR20_DSE_MASK        0x40u
#define  PORTA_PCR20_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR20_MUX_MASK        0x700u
#define  PORTA_PCR20_MUX_SHIFT       8
#define  PORTA_PCR20_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR20_MUX_SHIFT))&PORTA_PCR20_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR20_IRQC_MASK       0xF0000u
#define  PORTA_PCR20_IRQC_SHIFT      16
#define  PORTA_PCR20_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR20_IRQC_SHIFT))&PORTA_PCR20_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR20_ISF_MASK        0x1000000u
#define  PORTA_PCR20_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR21_PS_MASK         0x1u
#define  PORTA_PCR21_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR21_PE_MASK         0x2u
#define  PORTA_PCR21_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR21_SRE_MASK        0x4u
#define  PORTA_PCR21_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR21_PFE_MASK        0x10u
#define  PORTA_PCR21_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR21_DSE_MASK        0x40u
#define  PORTA_PCR21_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR21_MUX_MASK        0x700u
#define  PORTA_PCR21_MUX_SHIFT       8
#define  PORTA_PCR21_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR21_MUX_SHIFT))&PORTA_PCR21_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR21_IRQC_MASK       0xF0000u
#define  PORTA_PCR21_IRQC_SHIFT      16
#define  PORTA_PCR21_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR21_IRQC_SHIFT))&PORTA_PCR21_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR21_ISF_MASK        0x1000000u
#define  PORTA_PCR21_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR22_PS_MASK         0x1u
#define  PORTA_PCR22_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR22_PE_MASK         0x2u
#define  PORTA_PCR22_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR22_SRE_MASK        0x4u
#define  PORTA_PCR22_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR22_PFE_MASK        0x10u
#define  PORTA_PCR22_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR22_DSE_MASK        0x40u
#define  PORTA_PCR22_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR22_MUX_MASK        0x700u
#define  PORTA_PCR22_MUX_SHIFT       8
#define  PORTA_PCR22_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR22_MUX_SHIFT))&PORTA_PCR22_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR22_IRQC_MASK       0xF0000u
#define  PORTA_PCR22_IRQC_SHIFT      16
#define  PORTA_PCR22_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR22_IRQC_SHIFT))&PORTA_PCR22_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR22_ISF_MASK        0x1000000u
#define  PORTA_PCR22_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR23_PS_MASK         0x1u
#define  PORTA_PCR23_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR23_PE_MASK         0x2u
#define  PORTA_PCR23_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR23_SRE_MASK        0x4u
#define  PORTA_PCR23_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR23_PFE_MASK        0x10u
#define  PORTA_PCR23_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR23_DSE_MASK        0x40u
#define  PORTA_PCR23_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR23_MUX_MASK        0x700u
#define  PORTA_PCR23_MUX_SHIFT       8
#define  PORTA_PCR23_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR23_MUX_SHIFT))&PORTA_PCR23_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR23_IRQC_MASK       0xF0000u
#define  PORTA_PCR23_IRQC_SHIFT      16
#define  PORTA_PCR23_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR23_IRQC_SHIFT))&PORTA_PCR23_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR23_ISF_MASK        0x1000000u
#define  PORTA_PCR23_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR24_PS_MASK         0x1u
#define  PORTA_PCR24_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR24_PE_MASK         0x2u
#define  PORTA_PCR24_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR24_SRE_MASK        0x4u
#define  PORTA_PCR24_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR24_PFE_MASK        0x10u
#define  PORTA_PCR24_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR24_DSE_MASK        0x40u
#define  PORTA_PCR24_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR24_MUX_MASK        0x700u
#define  PORTA_PCR24_MUX_SHIFT       8
#define  PORTA_PCR24_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR24_MUX_SHIFT))&PORTA_PCR24_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR24_IRQC_MASK       0xF0000u
#define  PORTA_PCR24_IRQC_SHIFT      16
#define  PORTA_PCR24_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR24_IRQC_SHIFT))&PORTA_PCR24_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR24_ISF_MASK        0x1000000u
#define  PORTA_PCR24_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR25_PS_MASK         0x1u
#define  PORTA_PCR25_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR25_PE_MASK         0x2u
#define  PORTA_PCR25_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR25_SRE_MASK        0x4u
#define  PORTA_PCR25_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR25_PFE_MASK        0x10u
#define  PORTA_PCR25_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR25_DSE_MASK        0x40u
#define  PORTA_PCR25_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR25_MUX_MASK        0x700u
#define  PORTA_PCR25_MUX_SHIFT       8
#define  PORTA_PCR25_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR25_MUX_SHIFT))&PORTA_PCR25_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR25_IRQC_MASK       0xF0000u
#define  PORTA_PCR25_IRQC_SHIFT      16
#define  PORTA_PCR25_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR25_IRQC_SHIFT))&PORTA_PCR25_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR25_ISF_MASK        0x1000000u
#define  PORTA_PCR25_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR26_PS_MASK         0x1u
#define  PORTA_PCR26_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR26_PE_MASK         0x2u
#define  PORTA_PCR26_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR26_SRE_MASK        0x4u
#define  PORTA_PCR26_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR26_PFE_MASK        0x10u
#define  PORTA_PCR26_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR26_DSE_MASK        0x40u
#define  PORTA_PCR26_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR26_MUX_MASK        0x700u
#define  PORTA_PCR26_MUX_SHIFT       8
#define  PORTA_PCR26_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR26_MUX_SHIFT))&PORTA_PCR26_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR26_IRQC_MASK       0xF0000u
#define  PORTA_PCR26_IRQC_SHIFT      16
#define  PORTA_PCR26_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR26_IRQC_SHIFT))&PORTA_PCR26_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR26_ISF_MASK        0x1000000u
#define  PORTA_PCR26_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR27_PS_MASK         0x1u
#define  PORTA_PCR27_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR27_PE_MASK         0x2u
#define  PORTA_PCR27_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR27_SRE_MASK        0x4u
#define  PORTA_PCR27_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR27_PFE_MASK        0x10u
#define  PORTA_PCR27_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR27_DSE_MASK        0x40u
#define  PORTA_PCR27_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR27_MUX_MASK        0x700u
#define  PORTA_PCR27_MUX_SHIFT       8
#define  PORTA_PCR27_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR27_MUX_SHIFT))&PORTA_PCR27_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR27_IRQC_MASK       0xF0000u
#define  PORTA_PCR27_IRQC_SHIFT      16
#define  PORTA_PCR27_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR27_IRQC_SHIFT))&PORTA_PCR27_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR27_ISF_MASK        0x1000000u
#define  PORTA_PCR27_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR28_PS_MASK         0x1u
#define  PORTA_PCR28_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR28_PE_MASK         0x2u
#define  PORTA_PCR28_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR28_SRE_MASK        0x4u
#define  PORTA_PCR28_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR28_PFE_MASK        0x10u
#define  PORTA_PCR28_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR28_DSE_MASK        0x40u
#define  PORTA_PCR28_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR28_MUX_MASK        0x700u
#define  PORTA_PCR28_MUX_SHIFT       8
#define  PORTA_PCR28_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR28_MUX_SHIFT))&PORTA_PCR28_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR28_IRQC_MASK       0xF0000u
#define  PORTA_PCR28_IRQC_SHIFT      16
#define  PORTA_PCR28_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR28_IRQC_SHIFT))&PORTA_PCR28_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR28_ISF_MASK        0x1000000u
#define  PORTA_PCR28_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR29_PS_MASK         0x1u
#define  PORTA_PCR29_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR29_PE_MASK         0x2u
#define  PORTA_PCR29_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR29_SRE_MASK        0x4u
#define  PORTA_PCR29_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR29_PFE_MASK        0x10u
#define  PORTA_PCR29_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR29_DSE_MASK        0x40u
#define  PORTA_PCR29_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR29_MUX_MASK        0x700u
#define  PORTA_PCR29_MUX_SHIFT       8
#define  PORTA_PCR29_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR29_MUX_SHIFT))&PORTA_PCR29_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR29_IRQC_MASK       0xF0000u
#define  PORTA_PCR29_IRQC_SHIFT      16
#define  PORTA_PCR29_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR29_IRQC_SHIFT))&PORTA_PCR29_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR29_ISF_MASK        0x1000000u
#define  PORTA_PCR29_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR30_PS_MASK         0x1u
#define  PORTA_PCR30_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR30_PE_MASK         0x2u
#define  PORTA_PCR30_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR30_SRE_MASK        0x4u
#define  PORTA_PCR30_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR30_PFE_MASK        0x10u
#define  PORTA_PCR30_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR30_DSE_MASK        0x40u
#define  PORTA_PCR30_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR30_MUX_MASK        0x700u
#define  PORTA_PCR30_MUX_SHIFT       8
#define  PORTA_PCR30_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR30_MUX_SHIFT))&PORTA_PCR30_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR30_IRQC_MASK       0xF0000u
#define  PORTA_PCR30_IRQC_SHIFT      16
#define  PORTA_PCR30_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR30_IRQC_SHIFT))&PORTA_PCR30_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR30_ISF_MASK        0x1000000u
#define  PORTA_PCR30_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_PCR31_PS_MASK         0x1u
#define  PORTA_PCR31_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTA_PCR31_PE_MASK         0x2u
#define  PORTA_PCR31_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTA_PCR31_SRE_MASK        0x4u
#define  PORTA_PCR31_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTA_PCR31_PFE_MASK        0x10u
#define  PORTA_PCR31_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTA_PCR31_DSE_MASK        0x40u
#define  PORTA_PCR31_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTA_PCR31_MUX_MASK        0x700u
#define  PORTA_PCR31_MUX_SHIFT       8
#define  PORTA_PCR31_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTA_PCR31_MUX_SHIFT))&PORTA_PCR31_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTA_PCR31_IRQC_MASK       0xF0000u
#define  PORTA_PCR31_IRQC_SHIFT      16
#define  PORTA_PCR31_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_PCR31_IRQC_SHIFT))&PORTA_PCR31_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTA_PCR31_ISF_MASK        0x1000000u
#define  PORTA_PCR31_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTA_GPCLR_GPWD_MASK       0xFFFFu
#define  PORTA_GPCLR_GPWD_SHIFT      0
#define  PORTA_GPCLR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_GPCLR_GPWD_SHIFT))&PORTA_GPCLR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTA_GPCLR_GPWE_MASK       0xFFFF0000u
#define  PORTA_GPCLR_GPWE_SHIFT      16
#define  PORTA_GPCLR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_GPCLR_GPWE_SHIFT))&PORTA_GPCLR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTA_GPCHR_GPWD_MASK       0xFFFFu
#define  PORTA_GPCHR_GPWD_SHIFT      0
#define  PORTA_GPCHR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_GPCHR_GPWD_SHIFT))&PORTA_GPCHR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTA_GPCHR_GPWE_MASK       0xFFFF0000u
#define  PORTA_GPCHR_GPWE_SHIFT      16
#define  PORTA_GPCHR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTA_GPCHR_GPWE_SHIFT))&PORTA_GPCHR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTA_ISFR_ISF_MASK         0xFFFFFFFFu
#define  PORTA_ISFR_ISF_SHIFT        0
#define  PORTA_ISFR_ISF(x)           (((uint32_t)(((uint32_t)(x))<<PORTA_ISFR_ISF_SHIFT))&PORTA_ISFR_ISF_MASK)
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR0_PS_MASK          0x1u
#define  PORTB_PCR0_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR0_PE_MASK          0x2u
#define  PORTB_PCR0_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR0_SRE_MASK         0x4u
#define  PORTB_PCR0_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR0_PFE_MASK         0x10u
#define  PORTB_PCR0_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR0_DSE_MASK         0x40u
#define  PORTB_PCR0_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR0_MUX_MASK         0x700u
#define  PORTB_PCR0_MUX_SHIFT        8
#define  PORTB_PCR0_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR0_MUX_SHIFT))&PORTB_PCR0_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR0_IRQC_MASK        0xF0000u
#define  PORTB_PCR0_IRQC_SHIFT       16
#define  PORTB_PCR0_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR0_IRQC_SHIFT))&PORTB_PCR0_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR0_ISF_MASK         0x1000000u
#define  PORTB_PCR0_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR1_PS_MASK          0x1u
#define  PORTB_PCR1_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR1_PE_MASK          0x2u
#define  PORTB_PCR1_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR1_SRE_MASK         0x4u
#define  PORTB_PCR1_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR1_PFE_MASK         0x10u
#define  PORTB_PCR1_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR1_DSE_MASK         0x40u
#define  PORTB_PCR1_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR1_MUX_MASK         0x700u
#define  PORTB_PCR1_MUX_SHIFT        8
#define  PORTB_PCR1_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR1_MUX_SHIFT))&PORTB_PCR1_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR1_IRQC_MASK        0xF0000u
#define  PORTB_PCR1_IRQC_SHIFT       16
#define  PORTB_PCR1_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR1_IRQC_SHIFT))&PORTB_PCR1_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR1_ISF_MASK         0x1000000u
#define  PORTB_PCR1_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR2_PS_MASK          0x1u
#define  PORTB_PCR2_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR2_PE_MASK          0x2u
#define  PORTB_PCR2_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR2_SRE_MASK         0x4u
#define  PORTB_PCR2_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR2_PFE_MASK         0x10u
#define  PORTB_PCR2_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR2_DSE_MASK         0x40u
#define  PORTB_PCR2_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR2_MUX_MASK         0x700u
#define  PORTB_PCR2_MUX_SHIFT        8
#define  PORTB_PCR2_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR2_MUX_SHIFT))&PORTB_PCR2_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR2_IRQC_MASK        0xF0000u
#define  PORTB_PCR2_IRQC_SHIFT       16
#define  PORTB_PCR2_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR2_IRQC_SHIFT))&PORTB_PCR2_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR2_ISF_MASK         0x1000000u
#define  PORTB_PCR2_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR3_PS_MASK          0x1u
#define  PORTB_PCR3_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR3_PE_MASK          0x2u
#define  PORTB_PCR3_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR3_SRE_MASK         0x4u
#define  PORTB_PCR3_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR3_PFE_MASK         0x10u
#define  PORTB_PCR3_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR3_DSE_MASK         0x40u
#define  PORTB_PCR3_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR3_MUX_MASK         0x700u
#define  PORTB_PCR3_MUX_SHIFT        8
#define  PORTB_PCR3_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR3_MUX_SHIFT))&PORTB_PCR3_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR3_IRQC_MASK        0xF0000u
#define  PORTB_PCR3_IRQC_SHIFT       16
#define  PORTB_PCR3_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR3_IRQC_SHIFT))&PORTB_PCR3_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR3_ISF_MASK         0x1000000u
#define  PORTB_PCR3_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR4_PS_MASK          0x1u
#define  PORTB_PCR4_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR4_PE_MASK          0x2u
#define  PORTB_PCR4_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR4_SRE_MASK         0x4u
#define  PORTB_PCR4_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR4_PFE_MASK         0x10u
#define  PORTB_PCR4_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR4_DSE_MASK         0x40u
#define  PORTB_PCR4_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR4_MUX_MASK         0x700u
#define  PORTB_PCR4_MUX_SHIFT        8
#define  PORTB_PCR4_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR4_MUX_SHIFT))&PORTB_PCR4_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR4_IRQC_MASK        0xF0000u
#define  PORTB_PCR4_IRQC_SHIFT       16
#define  PORTB_PCR4_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR4_IRQC_SHIFT))&PORTB_PCR4_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR4_ISF_MASK         0x1000000u
#define  PORTB_PCR4_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR5_PS_MASK          0x1u
#define  PORTB_PCR5_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR5_PE_MASK          0x2u
#define  PORTB_PCR5_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR5_SRE_MASK         0x4u
#define  PORTB_PCR5_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR5_PFE_MASK         0x10u
#define  PORTB_PCR5_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR5_DSE_MASK         0x40u
#define  PORTB_PCR5_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR5_MUX_MASK         0x700u
#define  PORTB_PCR5_MUX_SHIFT        8
#define  PORTB_PCR5_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR5_MUX_SHIFT))&PORTB_PCR5_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR5_IRQC_MASK        0xF0000u
#define  PORTB_PCR5_IRQC_SHIFT       16
#define  PORTB_PCR5_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR5_IRQC_SHIFT))&PORTB_PCR5_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR5_ISF_MASK         0x1000000u
#define  PORTB_PCR5_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR6_PS_MASK          0x1u
#define  PORTB_PCR6_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR6_PE_MASK          0x2u
#define  PORTB_PCR6_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR6_SRE_MASK         0x4u
#define  PORTB_PCR6_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR6_PFE_MASK         0x10u
#define  PORTB_PCR6_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR6_DSE_MASK         0x40u
#define  PORTB_PCR6_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR6_MUX_MASK         0x700u
#define  PORTB_PCR6_MUX_SHIFT        8
#define  PORTB_PCR6_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR6_MUX_SHIFT))&PORTB_PCR6_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR6_IRQC_MASK        0xF0000u
#define  PORTB_PCR6_IRQC_SHIFT       16
#define  PORTB_PCR6_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR6_IRQC_SHIFT))&PORTB_PCR6_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR6_ISF_MASK         0x1000000u
#define  PORTB_PCR6_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR7_PS_MASK          0x1u
#define  PORTB_PCR7_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR7_PE_MASK          0x2u
#define  PORTB_PCR7_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR7_SRE_MASK         0x4u
#define  PORTB_PCR7_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR7_PFE_MASK         0x10u
#define  PORTB_PCR7_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR7_DSE_MASK         0x40u
#define  PORTB_PCR7_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR7_MUX_MASK         0x700u
#define  PORTB_PCR7_MUX_SHIFT        8
#define  PORTB_PCR7_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR7_MUX_SHIFT))&PORTB_PCR7_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR7_IRQC_MASK        0xF0000u
#define  PORTB_PCR7_IRQC_SHIFT       16
#define  PORTB_PCR7_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR7_IRQC_SHIFT))&PORTB_PCR7_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR7_ISF_MASK         0x1000000u
#define  PORTB_PCR7_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR8_PS_MASK          0x1u
#define  PORTB_PCR8_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR8_PE_MASK          0x2u
#define  PORTB_PCR8_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR8_SRE_MASK         0x4u
#define  PORTB_PCR8_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR8_PFE_MASK         0x10u
#define  PORTB_PCR8_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR8_DSE_MASK         0x40u
#define  PORTB_PCR8_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR8_MUX_MASK         0x700u
#define  PORTB_PCR8_MUX_SHIFT        8
#define  PORTB_PCR8_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR8_MUX_SHIFT))&PORTB_PCR8_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR8_IRQC_MASK        0xF0000u
#define  PORTB_PCR8_IRQC_SHIFT       16
#define  PORTB_PCR8_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR8_IRQC_SHIFT))&PORTB_PCR8_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR8_ISF_MASK         0x1000000u
#define  PORTB_PCR8_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR9_PS_MASK          0x1u
#define  PORTB_PCR9_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR9_PE_MASK          0x2u
#define  PORTB_PCR9_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR9_SRE_MASK         0x4u
#define  PORTB_PCR9_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR9_PFE_MASK         0x10u
#define  PORTB_PCR9_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR9_DSE_MASK         0x40u
#define  PORTB_PCR9_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR9_MUX_MASK         0x700u
#define  PORTB_PCR9_MUX_SHIFT        8
#define  PORTB_PCR9_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_PCR9_MUX_SHIFT))&PORTB_PCR9_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR9_IRQC_MASK        0xF0000u
#define  PORTB_PCR9_IRQC_SHIFT       16
#define  PORTB_PCR9_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR9_IRQC_SHIFT))&PORTB_PCR9_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR9_ISF_MASK         0x1000000u
#define  PORTB_PCR9_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR10_PS_MASK         0x1u
#define  PORTB_PCR10_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR10_PE_MASK         0x2u
#define  PORTB_PCR10_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR10_SRE_MASK        0x4u
#define  PORTB_PCR10_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR10_PFE_MASK        0x10u
#define  PORTB_PCR10_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR10_DSE_MASK        0x40u
#define  PORTB_PCR10_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR10_MUX_MASK        0x700u
#define  PORTB_PCR10_MUX_SHIFT       8
#define  PORTB_PCR10_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR10_MUX_SHIFT))&PORTB_PCR10_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR10_IRQC_MASK       0xF0000u
#define  PORTB_PCR10_IRQC_SHIFT      16
#define  PORTB_PCR10_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR10_IRQC_SHIFT))&PORTB_PCR10_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR10_ISF_MASK        0x1000000u
#define  PORTB_PCR10_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR11_PS_MASK         0x1u
#define  PORTB_PCR11_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR11_PE_MASK         0x2u
#define  PORTB_PCR11_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR11_SRE_MASK        0x4u
#define  PORTB_PCR11_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR11_PFE_MASK        0x10u
#define  PORTB_PCR11_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR11_DSE_MASK        0x40u
#define  PORTB_PCR11_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR11_MUX_MASK        0x700u
#define  PORTB_PCR11_MUX_SHIFT       8
#define  PORTB_PCR11_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR11_MUX_SHIFT))&PORTB_PCR11_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR11_IRQC_MASK       0xF0000u
#define  PORTB_PCR11_IRQC_SHIFT      16
#define  PORTB_PCR11_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR11_IRQC_SHIFT))&PORTB_PCR11_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR11_ISF_MASK        0x1000000u
#define  PORTB_PCR11_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR12_PS_MASK         0x1u
#define  PORTB_PCR12_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR12_PE_MASK         0x2u
#define  PORTB_PCR12_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR12_SRE_MASK        0x4u
#define  PORTB_PCR12_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR12_PFE_MASK        0x10u
#define  PORTB_PCR12_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR12_DSE_MASK        0x40u
#define  PORTB_PCR12_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR12_MUX_MASK        0x700u
#define  PORTB_PCR12_MUX_SHIFT       8
#define  PORTB_PCR12_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR12_MUX_SHIFT))&PORTB_PCR12_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR12_IRQC_MASK       0xF0000u
#define  PORTB_PCR12_IRQC_SHIFT      16
#define  PORTB_PCR12_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR12_IRQC_SHIFT))&PORTB_PCR12_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR12_ISF_MASK        0x1000000u
#define  PORTB_PCR12_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR13_PS_MASK         0x1u
#define  PORTB_PCR13_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR13_PE_MASK         0x2u
#define  PORTB_PCR13_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR13_SRE_MASK        0x4u
#define  PORTB_PCR13_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR13_PFE_MASK        0x10u
#define  PORTB_PCR13_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR13_DSE_MASK        0x40u
#define  PORTB_PCR13_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR13_MUX_MASK        0x700u
#define  PORTB_PCR13_MUX_SHIFT       8
#define  PORTB_PCR13_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR13_MUX_SHIFT))&PORTB_PCR13_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR13_IRQC_MASK       0xF0000u
#define  PORTB_PCR13_IRQC_SHIFT      16
#define  PORTB_PCR13_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR13_IRQC_SHIFT))&PORTB_PCR13_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR13_ISF_MASK        0x1000000u
#define  PORTB_PCR13_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR14_PS_MASK         0x1u
#define  PORTB_PCR14_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR14_PE_MASK         0x2u
#define  PORTB_PCR14_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR14_SRE_MASK        0x4u
#define  PORTB_PCR14_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR14_PFE_MASK        0x10u
#define  PORTB_PCR14_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR14_DSE_MASK        0x40u
#define  PORTB_PCR14_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR14_MUX_MASK        0x700u
#define  PORTB_PCR14_MUX_SHIFT       8
#define  PORTB_PCR14_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR14_MUX_SHIFT))&PORTB_PCR14_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR14_IRQC_MASK       0xF0000u
#define  PORTB_PCR14_IRQC_SHIFT      16
#define  PORTB_PCR14_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR14_IRQC_SHIFT))&PORTB_PCR14_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR14_ISF_MASK        0x1000000u
#define  PORTB_PCR14_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR15_PS_MASK         0x1u
#define  PORTB_PCR15_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR15_PE_MASK         0x2u
#define  PORTB_PCR15_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR15_SRE_MASK        0x4u
#define  PORTB_PCR15_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR15_PFE_MASK        0x10u
#define  PORTB_PCR15_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR15_DSE_MASK        0x40u
#define  PORTB_PCR15_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR15_MUX_MASK        0x700u
#define  PORTB_PCR15_MUX_SHIFT       8
#define  PORTB_PCR15_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR15_MUX_SHIFT))&PORTB_PCR15_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR15_IRQC_MASK       0xF0000u
#define  PORTB_PCR15_IRQC_SHIFT      16
#define  PORTB_PCR15_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR15_IRQC_SHIFT))&PORTB_PCR15_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR15_ISF_MASK        0x1000000u
#define  PORTB_PCR15_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR16_PS_MASK         0x1u
#define  PORTB_PCR16_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR16_PE_MASK         0x2u
#define  PORTB_PCR16_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR16_SRE_MASK        0x4u
#define  PORTB_PCR16_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR16_PFE_MASK        0x10u
#define  PORTB_PCR16_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR16_DSE_MASK        0x40u
#define  PORTB_PCR16_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR16_MUX_MASK        0x700u
#define  PORTB_PCR16_MUX_SHIFT       8
#define  PORTB_PCR16_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR16_MUX_SHIFT))&PORTB_PCR16_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR16_IRQC_MASK       0xF0000u
#define  PORTB_PCR16_IRQC_SHIFT      16
#define  PORTB_PCR16_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR16_IRQC_SHIFT))&PORTB_PCR16_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR16_ISF_MASK        0x1000000u
#define  PORTB_PCR16_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR17_PS_MASK         0x1u
#define  PORTB_PCR17_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR17_PE_MASK         0x2u
#define  PORTB_PCR17_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR17_SRE_MASK        0x4u
#define  PORTB_PCR17_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR17_PFE_MASK        0x10u
#define  PORTB_PCR17_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR17_DSE_MASK        0x40u
#define  PORTB_PCR17_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR17_MUX_MASK        0x700u
#define  PORTB_PCR17_MUX_SHIFT       8
#define  PORTB_PCR17_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR17_MUX_SHIFT))&PORTB_PCR17_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR17_IRQC_MASK       0xF0000u
#define  PORTB_PCR17_IRQC_SHIFT      16
#define  PORTB_PCR17_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR17_IRQC_SHIFT))&PORTB_PCR17_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR17_ISF_MASK        0x1000000u
#define  PORTB_PCR17_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR18_PS_MASK         0x1u
#define  PORTB_PCR18_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR18_PE_MASK         0x2u
#define  PORTB_PCR18_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR18_SRE_MASK        0x4u
#define  PORTB_PCR18_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR18_PFE_MASK        0x10u
#define  PORTB_PCR18_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR18_DSE_MASK        0x40u
#define  PORTB_PCR18_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR18_MUX_MASK        0x700u
#define  PORTB_PCR18_MUX_SHIFT       8
#define  PORTB_PCR18_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR18_MUX_SHIFT))&PORTB_PCR18_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR18_IRQC_MASK       0xF0000u
#define  PORTB_PCR18_IRQC_SHIFT      16
#define  PORTB_PCR18_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR18_IRQC_SHIFT))&PORTB_PCR18_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR18_ISF_MASK        0x1000000u
#define  PORTB_PCR18_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR19_PS_MASK         0x1u
#define  PORTB_PCR19_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR19_PE_MASK         0x2u
#define  PORTB_PCR19_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR19_SRE_MASK        0x4u
#define  PORTB_PCR19_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR19_PFE_MASK        0x10u
#define  PORTB_PCR19_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR19_DSE_MASK        0x40u
#define  PORTB_PCR19_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR19_MUX_MASK        0x700u
#define  PORTB_PCR19_MUX_SHIFT       8
#define  PORTB_PCR19_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR19_MUX_SHIFT))&PORTB_PCR19_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR19_IRQC_MASK       0xF0000u
#define  PORTB_PCR19_IRQC_SHIFT      16
#define  PORTB_PCR19_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR19_IRQC_SHIFT))&PORTB_PCR19_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR19_ISF_MASK        0x1000000u
#define  PORTB_PCR19_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR20_PS_MASK         0x1u
#define  PORTB_PCR20_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR20_PE_MASK         0x2u
#define  PORTB_PCR20_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR20_SRE_MASK        0x4u
#define  PORTB_PCR20_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR20_PFE_MASK        0x10u
#define  PORTB_PCR20_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR20_DSE_MASK        0x40u
#define  PORTB_PCR20_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR20_MUX_MASK        0x700u
#define  PORTB_PCR20_MUX_SHIFT       8
#define  PORTB_PCR20_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR20_MUX_SHIFT))&PORTB_PCR20_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR20_IRQC_MASK       0xF0000u
#define  PORTB_PCR20_IRQC_SHIFT      16
#define  PORTB_PCR20_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR20_IRQC_SHIFT))&PORTB_PCR20_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR20_ISF_MASK        0x1000000u
#define  PORTB_PCR20_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR21_PS_MASK         0x1u
#define  PORTB_PCR21_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR21_PE_MASK         0x2u
#define  PORTB_PCR21_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR21_SRE_MASK        0x4u
#define  PORTB_PCR21_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR21_PFE_MASK        0x10u
#define  PORTB_PCR21_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR21_DSE_MASK        0x40u
#define  PORTB_PCR21_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR21_MUX_MASK        0x700u
#define  PORTB_PCR21_MUX_SHIFT       8
#define  PORTB_PCR21_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR21_MUX_SHIFT))&PORTB_PCR21_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR21_IRQC_MASK       0xF0000u
#define  PORTB_PCR21_IRQC_SHIFT      16
#define  PORTB_PCR21_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR21_IRQC_SHIFT))&PORTB_PCR21_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR21_ISF_MASK        0x1000000u
#define  PORTB_PCR21_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR22_PS_MASK         0x1u
#define  PORTB_PCR22_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR22_PE_MASK         0x2u
#define  PORTB_PCR22_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR22_SRE_MASK        0x4u
#define  PORTB_PCR22_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR22_PFE_MASK        0x10u
#define  PORTB_PCR22_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR22_DSE_MASK        0x40u
#define  PORTB_PCR22_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR22_MUX_MASK        0x700u
#define  PORTB_PCR22_MUX_SHIFT       8
#define  PORTB_PCR22_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR22_MUX_SHIFT))&PORTB_PCR22_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR22_IRQC_MASK       0xF0000u
#define  PORTB_PCR22_IRQC_SHIFT      16
#define  PORTB_PCR22_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR22_IRQC_SHIFT))&PORTB_PCR22_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR22_ISF_MASK        0x1000000u
#define  PORTB_PCR22_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR23_PS_MASK         0x1u
#define  PORTB_PCR23_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR23_PE_MASK         0x2u
#define  PORTB_PCR23_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR23_SRE_MASK        0x4u
#define  PORTB_PCR23_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR23_PFE_MASK        0x10u
#define  PORTB_PCR23_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR23_DSE_MASK        0x40u
#define  PORTB_PCR23_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR23_MUX_MASK        0x700u
#define  PORTB_PCR23_MUX_SHIFT       8
#define  PORTB_PCR23_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR23_MUX_SHIFT))&PORTB_PCR23_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR23_IRQC_MASK       0xF0000u
#define  PORTB_PCR23_IRQC_SHIFT      16
#define  PORTB_PCR23_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR23_IRQC_SHIFT))&PORTB_PCR23_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR23_ISF_MASK        0x1000000u
#define  PORTB_PCR23_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR24_PS_MASK         0x1u
#define  PORTB_PCR24_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR24_PE_MASK         0x2u
#define  PORTB_PCR24_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR24_SRE_MASK        0x4u
#define  PORTB_PCR24_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR24_PFE_MASK        0x10u
#define  PORTB_PCR24_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR24_DSE_MASK        0x40u
#define  PORTB_PCR24_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR24_MUX_MASK        0x700u
#define  PORTB_PCR24_MUX_SHIFT       8
#define  PORTB_PCR24_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR24_MUX_SHIFT))&PORTB_PCR24_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR24_IRQC_MASK       0xF0000u
#define  PORTB_PCR24_IRQC_SHIFT      16
#define  PORTB_PCR24_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR24_IRQC_SHIFT))&PORTB_PCR24_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR24_ISF_MASK        0x1000000u
#define  PORTB_PCR24_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR25_PS_MASK         0x1u
#define  PORTB_PCR25_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR25_PE_MASK         0x2u
#define  PORTB_PCR25_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR25_SRE_MASK        0x4u
#define  PORTB_PCR25_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR25_PFE_MASK        0x10u
#define  PORTB_PCR25_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR25_DSE_MASK        0x40u
#define  PORTB_PCR25_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR25_MUX_MASK        0x700u
#define  PORTB_PCR25_MUX_SHIFT       8
#define  PORTB_PCR25_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR25_MUX_SHIFT))&PORTB_PCR25_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR25_IRQC_MASK       0xF0000u
#define  PORTB_PCR25_IRQC_SHIFT      16
#define  PORTB_PCR25_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR25_IRQC_SHIFT))&PORTB_PCR25_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR25_ISF_MASK        0x1000000u
#define  PORTB_PCR25_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR26_PS_MASK         0x1u
#define  PORTB_PCR26_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR26_PE_MASK         0x2u
#define  PORTB_PCR26_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR26_SRE_MASK        0x4u
#define  PORTB_PCR26_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR26_PFE_MASK        0x10u
#define  PORTB_PCR26_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR26_DSE_MASK        0x40u
#define  PORTB_PCR26_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR26_MUX_MASK        0x700u
#define  PORTB_PCR26_MUX_SHIFT       8
#define  PORTB_PCR26_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR26_MUX_SHIFT))&PORTB_PCR26_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR26_IRQC_MASK       0xF0000u
#define  PORTB_PCR26_IRQC_SHIFT      16
#define  PORTB_PCR26_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR26_IRQC_SHIFT))&PORTB_PCR26_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR26_ISF_MASK        0x1000000u
#define  PORTB_PCR26_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR27_PS_MASK         0x1u
#define  PORTB_PCR27_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR27_PE_MASK         0x2u
#define  PORTB_PCR27_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR27_SRE_MASK        0x4u
#define  PORTB_PCR27_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR27_PFE_MASK        0x10u
#define  PORTB_PCR27_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR27_DSE_MASK        0x40u
#define  PORTB_PCR27_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR27_MUX_MASK        0x700u
#define  PORTB_PCR27_MUX_SHIFT       8
#define  PORTB_PCR27_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR27_MUX_SHIFT))&PORTB_PCR27_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR27_IRQC_MASK       0xF0000u
#define  PORTB_PCR27_IRQC_SHIFT      16
#define  PORTB_PCR27_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR27_IRQC_SHIFT))&PORTB_PCR27_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR27_ISF_MASK        0x1000000u
#define  PORTB_PCR27_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR28_PS_MASK         0x1u
#define  PORTB_PCR28_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR28_PE_MASK         0x2u
#define  PORTB_PCR28_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR28_SRE_MASK        0x4u
#define  PORTB_PCR28_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR28_PFE_MASK        0x10u
#define  PORTB_PCR28_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR28_DSE_MASK        0x40u
#define  PORTB_PCR28_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR28_MUX_MASK        0x700u
#define  PORTB_PCR28_MUX_SHIFT       8
#define  PORTB_PCR28_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR28_MUX_SHIFT))&PORTB_PCR28_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR28_IRQC_MASK       0xF0000u
#define  PORTB_PCR28_IRQC_SHIFT      16
#define  PORTB_PCR28_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR28_IRQC_SHIFT))&PORTB_PCR28_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR28_ISF_MASK        0x1000000u
#define  PORTB_PCR28_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR29_PS_MASK         0x1u
#define  PORTB_PCR29_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR29_PE_MASK         0x2u
#define  PORTB_PCR29_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR29_SRE_MASK        0x4u
#define  PORTB_PCR29_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR29_PFE_MASK        0x10u
#define  PORTB_PCR29_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR29_DSE_MASK        0x40u
#define  PORTB_PCR29_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR29_MUX_MASK        0x700u
#define  PORTB_PCR29_MUX_SHIFT       8
#define  PORTB_PCR29_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR29_MUX_SHIFT))&PORTB_PCR29_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR29_IRQC_MASK       0xF0000u
#define  PORTB_PCR29_IRQC_SHIFT      16
#define  PORTB_PCR29_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR29_IRQC_SHIFT))&PORTB_PCR29_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR29_ISF_MASK        0x1000000u
#define  PORTB_PCR29_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR30_PS_MASK         0x1u
#define  PORTB_PCR30_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR30_PE_MASK         0x2u
#define  PORTB_PCR30_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR30_SRE_MASK        0x4u
#define  PORTB_PCR30_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR30_PFE_MASK        0x10u
#define  PORTB_PCR30_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR30_DSE_MASK        0x40u
#define  PORTB_PCR30_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR30_MUX_MASK        0x700u
#define  PORTB_PCR30_MUX_SHIFT       8
#define  PORTB_PCR30_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR30_MUX_SHIFT))&PORTB_PCR30_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR30_IRQC_MASK       0xF0000u
#define  PORTB_PCR30_IRQC_SHIFT      16
#define  PORTB_PCR30_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR30_IRQC_SHIFT))&PORTB_PCR30_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR30_ISF_MASK        0x1000000u
#define  PORTB_PCR30_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_PCR31_PS_MASK         0x1u
#define  PORTB_PCR31_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTB_PCR31_PE_MASK         0x2u
#define  PORTB_PCR31_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTB_PCR31_SRE_MASK        0x4u
#define  PORTB_PCR31_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTB_PCR31_PFE_MASK        0x10u
#define  PORTB_PCR31_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTB_PCR31_DSE_MASK        0x40u
#define  PORTB_PCR31_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTB_PCR31_MUX_MASK        0x700u
#define  PORTB_PCR31_MUX_SHIFT       8
#define  PORTB_PCR31_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTB_PCR31_MUX_SHIFT))&PORTB_PCR31_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTB_PCR31_IRQC_MASK       0xF0000u
#define  PORTB_PCR31_IRQC_SHIFT      16
#define  PORTB_PCR31_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_PCR31_IRQC_SHIFT))&PORTB_PCR31_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTB_PCR31_ISF_MASK        0x1000000u
#define  PORTB_PCR31_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTB_GPCLR_GPWD_MASK       0xFFFFu
#define  PORTB_GPCLR_GPWD_SHIFT      0
#define  PORTB_GPCLR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_GPCLR_GPWD_SHIFT))&PORTB_GPCLR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTB_GPCLR_GPWE_MASK       0xFFFF0000u
#define  PORTB_GPCLR_GPWE_SHIFT      16
#define  PORTB_GPCLR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_GPCLR_GPWE_SHIFT))&PORTB_GPCLR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTB_GPCHR_GPWD_MASK       0xFFFFu
#define  PORTB_GPCHR_GPWD_SHIFT      0
#define  PORTB_GPCHR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_GPCHR_GPWD_SHIFT))&PORTB_GPCHR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTB_GPCHR_GPWE_MASK       0xFFFF0000u
#define  PORTB_GPCHR_GPWE_SHIFT      16
#define  PORTB_GPCHR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTB_GPCHR_GPWE_SHIFT))&PORTB_GPCHR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTB_ISFR_ISF_MASK         0xFFFFFFFFu
#define  PORTB_ISFR_ISF_SHIFT        0
#define  PORTB_ISFR_ISF(x)           (((uint32_t)(((uint32_t)(x))<<PORTB_ISFR_ISF_SHIFT))&PORTB_ISFR_ISF_MASK)
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR0_PS_MASK          0x1u
#define  PORTC_PCR0_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR0_PE_MASK          0x2u
#define  PORTC_PCR0_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR0_SRE_MASK         0x4u
#define  PORTC_PCR0_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR0_PFE_MASK         0x10u
#define  PORTC_PCR0_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR0_DSE_MASK         0x40u
#define  PORTC_PCR0_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR0_MUX_MASK         0x700u
#define  PORTC_PCR0_MUX_SHIFT        8
#define  PORTC_PCR0_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR0_MUX_SHIFT))&PORTC_PCR0_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR0_IRQC_MASK        0xF0000u
#define  PORTC_PCR0_IRQC_SHIFT       16
#define  PORTC_PCR0_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR0_IRQC_SHIFT))&PORTC_PCR0_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR0_ISF_MASK         0x1000000u
#define  PORTC_PCR0_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR1_PS_MASK          0x1u
#define  PORTC_PCR1_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR1_PE_MASK          0x2u
#define  PORTC_PCR1_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR1_SRE_MASK         0x4u
#define  PORTC_PCR1_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR1_PFE_MASK         0x10u
#define  PORTC_PCR1_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR1_DSE_MASK         0x40u
#define  PORTC_PCR1_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR1_MUX_MASK         0x700u
#define  PORTC_PCR1_MUX_SHIFT        8
#define  PORTC_PCR1_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR1_MUX_SHIFT))&PORTC_PCR1_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR1_IRQC_MASK        0xF0000u
#define  PORTC_PCR1_IRQC_SHIFT       16
#define  PORTC_PCR1_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR1_IRQC_SHIFT))&PORTC_PCR1_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR1_ISF_MASK         0x1000000u
#define  PORTC_PCR1_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR2_PS_MASK          0x1u
#define  PORTC_PCR2_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR2_PE_MASK          0x2u
#define  PORTC_PCR2_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR2_SRE_MASK         0x4u
#define  PORTC_PCR2_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR2_PFE_MASK         0x10u
#define  PORTC_PCR2_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR2_DSE_MASK         0x40u
#define  PORTC_PCR2_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR2_MUX_MASK         0x700u
#define  PORTC_PCR2_MUX_SHIFT        8
#define  PORTC_PCR2_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR2_MUX_SHIFT))&PORTC_PCR2_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR2_IRQC_MASK        0xF0000u
#define  PORTC_PCR2_IRQC_SHIFT       16
#define  PORTC_PCR2_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR2_IRQC_SHIFT))&PORTC_PCR2_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR2_ISF_MASK         0x1000000u
#define  PORTC_PCR2_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR3_PS_MASK          0x1u
#define  PORTC_PCR3_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR3_PE_MASK          0x2u
#define  PORTC_PCR3_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR3_SRE_MASK         0x4u
#define  PORTC_PCR3_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR3_PFE_MASK         0x10u
#define  PORTC_PCR3_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR3_DSE_MASK         0x40u
#define  PORTC_PCR3_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR3_MUX_MASK         0x700u
#define  PORTC_PCR3_MUX_SHIFT        8
#define  PORTC_PCR3_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR3_MUX_SHIFT))&PORTC_PCR3_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR3_IRQC_MASK        0xF0000u
#define  PORTC_PCR3_IRQC_SHIFT       16
#define  PORTC_PCR3_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR3_IRQC_SHIFT))&PORTC_PCR3_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR3_ISF_MASK         0x1000000u
#define  PORTC_PCR3_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR4_PS_MASK          0x1u
#define  PORTC_PCR4_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR4_PE_MASK          0x2u
#define  PORTC_PCR4_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR4_SRE_MASK         0x4u
#define  PORTC_PCR4_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR4_PFE_MASK         0x10u
#define  PORTC_PCR4_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR4_DSE_MASK         0x40u
#define  PORTC_PCR4_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR4_MUX_MASK         0x700u
#define  PORTC_PCR4_MUX_SHIFT        8
#define  PORTC_PCR4_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR4_MUX_SHIFT))&PORTC_PCR4_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR4_IRQC_MASK        0xF0000u
#define  PORTC_PCR4_IRQC_SHIFT       16
#define  PORTC_PCR4_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR4_IRQC_SHIFT))&PORTC_PCR4_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR4_ISF_MASK         0x1000000u
#define  PORTC_PCR4_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR5_PS_MASK          0x1u
#define  PORTC_PCR5_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR5_PE_MASK          0x2u
#define  PORTC_PCR5_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR5_SRE_MASK         0x4u
#define  PORTC_PCR5_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR5_PFE_MASK         0x10u
#define  PORTC_PCR5_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR5_DSE_MASK         0x40u
#define  PORTC_PCR5_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR5_MUX_MASK         0x700u
#define  PORTC_PCR5_MUX_SHIFT        8
#define  PORTC_PCR5_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR5_MUX_SHIFT))&PORTC_PCR5_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR5_IRQC_MASK        0xF0000u
#define  PORTC_PCR5_IRQC_SHIFT       16
#define  PORTC_PCR5_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR5_IRQC_SHIFT))&PORTC_PCR5_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR5_ISF_MASK         0x1000000u
#define  PORTC_PCR5_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR6_PS_MASK          0x1u
#define  PORTC_PCR6_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR6_PE_MASK          0x2u
#define  PORTC_PCR6_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR6_SRE_MASK         0x4u
#define  PORTC_PCR6_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR6_PFE_MASK         0x10u
#define  PORTC_PCR6_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR6_DSE_MASK         0x40u
#define  PORTC_PCR6_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR6_MUX_MASK         0x700u
#define  PORTC_PCR6_MUX_SHIFT        8
#define  PORTC_PCR6_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR6_MUX_SHIFT))&PORTC_PCR6_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR6_IRQC_MASK        0xF0000u
#define  PORTC_PCR6_IRQC_SHIFT       16
#define  PORTC_PCR6_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR6_IRQC_SHIFT))&PORTC_PCR6_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR6_ISF_MASK         0x1000000u
#define  PORTC_PCR6_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR7_PS_MASK          0x1u
#define  PORTC_PCR7_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR7_PE_MASK          0x2u
#define  PORTC_PCR7_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR7_SRE_MASK         0x4u
#define  PORTC_PCR7_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR7_PFE_MASK         0x10u
#define  PORTC_PCR7_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR7_DSE_MASK         0x40u
#define  PORTC_PCR7_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR7_MUX_MASK         0x700u
#define  PORTC_PCR7_MUX_SHIFT        8
#define  PORTC_PCR7_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR7_MUX_SHIFT))&PORTC_PCR7_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR7_IRQC_MASK        0xF0000u
#define  PORTC_PCR7_IRQC_SHIFT       16
#define  PORTC_PCR7_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR7_IRQC_SHIFT))&PORTC_PCR7_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR7_ISF_MASK         0x1000000u
#define  PORTC_PCR7_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR8_PS_MASK          0x1u
#define  PORTC_PCR8_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR8_PE_MASK          0x2u
#define  PORTC_PCR8_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR8_SRE_MASK         0x4u
#define  PORTC_PCR8_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR8_PFE_MASK         0x10u
#define  PORTC_PCR8_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR8_DSE_MASK         0x40u
#define  PORTC_PCR8_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR8_MUX_MASK         0x700u
#define  PORTC_PCR8_MUX_SHIFT        8
#define  PORTC_PCR8_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR8_MUX_SHIFT))&PORTC_PCR8_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR8_IRQC_MASK        0xF0000u
#define  PORTC_PCR8_IRQC_SHIFT       16
#define  PORTC_PCR8_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR8_IRQC_SHIFT))&PORTC_PCR8_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR8_ISF_MASK         0x1000000u
#define  PORTC_PCR8_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR9_PS_MASK          0x1u
#define  PORTC_PCR9_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR9_PE_MASK          0x2u
#define  PORTC_PCR9_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR9_SRE_MASK         0x4u
#define  PORTC_PCR9_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR9_PFE_MASK         0x10u
#define  PORTC_PCR9_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR9_DSE_MASK         0x40u
#define  PORTC_PCR9_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR9_MUX_MASK         0x700u
#define  PORTC_PCR9_MUX_SHIFT        8
#define  PORTC_PCR9_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_PCR9_MUX_SHIFT))&PORTC_PCR9_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR9_IRQC_MASK        0xF0000u
#define  PORTC_PCR9_IRQC_SHIFT       16
#define  PORTC_PCR9_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR9_IRQC_SHIFT))&PORTC_PCR9_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR9_ISF_MASK         0x1000000u
#define  PORTC_PCR9_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR10_PS_MASK         0x1u
#define  PORTC_PCR10_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR10_PE_MASK         0x2u
#define  PORTC_PCR10_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR10_SRE_MASK        0x4u
#define  PORTC_PCR10_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR10_PFE_MASK        0x10u
#define  PORTC_PCR10_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR10_DSE_MASK        0x40u
#define  PORTC_PCR10_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR10_MUX_MASK        0x700u
#define  PORTC_PCR10_MUX_SHIFT       8
#define  PORTC_PCR10_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR10_MUX_SHIFT))&PORTC_PCR10_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR10_IRQC_MASK       0xF0000u
#define  PORTC_PCR10_IRQC_SHIFT      16
#define  PORTC_PCR10_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR10_IRQC_SHIFT))&PORTC_PCR10_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR10_ISF_MASK        0x1000000u
#define  PORTC_PCR10_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR11_PS_MASK         0x1u
#define  PORTC_PCR11_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR11_PE_MASK         0x2u
#define  PORTC_PCR11_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR11_SRE_MASK        0x4u
#define  PORTC_PCR11_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR11_PFE_MASK        0x10u
#define  PORTC_PCR11_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR11_DSE_MASK        0x40u
#define  PORTC_PCR11_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR11_MUX_MASK        0x700u
#define  PORTC_PCR11_MUX_SHIFT       8
#define  PORTC_PCR11_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR11_MUX_SHIFT))&PORTC_PCR11_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR11_IRQC_MASK       0xF0000u
#define  PORTC_PCR11_IRQC_SHIFT      16
#define  PORTC_PCR11_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR11_IRQC_SHIFT))&PORTC_PCR11_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR11_ISF_MASK        0x1000000u
#define  PORTC_PCR11_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR12_PS_MASK         0x1u
#define  PORTC_PCR12_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR12_PE_MASK         0x2u
#define  PORTC_PCR12_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR12_SRE_MASK        0x4u
#define  PORTC_PCR12_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR12_PFE_MASK        0x10u
#define  PORTC_PCR12_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR12_DSE_MASK        0x40u
#define  PORTC_PCR12_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR12_MUX_MASK        0x700u
#define  PORTC_PCR12_MUX_SHIFT       8
#define  PORTC_PCR12_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR12_MUX_SHIFT))&PORTC_PCR12_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR12_IRQC_MASK       0xF0000u
#define  PORTC_PCR12_IRQC_SHIFT      16
#define  PORTC_PCR12_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR12_IRQC_SHIFT))&PORTC_PCR12_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR12_ISF_MASK        0x1000000u
#define  PORTC_PCR12_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR13_PS_MASK         0x1u
#define  PORTC_PCR13_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR13_PE_MASK         0x2u
#define  PORTC_PCR13_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR13_SRE_MASK        0x4u
#define  PORTC_PCR13_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR13_PFE_MASK        0x10u
#define  PORTC_PCR13_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR13_DSE_MASK        0x40u
#define  PORTC_PCR13_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR13_MUX_MASK        0x700u
#define  PORTC_PCR13_MUX_SHIFT       8
#define  PORTC_PCR13_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR13_MUX_SHIFT))&PORTC_PCR13_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR13_IRQC_MASK       0xF0000u
#define  PORTC_PCR13_IRQC_SHIFT      16
#define  PORTC_PCR13_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR13_IRQC_SHIFT))&PORTC_PCR13_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR13_ISF_MASK        0x1000000u
#define  PORTC_PCR13_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR14_PS_MASK         0x1u
#define  PORTC_PCR14_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR14_PE_MASK         0x2u
#define  PORTC_PCR14_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR14_SRE_MASK        0x4u
#define  PORTC_PCR14_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR14_PFE_MASK        0x10u
#define  PORTC_PCR14_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR14_DSE_MASK        0x40u
#define  PORTC_PCR14_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR14_MUX_MASK        0x700u
#define  PORTC_PCR14_MUX_SHIFT       8
#define  PORTC_PCR14_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR14_MUX_SHIFT))&PORTC_PCR14_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR14_IRQC_MASK       0xF0000u
#define  PORTC_PCR14_IRQC_SHIFT      16
#define  PORTC_PCR14_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR14_IRQC_SHIFT))&PORTC_PCR14_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR14_ISF_MASK        0x1000000u
#define  PORTC_PCR14_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR15_PS_MASK         0x1u
#define  PORTC_PCR15_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR15_PE_MASK         0x2u
#define  PORTC_PCR15_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR15_SRE_MASK        0x4u
#define  PORTC_PCR15_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR15_PFE_MASK        0x10u
#define  PORTC_PCR15_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR15_DSE_MASK        0x40u
#define  PORTC_PCR15_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR15_MUX_MASK        0x700u
#define  PORTC_PCR15_MUX_SHIFT       8
#define  PORTC_PCR15_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR15_MUX_SHIFT))&PORTC_PCR15_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR15_IRQC_MASK       0xF0000u
#define  PORTC_PCR15_IRQC_SHIFT      16
#define  PORTC_PCR15_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR15_IRQC_SHIFT))&PORTC_PCR15_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR15_ISF_MASK        0x1000000u
#define  PORTC_PCR15_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR16_PS_MASK         0x1u
#define  PORTC_PCR16_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR16_PE_MASK         0x2u
#define  PORTC_PCR16_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR16_SRE_MASK        0x4u
#define  PORTC_PCR16_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR16_PFE_MASK        0x10u
#define  PORTC_PCR16_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR16_DSE_MASK        0x40u
#define  PORTC_PCR16_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR16_MUX_MASK        0x700u
#define  PORTC_PCR16_MUX_SHIFT       8
#define  PORTC_PCR16_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR16_MUX_SHIFT))&PORTC_PCR16_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR16_IRQC_MASK       0xF0000u
#define  PORTC_PCR16_IRQC_SHIFT      16
#define  PORTC_PCR16_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR16_IRQC_SHIFT))&PORTC_PCR16_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR16_ISF_MASK        0x1000000u
#define  PORTC_PCR16_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR17_PS_MASK         0x1u
#define  PORTC_PCR17_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR17_PE_MASK         0x2u
#define  PORTC_PCR17_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR17_SRE_MASK        0x4u
#define  PORTC_PCR17_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR17_PFE_MASK        0x10u
#define  PORTC_PCR17_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR17_DSE_MASK        0x40u
#define  PORTC_PCR17_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR17_MUX_MASK        0x700u
#define  PORTC_PCR17_MUX_SHIFT       8
#define  PORTC_PCR17_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR17_MUX_SHIFT))&PORTC_PCR17_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR17_IRQC_MASK       0xF0000u
#define  PORTC_PCR17_IRQC_SHIFT      16
#define  PORTC_PCR17_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR17_IRQC_SHIFT))&PORTC_PCR17_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR17_ISF_MASK        0x1000000u
#define  PORTC_PCR17_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR18_PS_MASK         0x1u
#define  PORTC_PCR18_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR18_PE_MASK         0x2u
#define  PORTC_PCR18_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR18_SRE_MASK        0x4u
#define  PORTC_PCR18_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR18_PFE_MASK        0x10u
#define  PORTC_PCR18_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR18_DSE_MASK        0x40u
#define  PORTC_PCR18_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR18_MUX_MASK        0x700u
#define  PORTC_PCR18_MUX_SHIFT       8
#define  PORTC_PCR18_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR18_MUX_SHIFT))&PORTC_PCR18_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR18_IRQC_MASK       0xF0000u
#define  PORTC_PCR18_IRQC_SHIFT      16
#define  PORTC_PCR18_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR18_IRQC_SHIFT))&PORTC_PCR18_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR18_ISF_MASK        0x1000000u
#define  PORTC_PCR18_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR19_PS_MASK         0x1u
#define  PORTC_PCR19_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR19_PE_MASK         0x2u
#define  PORTC_PCR19_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR19_SRE_MASK        0x4u
#define  PORTC_PCR19_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR19_PFE_MASK        0x10u
#define  PORTC_PCR19_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR19_DSE_MASK        0x40u
#define  PORTC_PCR19_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR19_MUX_MASK        0x700u
#define  PORTC_PCR19_MUX_SHIFT       8
#define  PORTC_PCR19_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR19_MUX_SHIFT))&PORTC_PCR19_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR19_IRQC_MASK       0xF0000u
#define  PORTC_PCR19_IRQC_SHIFT      16
#define  PORTC_PCR19_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR19_IRQC_SHIFT))&PORTC_PCR19_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR19_ISF_MASK        0x1000000u
#define  PORTC_PCR19_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR20_PS_MASK         0x1u
#define  PORTC_PCR20_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR20_PE_MASK         0x2u
#define  PORTC_PCR20_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR20_SRE_MASK        0x4u
#define  PORTC_PCR20_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR20_PFE_MASK        0x10u
#define  PORTC_PCR20_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR20_DSE_MASK        0x40u
#define  PORTC_PCR20_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR20_MUX_MASK        0x700u
#define  PORTC_PCR20_MUX_SHIFT       8
#define  PORTC_PCR20_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR20_MUX_SHIFT))&PORTC_PCR20_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR20_IRQC_MASK       0xF0000u
#define  PORTC_PCR20_IRQC_SHIFT      16
#define  PORTC_PCR20_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR20_IRQC_SHIFT))&PORTC_PCR20_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR20_ISF_MASK        0x1000000u
#define  PORTC_PCR20_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR21_PS_MASK         0x1u
#define  PORTC_PCR21_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR21_PE_MASK         0x2u
#define  PORTC_PCR21_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR21_SRE_MASK        0x4u
#define  PORTC_PCR21_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR21_PFE_MASK        0x10u
#define  PORTC_PCR21_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR21_DSE_MASK        0x40u
#define  PORTC_PCR21_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR21_MUX_MASK        0x700u
#define  PORTC_PCR21_MUX_SHIFT       8
#define  PORTC_PCR21_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR21_MUX_SHIFT))&PORTC_PCR21_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR21_IRQC_MASK       0xF0000u
#define  PORTC_PCR21_IRQC_SHIFT      16
#define  PORTC_PCR21_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR21_IRQC_SHIFT))&PORTC_PCR21_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR21_ISF_MASK        0x1000000u
#define  PORTC_PCR21_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR22_PS_MASK         0x1u
#define  PORTC_PCR22_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR22_PE_MASK         0x2u
#define  PORTC_PCR22_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR22_SRE_MASK        0x4u
#define  PORTC_PCR22_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR22_PFE_MASK        0x10u
#define  PORTC_PCR22_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR22_DSE_MASK        0x40u
#define  PORTC_PCR22_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR22_MUX_MASK        0x700u
#define  PORTC_PCR22_MUX_SHIFT       8
#define  PORTC_PCR22_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR22_MUX_SHIFT))&PORTC_PCR22_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR22_IRQC_MASK       0xF0000u
#define  PORTC_PCR22_IRQC_SHIFT      16
#define  PORTC_PCR22_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR22_IRQC_SHIFT))&PORTC_PCR22_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR22_ISF_MASK        0x1000000u
#define  PORTC_PCR22_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR23_PS_MASK         0x1u
#define  PORTC_PCR23_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR23_PE_MASK         0x2u
#define  PORTC_PCR23_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR23_SRE_MASK        0x4u
#define  PORTC_PCR23_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR23_PFE_MASK        0x10u
#define  PORTC_PCR23_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR23_DSE_MASK        0x40u
#define  PORTC_PCR23_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR23_MUX_MASK        0x700u
#define  PORTC_PCR23_MUX_SHIFT       8
#define  PORTC_PCR23_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR23_MUX_SHIFT))&PORTC_PCR23_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR23_IRQC_MASK       0xF0000u
#define  PORTC_PCR23_IRQC_SHIFT      16
#define  PORTC_PCR23_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR23_IRQC_SHIFT))&PORTC_PCR23_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR23_ISF_MASK        0x1000000u
#define  PORTC_PCR23_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR24_PS_MASK         0x1u
#define  PORTC_PCR24_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR24_PE_MASK         0x2u
#define  PORTC_PCR24_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR24_SRE_MASK        0x4u
#define  PORTC_PCR24_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR24_PFE_MASK        0x10u
#define  PORTC_PCR24_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR24_DSE_MASK        0x40u
#define  PORTC_PCR24_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR24_MUX_MASK        0x700u
#define  PORTC_PCR24_MUX_SHIFT       8
#define  PORTC_PCR24_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR24_MUX_SHIFT))&PORTC_PCR24_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR24_IRQC_MASK       0xF0000u
#define  PORTC_PCR24_IRQC_SHIFT      16
#define  PORTC_PCR24_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR24_IRQC_SHIFT))&PORTC_PCR24_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR24_ISF_MASK        0x1000000u
#define  PORTC_PCR24_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR25_PS_MASK         0x1u
#define  PORTC_PCR25_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR25_PE_MASK         0x2u
#define  PORTC_PCR25_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR25_SRE_MASK        0x4u
#define  PORTC_PCR25_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR25_PFE_MASK        0x10u
#define  PORTC_PCR25_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR25_DSE_MASK        0x40u
#define  PORTC_PCR25_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR25_MUX_MASK        0x700u
#define  PORTC_PCR25_MUX_SHIFT       8
#define  PORTC_PCR25_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR25_MUX_SHIFT))&PORTC_PCR25_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR25_IRQC_MASK       0xF0000u
#define  PORTC_PCR25_IRQC_SHIFT      16
#define  PORTC_PCR25_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR25_IRQC_SHIFT))&PORTC_PCR25_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR25_ISF_MASK        0x1000000u
#define  PORTC_PCR25_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR26_PS_MASK         0x1u
#define  PORTC_PCR26_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR26_PE_MASK         0x2u
#define  PORTC_PCR26_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR26_SRE_MASK        0x4u
#define  PORTC_PCR26_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR26_PFE_MASK        0x10u
#define  PORTC_PCR26_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR26_DSE_MASK        0x40u
#define  PORTC_PCR26_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR26_MUX_MASK        0x700u
#define  PORTC_PCR26_MUX_SHIFT       8
#define  PORTC_PCR26_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR26_MUX_SHIFT))&PORTC_PCR26_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR26_IRQC_MASK       0xF0000u
#define  PORTC_PCR26_IRQC_SHIFT      16
#define  PORTC_PCR26_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR26_IRQC_SHIFT))&PORTC_PCR26_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR26_ISF_MASK        0x1000000u
#define  PORTC_PCR26_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR27_PS_MASK         0x1u
#define  PORTC_PCR27_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR27_PE_MASK         0x2u
#define  PORTC_PCR27_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR27_SRE_MASK        0x4u
#define  PORTC_PCR27_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR27_PFE_MASK        0x10u
#define  PORTC_PCR27_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR27_DSE_MASK        0x40u
#define  PORTC_PCR27_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR27_MUX_MASK        0x700u
#define  PORTC_PCR27_MUX_SHIFT       8
#define  PORTC_PCR27_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR27_MUX_SHIFT))&PORTC_PCR27_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR27_IRQC_MASK       0xF0000u
#define  PORTC_PCR27_IRQC_SHIFT      16
#define  PORTC_PCR27_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR27_IRQC_SHIFT))&PORTC_PCR27_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR27_ISF_MASK        0x1000000u
#define  PORTC_PCR27_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR28_PS_MASK         0x1u
#define  PORTC_PCR28_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR28_PE_MASK         0x2u
#define  PORTC_PCR28_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR28_SRE_MASK        0x4u
#define  PORTC_PCR28_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR28_PFE_MASK        0x10u
#define  PORTC_PCR28_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR28_DSE_MASK        0x40u
#define  PORTC_PCR28_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR28_MUX_MASK        0x700u
#define  PORTC_PCR28_MUX_SHIFT       8
#define  PORTC_PCR28_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR28_MUX_SHIFT))&PORTC_PCR28_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR28_IRQC_MASK       0xF0000u
#define  PORTC_PCR28_IRQC_SHIFT      16
#define  PORTC_PCR28_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR28_IRQC_SHIFT))&PORTC_PCR28_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR28_ISF_MASK        0x1000000u
#define  PORTC_PCR28_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR29_PS_MASK         0x1u
#define  PORTC_PCR29_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR29_PE_MASK         0x2u
#define  PORTC_PCR29_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR29_SRE_MASK        0x4u
#define  PORTC_PCR29_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR29_PFE_MASK        0x10u
#define  PORTC_PCR29_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR29_DSE_MASK        0x40u
#define  PORTC_PCR29_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR29_MUX_MASK        0x700u
#define  PORTC_PCR29_MUX_SHIFT       8
#define  PORTC_PCR29_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR29_MUX_SHIFT))&PORTC_PCR29_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR29_IRQC_MASK       0xF0000u
#define  PORTC_PCR29_IRQC_SHIFT      16
#define  PORTC_PCR29_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR29_IRQC_SHIFT))&PORTC_PCR29_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR29_ISF_MASK        0x1000000u
#define  PORTC_PCR29_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR30_PS_MASK         0x1u
#define  PORTC_PCR30_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR30_PE_MASK         0x2u
#define  PORTC_PCR30_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR30_SRE_MASK        0x4u
#define  PORTC_PCR30_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR30_PFE_MASK        0x10u
#define  PORTC_PCR30_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR30_DSE_MASK        0x40u
#define  PORTC_PCR30_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR30_MUX_MASK        0x700u
#define  PORTC_PCR30_MUX_SHIFT       8
#define  PORTC_PCR30_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR30_MUX_SHIFT))&PORTC_PCR30_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR30_IRQC_MASK       0xF0000u
#define  PORTC_PCR30_IRQC_SHIFT      16
#define  PORTC_PCR30_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR30_IRQC_SHIFT))&PORTC_PCR30_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR30_ISF_MASK        0x1000000u
#define  PORTC_PCR30_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_PCR31_PS_MASK         0x1u
#define  PORTC_PCR31_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTC_PCR31_PE_MASK         0x2u
#define  PORTC_PCR31_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTC_PCR31_SRE_MASK        0x4u
#define  PORTC_PCR31_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTC_PCR31_PFE_MASK        0x10u
#define  PORTC_PCR31_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTC_PCR31_DSE_MASK        0x40u
#define  PORTC_PCR31_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTC_PCR31_MUX_MASK        0x700u
#define  PORTC_PCR31_MUX_SHIFT       8
#define  PORTC_PCR31_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTC_PCR31_MUX_SHIFT))&PORTC_PCR31_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTC_PCR31_IRQC_MASK       0xF0000u
#define  PORTC_PCR31_IRQC_SHIFT      16
#define  PORTC_PCR31_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_PCR31_IRQC_SHIFT))&PORTC_PCR31_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTC_PCR31_ISF_MASK        0x1000000u
#define  PORTC_PCR31_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTC_GPCLR_GPWD_MASK       0xFFFFu
#define  PORTC_GPCLR_GPWD_SHIFT      0
#define  PORTC_GPCLR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_GPCLR_GPWD_SHIFT))&PORTC_GPCLR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTC_GPCLR_GPWE_MASK       0xFFFF0000u
#define  PORTC_GPCLR_GPWE_SHIFT      16
#define  PORTC_GPCLR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_GPCLR_GPWE_SHIFT))&PORTC_GPCLR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTC_GPCHR_GPWD_MASK       0xFFFFu
#define  PORTC_GPCHR_GPWD_SHIFT      0
#define  PORTC_GPCHR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_GPCHR_GPWD_SHIFT))&PORTC_GPCHR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTC_GPCHR_GPWE_MASK       0xFFFF0000u
#define  PORTC_GPCHR_GPWE_SHIFT      16
#define  PORTC_GPCHR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTC_GPCHR_GPWE_SHIFT))&PORTC_GPCHR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTC_ISFR_ISF_MASK         0xFFFFFFFFu
#define  PORTC_ISFR_ISF_SHIFT        0
#define  PORTC_ISFR_ISF(x)           (((uint32_t)(((uint32_t)(x))<<PORTC_ISFR_ISF_SHIFT))&PORTC_ISFR_ISF_MASK)
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR0_PS_MASK          0x1u
#define  PORTD_PCR0_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR0_PE_MASK          0x2u
#define  PORTD_PCR0_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR0_SRE_MASK         0x4u
#define  PORTD_PCR0_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR0_PFE_MASK         0x10u
#define  PORTD_PCR0_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR0_DSE_MASK         0x40u
#define  PORTD_PCR0_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR0_MUX_MASK         0x700u
#define  PORTD_PCR0_MUX_SHIFT        8
#define  PORTD_PCR0_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR0_MUX_SHIFT))&PORTD_PCR0_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR0_IRQC_MASK        0xF0000u
#define  PORTD_PCR0_IRQC_SHIFT       16
#define  PORTD_PCR0_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR0_IRQC_SHIFT))&PORTD_PCR0_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR0_ISF_MASK         0x1000000u
#define  PORTD_PCR0_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR1_PS_MASK          0x1u
#define  PORTD_PCR1_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR1_PE_MASK          0x2u
#define  PORTD_PCR1_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR1_SRE_MASK         0x4u
#define  PORTD_PCR1_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR1_PFE_MASK         0x10u
#define  PORTD_PCR1_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR1_DSE_MASK         0x40u
#define  PORTD_PCR1_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR1_MUX_MASK         0x700u
#define  PORTD_PCR1_MUX_SHIFT        8
#define  PORTD_PCR1_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR1_MUX_SHIFT))&PORTD_PCR1_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR1_IRQC_MASK        0xF0000u
#define  PORTD_PCR1_IRQC_SHIFT       16
#define  PORTD_PCR1_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR1_IRQC_SHIFT))&PORTD_PCR1_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR1_ISF_MASK         0x1000000u
#define  PORTD_PCR1_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR2_PS_MASK          0x1u
#define  PORTD_PCR2_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR2_PE_MASK          0x2u
#define  PORTD_PCR2_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR2_SRE_MASK         0x4u
#define  PORTD_PCR2_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR2_PFE_MASK         0x10u
#define  PORTD_PCR2_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR2_DSE_MASK         0x40u
#define  PORTD_PCR2_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR2_MUX_MASK         0x700u
#define  PORTD_PCR2_MUX_SHIFT        8
#define  PORTD_PCR2_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR2_MUX_SHIFT))&PORTD_PCR2_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR2_IRQC_MASK        0xF0000u
#define  PORTD_PCR2_IRQC_SHIFT       16
#define  PORTD_PCR2_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR2_IRQC_SHIFT))&PORTD_PCR2_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR2_ISF_MASK         0x1000000u
#define  PORTD_PCR2_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR3_PS_MASK          0x1u
#define  PORTD_PCR3_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR3_PE_MASK          0x2u
#define  PORTD_PCR3_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR3_SRE_MASK         0x4u
#define  PORTD_PCR3_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR3_PFE_MASK         0x10u
#define  PORTD_PCR3_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR3_DSE_MASK         0x40u
#define  PORTD_PCR3_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR3_MUX_MASK         0x700u
#define  PORTD_PCR3_MUX_SHIFT        8
#define  PORTD_PCR3_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR3_MUX_SHIFT))&PORTD_PCR3_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR3_IRQC_MASK        0xF0000u
#define  PORTD_PCR3_IRQC_SHIFT       16
#define  PORTD_PCR3_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR3_IRQC_SHIFT))&PORTD_PCR3_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR3_ISF_MASK         0x1000000u
#define  PORTD_PCR3_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR4_PS_MASK          0x1u
#define  PORTD_PCR4_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR4_PE_MASK          0x2u
#define  PORTD_PCR4_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR4_SRE_MASK         0x4u
#define  PORTD_PCR4_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR4_PFE_MASK         0x10u
#define  PORTD_PCR4_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR4_DSE_MASK         0x40u
#define  PORTD_PCR4_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR4_MUX_MASK         0x700u
#define  PORTD_PCR4_MUX_SHIFT        8
#define  PORTD_PCR4_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR4_MUX_SHIFT))&PORTD_PCR4_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR4_IRQC_MASK        0xF0000u
#define  PORTD_PCR4_IRQC_SHIFT       16
#define  PORTD_PCR4_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR4_IRQC_SHIFT))&PORTD_PCR4_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR4_ISF_MASK         0x1000000u
#define  PORTD_PCR4_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR5_PS_MASK          0x1u
#define  PORTD_PCR5_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR5_PE_MASK          0x2u
#define  PORTD_PCR5_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR5_SRE_MASK         0x4u
#define  PORTD_PCR5_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR5_PFE_MASK         0x10u
#define  PORTD_PCR5_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR5_DSE_MASK         0x40u
#define  PORTD_PCR5_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR5_MUX_MASK         0x700u
#define  PORTD_PCR5_MUX_SHIFT        8
#define  PORTD_PCR5_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR5_MUX_SHIFT))&PORTD_PCR5_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR5_IRQC_MASK        0xF0000u
#define  PORTD_PCR5_IRQC_SHIFT       16
#define  PORTD_PCR5_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR5_IRQC_SHIFT))&PORTD_PCR5_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR5_ISF_MASK         0x1000000u
#define  PORTD_PCR5_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR6_PS_MASK          0x1u
#define  PORTD_PCR6_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR6_PE_MASK          0x2u
#define  PORTD_PCR6_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR6_SRE_MASK         0x4u
#define  PORTD_PCR6_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR6_PFE_MASK         0x10u
#define  PORTD_PCR6_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR6_DSE_MASK         0x40u
#define  PORTD_PCR6_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR6_MUX_MASK         0x700u
#define  PORTD_PCR6_MUX_SHIFT        8
#define  PORTD_PCR6_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR6_MUX_SHIFT))&PORTD_PCR6_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR6_IRQC_MASK        0xF0000u
#define  PORTD_PCR6_IRQC_SHIFT       16
#define  PORTD_PCR6_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR6_IRQC_SHIFT))&PORTD_PCR6_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR6_ISF_MASK         0x1000000u
#define  PORTD_PCR6_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR7_PS_MASK          0x1u
#define  PORTD_PCR7_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR7_PE_MASK          0x2u
#define  PORTD_PCR7_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR7_SRE_MASK         0x4u
#define  PORTD_PCR7_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR7_PFE_MASK         0x10u
#define  PORTD_PCR7_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR7_DSE_MASK         0x40u
#define  PORTD_PCR7_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR7_MUX_MASK         0x700u
#define  PORTD_PCR7_MUX_SHIFT        8
#define  PORTD_PCR7_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR7_MUX_SHIFT))&PORTD_PCR7_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR7_IRQC_MASK        0xF0000u
#define  PORTD_PCR7_IRQC_SHIFT       16
#define  PORTD_PCR7_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR7_IRQC_SHIFT))&PORTD_PCR7_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR7_ISF_MASK         0x1000000u
#define  PORTD_PCR7_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR8_PS_MASK          0x1u
#define  PORTD_PCR8_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR8_PE_MASK          0x2u
#define  PORTD_PCR8_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR8_SRE_MASK         0x4u
#define  PORTD_PCR8_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR8_PFE_MASK         0x10u
#define  PORTD_PCR8_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR8_DSE_MASK         0x40u
#define  PORTD_PCR8_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR8_MUX_MASK         0x700u
#define  PORTD_PCR8_MUX_SHIFT        8
#define  PORTD_PCR8_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR8_MUX_SHIFT))&PORTD_PCR8_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR8_IRQC_MASK        0xF0000u
#define  PORTD_PCR8_IRQC_SHIFT       16
#define  PORTD_PCR8_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR8_IRQC_SHIFT))&PORTD_PCR8_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR8_ISF_MASK         0x1000000u
#define  PORTD_PCR8_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR9_PS_MASK          0x1u
#define  PORTD_PCR9_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR9_PE_MASK          0x2u
#define  PORTD_PCR9_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR9_SRE_MASK         0x4u
#define  PORTD_PCR9_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR9_PFE_MASK         0x10u
#define  PORTD_PCR9_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR9_DSE_MASK         0x40u
#define  PORTD_PCR9_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR9_MUX_MASK         0x700u
#define  PORTD_PCR9_MUX_SHIFT        8
#define  PORTD_PCR9_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_PCR9_MUX_SHIFT))&PORTD_PCR9_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR9_IRQC_MASK        0xF0000u
#define  PORTD_PCR9_IRQC_SHIFT       16
#define  PORTD_PCR9_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR9_IRQC_SHIFT))&PORTD_PCR9_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR9_ISF_MASK         0x1000000u
#define  PORTD_PCR9_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR10_PS_MASK         0x1u
#define  PORTD_PCR10_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR10_PE_MASK         0x2u
#define  PORTD_PCR10_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR10_SRE_MASK        0x4u
#define  PORTD_PCR10_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR10_PFE_MASK        0x10u
#define  PORTD_PCR10_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR10_DSE_MASK        0x40u
#define  PORTD_PCR10_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR10_MUX_MASK        0x700u
#define  PORTD_PCR10_MUX_SHIFT       8
#define  PORTD_PCR10_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR10_MUX_SHIFT))&PORTD_PCR10_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR10_IRQC_MASK       0xF0000u
#define  PORTD_PCR10_IRQC_SHIFT      16
#define  PORTD_PCR10_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR10_IRQC_SHIFT))&PORTD_PCR10_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR10_ISF_MASK        0x1000000u
#define  PORTD_PCR10_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR11_PS_MASK         0x1u
#define  PORTD_PCR11_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR11_PE_MASK         0x2u
#define  PORTD_PCR11_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR11_SRE_MASK        0x4u
#define  PORTD_PCR11_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR11_PFE_MASK        0x10u
#define  PORTD_PCR11_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR11_DSE_MASK        0x40u
#define  PORTD_PCR11_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR11_MUX_MASK        0x700u
#define  PORTD_PCR11_MUX_SHIFT       8
#define  PORTD_PCR11_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR11_MUX_SHIFT))&PORTD_PCR11_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR11_IRQC_MASK       0xF0000u
#define  PORTD_PCR11_IRQC_SHIFT      16
#define  PORTD_PCR11_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR11_IRQC_SHIFT))&PORTD_PCR11_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR11_ISF_MASK        0x1000000u
#define  PORTD_PCR11_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR12_PS_MASK         0x1u
#define  PORTD_PCR12_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR12_PE_MASK         0x2u
#define  PORTD_PCR12_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR12_SRE_MASK        0x4u
#define  PORTD_PCR12_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR12_PFE_MASK        0x10u
#define  PORTD_PCR12_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR12_DSE_MASK        0x40u
#define  PORTD_PCR12_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR12_MUX_MASK        0x700u
#define  PORTD_PCR12_MUX_SHIFT       8
#define  PORTD_PCR12_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR12_MUX_SHIFT))&PORTD_PCR12_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR12_IRQC_MASK       0xF0000u
#define  PORTD_PCR12_IRQC_SHIFT      16
#define  PORTD_PCR12_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR12_IRQC_SHIFT))&PORTD_PCR12_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR12_ISF_MASK        0x1000000u
#define  PORTD_PCR12_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR13_PS_MASK         0x1u
#define  PORTD_PCR13_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR13_PE_MASK         0x2u
#define  PORTD_PCR13_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR13_SRE_MASK        0x4u
#define  PORTD_PCR13_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR13_PFE_MASK        0x10u
#define  PORTD_PCR13_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR13_DSE_MASK        0x40u
#define  PORTD_PCR13_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR13_MUX_MASK        0x700u
#define  PORTD_PCR13_MUX_SHIFT       8
#define  PORTD_PCR13_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR13_MUX_SHIFT))&PORTD_PCR13_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR13_IRQC_MASK       0xF0000u
#define  PORTD_PCR13_IRQC_SHIFT      16
#define  PORTD_PCR13_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR13_IRQC_SHIFT))&PORTD_PCR13_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR13_ISF_MASK        0x1000000u
#define  PORTD_PCR13_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR14_PS_MASK         0x1u
#define  PORTD_PCR14_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR14_PE_MASK         0x2u
#define  PORTD_PCR14_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR14_SRE_MASK        0x4u
#define  PORTD_PCR14_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR14_PFE_MASK        0x10u
#define  PORTD_PCR14_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR14_DSE_MASK        0x40u
#define  PORTD_PCR14_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR14_MUX_MASK        0x700u
#define  PORTD_PCR14_MUX_SHIFT       8
#define  PORTD_PCR14_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR14_MUX_SHIFT))&PORTD_PCR14_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR14_IRQC_MASK       0xF0000u
#define  PORTD_PCR14_IRQC_SHIFT      16
#define  PORTD_PCR14_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR14_IRQC_SHIFT))&PORTD_PCR14_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR14_ISF_MASK        0x1000000u
#define  PORTD_PCR14_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR15_PS_MASK         0x1u
#define  PORTD_PCR15_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR15_PE_MASK         0x2u
#define  PORTD_PCR15_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR15_SRE_MASK        0x4u
#define  PORTD_PCR15_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR15_PFE_MASK        0x10u
#define  PORTD_PCR15_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR15_DSE_MASK        0x40u
#define  PORTD_PCR15_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR15_MUX_MASK        0x700u
#define  PORTD_PCR15_MUX_SHIFT       8
#define  PORTD_PCR15_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR15_MUX_SHIFT))&PORTD_PCR15_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR15_IRQC_MASK       0xF0000u
#define  PORTD_PCR15_IRQC_SHIFT      16
#define  PORTD_PCR15_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR15_IRQC_SHIFT))&PORTD_PCR15_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR15_ISF_MASK        0x1000000u
#define  PORTD_PCR15_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR16_PS_MASK         0x1u
#define  PORTD_PCR16_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR16_PE_MASK         0x2u
#define  PORTD_PCR16_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR16_SRE_MASK        0x4u
#define  PORTD_PCR16_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR16_PFE_MASK        0x10u
#define  PORTD_PCR16_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR16_DSE_MASK        0x40u
#define  PORTD_PCR16_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR16_MUX_MASK        0x700u
#define  PORTD_PCR16_MUX_SHIFT       8
#define  PORTD_PCR16_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR16_MUX_SHIFT))&PORTD_PCR16_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR16_IRQC_MASK       0xF0000u
#define  PORTD_PCR16_IRQC_SHIFT      16
#define  PORTD_PCR16_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR16_IRQC_SHIFT))&PORTD_PCR16_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR16_ISF_MASK        0x1000000u
#define  PORTD_PCR16_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR17_PS_MASK         0x1u
#define  PORTD_PCR17_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR17_PE_MASK         0x2u
#define  PORTD_PCR17_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR17_SRE_MASK        0x4u
#define  PORTD_PCR17_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR17_PFE_MASK        0x10u
#define  PORTD_PCR17_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR17_DSE_MASK        0x40u
#define  PORTD_PCR17_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR17_MUX_MASK        0x700u
#define  PORTD_PCR17_MUX_SHIFT       8
#define  PORTD_PCR17_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR17_MUX_SHIFT))&PORTD_PCR17_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR17_IRQC_MASK       0xF0000u
#define  PORTD_PCR17_IRQC_SHIFT      16
#define  PORTD_PCR17_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR17_IRQC_SHIFT))&PORTD_PCR17_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR17_ISF_MASK        0x1000000u
#define  PORTD_PCR17_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR18_PS_MASK         0x1u
#define  PORTD_PCR18_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR18_PE_MASK         0x2u
#define  PORTD_PCR18_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR18_SRE_MASK        0x4u
#define  PORTD_PCR18_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR18_PFE_MASK        0x10u
#define  PORTD_PCR18_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR18_DSE_MASK        0x40u
#define  PORTD_PCR18_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR18_MUX_MASK        0x700u
#define  PORTD_PCR18_MUX_SHIFT       8
#define  PORTD_PCR18_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR18_MUX_SHIFT))&PORTD_PCR18_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR18_IRQC_MASK       0xF0000u
#define  PORTD_PCR18_IRQC_SHIFT      16
#define  PORTD_PCR18_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR18_IRQC_SHIFT))&PORTD_PCR18_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR18_ISF_MASK        0x1000000u
#define  PORTD_PCR18_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR19_PS_MASK         0x1u
#define  PORTD_PCR19_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR19_PE_MASK         0x2u
#define  PORTD_PCR19_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR19_SRE_MASK        0x4u
#define  PORTD_PCR19_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR19_PFE_MASK        0x10u
#define  PORTD_PCR19_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR19_DSE_MASK        0x40u
#define  PORTD_PCR19_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR19_MUX_MASK        0x700u
#define  PORTD_PCR19_MUX_SHIFT       8
#define  PORTD_PCR19_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR19_MUX_SHIFT))&PORTD_PCR19_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR19_IRQC_MASK       0xF0000u
#define  PORTD_PCR19_IRQC_SHIFT      16
#define  PORTD_PCR19_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR19_IRQC_SHIFT))&PORTD_PCR19_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR19_ISF_MASK        0x1000000u
#define  PORTD_PCR19_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR20_PS_MASK         0x1u
#define  PORTD_PCR20_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR20_PE_MASK         0x2u
#define  PORTD_PCR20_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR20_SRE_MASK        0x4u
#define  PORTD_PCR20_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR20_PFE_MASK        0x10u
#define  PORTD_PCR20_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR20_DSE_MASK        0x40u
#define  PORTD_PCR20_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR20_MUX_MASK        0x700u
#define  PORTD_PCR20_MUX_SHIFT       8
#define  PORTD_PCR20_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR20_MUX_SHIFT))&PORTD_PCR20_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR20_IRQC_MASK       0xF0000u
#define  PORTD_PCR20_IRQC_SHIFT      16
#define  PORTD_PCR20_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR20_IRQC_SHIFT))&PORTD_PCR20_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR20_ISF_MASK        0x1000000u
#define  PORTD_PCR20_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR21_PS_MASK         0x1u
#define  PORTD_PCR21_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR21_PE_MASK         0x2u
#define  PORTD_PCR21_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR21_SRE_MASK        0x4u
#define  PORTD_PCR21_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR21_PFE_MASK        0x10u
#define  PORTD_PCR21_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR21_DSE_MASK        0x40u
#define  PORTD_PCR21_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR21_MUX_MASK        0x700u
#define  PORTD_PCR21_MUX_SHIFT       8
#define  PORTD_PCR21_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR21_MUX_SHIFT))&PORTD_PCR21_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR21_IRQC_MASK       0xF0000u
#define  PORTD_PCR21_IRQC_SHIFT      16
#define  PORTD_PCR21_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR21_IRQC_SHIFT))&PORTD_PCR21_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR21_ISF_MASK        0x1000000u
#define  PORTD_PCR21_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR22_PS_MASK         0x1u
#define  PORTD_PCR22_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR22_PE_MASK         0x2u
#define  PORTD_PCR22_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR22_SRE_MASK        0x4u
#define  PORTD_PCR22_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR22_PFE_MASK        0x10u
#define  PORTD_PCR22_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR22_DSE_MASK        0x40u
#define  PORTD_PCR22_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR22_MUX_MASK        0x700u
#define  PORTD_PCR22_MUX_SHIFT       8
#define  PORTD_PCR22_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR22_MUX_SHIFT))&PORTD_PCR22_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR22_IRQC_MASK       0xF0000u
#define  PORTD_PCR22_IRQC_SHIFT      16
#define  PORTD_PCR22_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR22_IRQC_SHIFT))&PORTD_PCR22_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR22_ISF_MASK        0x1000000u
#define  PORTD_PCR22_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR23_PS_MASK         0x1u
#define  PORTD_PCR23_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR23_PE_MASK         0x2u
#define  PORTD_PCR23_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR23_SRE_MASK        0x4u
#define  PORTD_PCR23_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR23_PFE_MASK        0x10u
#define  PORTD_PCR23_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR23_DSE_MASK        0x40u
#define  PORTD_PCR23_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR23_MUX_MASK        0x700u
#define  PORTD_PCR23_MUX_SHIFT       8
#define  PORTD_PCR23_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR23_MUX_SHIFT))&PORTD_PCR23_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR23_IRQC_MASK       0xF0000u
#define  PORTD_PCR23_IRQC_SHIFT      16
#define  PORTD_PCR23_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR23_IRQC_SHIFT))&PORTD_PCR23_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR23_ISF_MASK        0x1000000u
#define  PORTD_PCR23_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR24_PS_MASK         0x1u
#define  PORTD_PCR24_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR24_PE_MASK         0x2u
#define  PORTD_PCR24_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR24_SRE_MASK        0x4u
#define  PORTD_PCR24_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR24_PFE_MASK        0x10u
#define  PORTD_PCR24_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR24_DSE_MASK        0x40u
#define  PORTD_PCR24_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR24_MUX_MASK        0x700u
#define  PORTD_PCR24_MUX_SHIFT       8
#define  PORTD_PCR24_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR24_MUX_SHIFT))&PORTD_PCR24_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR24_IRQC_MASK       0xF0000u
#define  PORTD_PCR24_IRQC_SHIFT      16
#define  PORTD_PCR24_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR24_IRQC_SHIFT))&PORTD_PCR24_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR24_ISF_MASK        0x1000000u
#define  PORTD_PCR24_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR25_PS_MASK         0x1u
#define  PORTD_PCR25_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR25_PE_MASK         0x2u
#define  PORTD_PCR25_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR25_SRE_MASK        0x4u
#define  PORTD_PCR25_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR25_PFE_MASK        0x10u
#define  PORTD_PCR25_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR25_DSE_MASK        0x40u
#define  PORTD_PCR25_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR25_MUX_MASK        0x700u
#define  PORTD_PCR25_MUX_SHIFT       8
#define  PORTD_PCR25_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR25_MUX_SHIFT))&PORTD_PCR25_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR25_IRQC_MASK       0xF0000u
#define  PORTD_PCR25_IRQC_SHIFT      16
#define  PORTD_PCR25_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR25_IRQC_SHIFT))&PORTD_PCR25_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR25_ISF_MASK        0x1000000u
#define  PORTD_PCR25_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR26_PS_MASK         0x1u
#define  PORTD_PCR26_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR26_PE_MASK         0x2u
#define  PORTD_PCR26_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR26_SRE_MASK        0x4u
#define  PORTD_PCR26_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR26_PFE_MASK        0x10u
#define  PORTD_PCR26_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR26_DSE_MASK        0x40u
#define  PORTD_PCR26_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR26_MUX_MASK        0x700u
#define  PORTD_PCR26_MUX_SHIFT       8
#define  PORTD_PCR26_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR26_MUX_SHIFT))&PORTD_PCR26_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR26_IRQC_MASK       0xF0000u
#define  PORTD_PCR26_IRQC_SHIFT      16
#define  PORTD_PCR26_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR26_IRQC_SHIFT))&PORTD_PCR26_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR26_ISF_MASK        0x1000000u
#define  PORTD_PCR26_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR27_PS_MASK         0x1u
#define  PORTD_PCR27_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR27_PE_MASK         0x2u
#define  PORTD_PCR27_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR27_SRE_MASK        0x4u
#define  PORTD_PCR27_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR27_PFE_MASK        0x10u
#define  PORTD_PCR27_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR27_DSE_MASK        0x40u
#define  PORTD_PCR27_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR27_MUX_MASK        0x700u
#define  PORTD_PCR27_MUX_SHIFT       8
#define  PORTD_PCR27_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR27_MUX_SHIFT))&PORTD_PCR27_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR27_IRQC_MASK       0xF0000u
#define  PORTD_PCR27_IRQC_SHIFT      16
#define  PORTD_PCR27_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR27_IRQC_SHIFT))&PORTD_PCR27_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR27_ISF_MASK        0x1000000u
#define  PORTD_PCR27_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR28_PS_MASK         0x1u
#define  PORTD_PCR28_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR28_PE_MASK         0x2u
#define  PORTD_PCR28_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR28_SRE_MASK        0x4u
#define  PORTD_PCR28_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR28_PFE_MASK        0x10u
#define  PORTD_PCR28_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR28_DSE_MASK        0x40u
#define  PORTD_PCR28_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR28_MUX_MASK        0x700u
#define  PORTD_PCR28_MUX_SHIFT       8
#define  PORTD_PCR28_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR28_MUX_SHIFT))&PORTD_PCR28_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR28_IRQC_MASK       0xF0000u
#define  PORTD_PCR28_IRQC_SHIFT      16
#define  PORTD_PCR28_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR28_IRQC_SHIFT))&PORTD_PCR28_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR28_ISF_MASK        0x1000000u
#define  PORTD_PCR28_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR29_PS_MASK         0x1u
#define  PORTD_PCR29_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR29_PE_MASK         0x2u
#define  PORTD_PCR29_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR29_SRE_MASK        0x4u
#define  PORTD_PCR29_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR29_PFE_MASK        0x10u
#define  PORTD_PCR29_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR29_DSE_MASK        0x40u
#define  PORTD_PCR29_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR29_MUX_MASK        0x700u
#define  PORTD_PCR29_MUX_SHIFT       8
#define  PORTD_PCR29_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR29_MUX_SHIFT))&PORTD_PCR29_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR29_IRQC_MASK       0xF0000u
#define  PORTD_PCR29_IRQC_SHIFT      16
#define  PORTD_PCR29_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR29_IRQC_SHIFT))&PORTD_PCR29_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR29_ISF_MASK        0x1000000u
#define  PORTD_PCR29_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR30_PS_MASK         0x1u
#define  PORTD_PCR30_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR30_PE_MASK         0x2u
#define  PORTD_PCR30_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR30_SRE_MASK        0x4u
#define  PORTD_PCR30_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR30_PFE_MASK        0x10u
#define  PORTD_PCR30_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR30_DSE_MASK        0x40u
#define  PORTD_PCR30_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR30_MUX_MASK        0x700u
#define  PORTD_PCR30_MUX_SHIFT       8
#define  PORTD_PCR30_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR30_MUX_SHIFT))&PORTD_PCR30_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR30_IRQC_MASK       0xF0000u
#define  PORTD_PCR30_IRQC_SHIFT      16
#define  PORTD_PCR30_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR30_IRQC_SHIFT))&PORTD_PCR30_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR30_ISF_MASK        0x1000000u
#define  PORTD_PCR30_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_PCR31_PS_MASK         0x1u
#define  PORTD_PCR31_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTD_PCR31_PE_MASK         0x2u
#define  PORTD_PCR31_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTD_PCR31_SRE_MASK        0x4u
#define  PORTD_PCR31_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTD_PCR31_PFE_MASK        0x10u
#define  PORTD_PCR31_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTD_PCR31_DSE_MASK        0x40u
#define  PORTD_PCR31_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTD_PCR31_MUX_MASK        0x700u
#define  PORTD_PCR31_MUX_SHIFT       8
#define  PORTD_PCR31_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTD_PCR31_MUX_SHIFT))&PORTD_PCR31_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTD_PCR31_IRQC_MASK       0xF0000u
#define  PORTD_PCR31_IRQC_SHIFT      16
#define  PORTD_PCR31_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_PCR31_IRQC_SHIFT))&PORTD_PCR31_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTD_PCR31_ISF_MASK        0x1000000u
#define  PORTD_PCR31_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTD_GPCLR_GPWD_MASK       0xFFFFu
#define  PORTD_GPCLR_GPWD_SHIFT      0
#define  PORTD_GPCLR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_GPCLR_GPWD_SHIFT))&PORTD_GPCLR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTD_GPCLR_GPWE_MASK       0xFFFF0000u
#define  PORTD_GPCLR_GPWE_SHIFT      16
#define  PORTD_GPCLR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_GPCLR_GPWE_SHIFT))&PORTD_GPCLR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTD_GPCHR_GPWD_MASK       0xFFFFu
#define  PORTD_GPCHR_GPWD_SHIFT      0
#define  PORTD_GPCHR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_GPCHR_GPWD_SHIFT))&PORTD_GPCHR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTD_GPCHR_GPWE_MASK       0xFFFF0000u
#define  PORTD_GPCHR_GPWE_SHIFT      16
#define  PORTD_GPCHR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTD_GPCHR_GPWE_SHIFT))&PORTD_GPCHR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTD_ISFR_ISF_MASK         0xFFFFFFFFu
#define  PORTD_ISFR_ISF_SHIFT        0
#define  PORTD_ISFR_ISF(x)           (((uint32_t)(((uint32_t)(x))<<PORTD_ISFR_ISF_SHIFT))&PORTD_ISFR_ISF_MASK)
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR0_PS_MASK          0x1u
#define  PORTE_PCR0_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR0_PE_MASK          0x2u
#define  PORTE_PCR0_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR0_SRE_MASK         0x4u
#define  PORTE_PCR0_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR0_PFE_MASK         0x10u
#define  PORTE_PCR0_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR0_DSE_MASK         0x40u
#define  PORTE_PCR0_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR0_MUX_MASK         0x700u
#define  PORTE_PCR0_MUX_SHIFT        8
#define  PORTE_PCR0_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR0_MUX_SHIFT))&PORTE_PCR0_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR0_IRQC_MASK        0xF0000u
#define  PORTE_PCR0_IRQC_SHIFT       16
#define  PORTE_PCR0_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR0_IRQC_SHIFT))&PORTE_PCR0_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR0_ISF_MASK         0x1000000u
#define  PORTE_PCR0_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR1_PS_MASK          0x1u
#define  PORTE_PCR1_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR1_PE_MASK          0x2u
#define  PORTE_PCR1_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR1_SRE_MASK         0x4u
#define  PORTE_PCR1_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR1_PFE_MASK         0x10u
#define  PORTE_PCR1_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR1_DSE_MASK         0x40u
#define  PORTE_PCR1_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR1_MUX_MASK         0x700u
#define  PORTE_PCR1_MUX_SHIFT        8
#define  PORTE_PCR1_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR1_MUX_SHIFT))&PORTE_PCR1_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR1_IRQC_MASK        0xF0000u
#define  PORTE_PCR1_IRQC_SHIFT       16
#define  PORTE_PCR1_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR1_IRQC_SHIFT))&PORTE_PCR1_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR1_ISF_MASK         0x1000000u
#define  PORTE_PCR1_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR2_PS_MASK          0x1u
#define  PORTE_PCR2_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR2_PE_MASK          0x2u
#define  PORTE_PCR2_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR2_SRE_MASK         0x4u
#define  PORTE_PCR2_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR2_PFE_MASK         0x10u
#define  PORTE_PCR2_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR2_DSE_MASK         0x40u
#define  PORTE_PCR2_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR2_MUX_MASK         0x700u
#define  PORTE_PCR2_MUX_SHIFT        8
#define  PORTE_PCR2_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR2_MUX_SHIFT))&PORTE_PCR2_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR2_IRQC_MASK        0xF0000u
#define  PORTE_PCR2_IRQC_SHIFT       16
#define  PORTE_PCR2_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR2_IRQC_SHIFT))&PORTE_PCR2_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR2_ISF_MASK         0x1000000u
#define  PORTE_PCR2_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR3_PS_MASK          0x1u
#define  PORTE_PCR3_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR3_PE_MASK          0x2u
#define  PORTE_PCR3_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR3_SRE_MASK         0x4u
#define  PORTE_PCR3_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR3_PFE_MASK         0x10u
#define  PORTE_PCR3_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR3_DSE_MASK         0x40u
#define  PORTE_PCR3_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR3_MUX_MASK         0x700u
#define  PORTE_PCR3_MUX_SHIFT        8
#define  PORTE_PCR3_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR3_MUX_SHIFT))&PORTE_PCR3_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR3_IRQC_MASK        0xF0000u
#define  PORTE_PCR3_IRQC_SHIFT       16
#define  PORTE_PCR3_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR3_IRQC_SHIFT))&PORTE_PCR3_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR3_ISF_MASK         0x1000000u
#define  PORTE_PCR3_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR4_PS_MASK          0x1u
#define  PORTE_PCR4_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR4_PE_MASK          0x2u
#define  PORTE_PCR4_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR4_SRE_MASK         0x4u
#define  PORTE_PCR4_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR4_PFE_MASK         0x10u
#define  PORTE_PCR4_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR4_DSE_MASK         0x40u
#define  PORTE_PCR4_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR4_MUX_MASK         0x700u
#define  PORTE_PCR4_MUX_SHIFT        8
#define  PORTE_PCR4_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR4_MUX_SHIFT))&PORTE_PCR4_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR4_IRQC_MASK        0xF0000u
#define  PORTE_PCR4_IRQC_SHIFT       16
#define  PORTE_PCR4_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR4_IRQC_SHIFT))&PORTE_PCR4_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR4_ISF_MASK         0x1000000u
#define  PORTE_PCR4_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR5_PS_MASK          0x1u
#define  PORTE_PCR5_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR5_PE_MASK          0x2u
#define  PORTE_PCR5_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR5_SRE_MASK         0x4u
#define  PORTE_PCR5_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR5_PFE_MASK         0x10u
#define  PORTE_PCR5_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR5_DSE_MASK         0x40u
#define  PORTE_PCR5_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR5_MUX_MASK         0x700u
#define  PORTE_PCR5_MUX_SHIFT        8
#define  PORTE_PCR5_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR5_MUX_SHIFT))&PORTE_PCR5_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR5_IRQC_MASK        0xF0000u
#define  PORTE_PCR5_IRQC_SHIFT       16
#define  PORTE_PCR5_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR5_IRQC_SHIFT))&PORTE_PCR5_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR5_ISF_MASK         0x1000000u
#define  PORTE_PCR5_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR6_PS_MASK          0x1u
#define  PORTE_PCR6_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR6_PE_MASK          0x2u
#define  PORTE_PCR6_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR6_SRE_MASK         0x4u
#define  PORTE_PCR6_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR6_PFE_MASK         0x10u
#define  PORTE_PCR6_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR6_DSE_MASK         0x40u
#define  PORTE_PCR6_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR6_MUX_MASK         0x700u
#define  PORTE_PCR6_MUX_SHIFT        8
#define  PORTE_PCR6_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR6_MUX_SHIFT))&PORTE_PCR6_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR6_IRQC_MASK        0xF0000u
#define  PORTE_PCR6_IRQC_SHIFT       16
#define  PORTE_PCR6_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR6_IRQC_SHIFT))&PORTE_PCR6_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR6_ISF_MASK         0x1000000u
#define  PORTE_PCR6_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR7_PS_MASK          0x1u
#define  PORTE_PCR7_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR7_PE_MASK          0x2u
#define  PORTE_PCR7_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR7_SRE_MASK         0x4u
#define  PORTE_PCR7_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR7_PFE_MASK         0x10u
#define  PORTE_PCR7_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR7_DSE_MASK         0x40u
#define  PORTE_PCR7_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR7_MUX_MASK         0x700u
#define  PORTE_PCR7_MUX_SHIFT        8
#define  PORTE_PCR7_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR7_MUX_SHIFT))&PORTE_PCR7_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR7_IRQC_MASK        0xF0000u
#define  PORTE_PCR7_IRQC_SHIFT       16
#define  PORTE_PCR7_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR7_IRQC_SHIFT))&PORTE_PCR7_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR7_ISF_MASK         0x1000000u
#define  PORTE_PCR7_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR8_PS_MASK          0x1u
#define  PORTE_PCR8_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR8_PE_MASK          0x2u
#define  PORTE_PCR8_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR8_SRE_MASK         0x4u
#define  PORTE_PCR8_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR8_PFE_MASK         0x10u
#define  PORTE_PCR8_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR8_DSE_MASK         0x40u
#define  PORTE_PCR8_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR8_MUX_MASK         0x700u
#define  PORTE_PCR8_MUX_SHIFT        8
#define  PORTE_PCR8_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR8_MUX_SHIFT))&PORTE_PCR8_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR8_IRQC_MASK        0xF0000u
#define  PORTE_PCR8_IRQC_SHIFT       16
#define  PORTE_PCR8_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR8_IRQC_SHIFT))&PORTE_PCR8_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR8_ISF_MASK         0x1000000u
#define  PORTE_PCR8_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR9_PS_MASK          0x1u
#define  PORTE_PCR9_PS_SHIFT         0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR9_PE_MASK          0x2u
#define  PORTE_PCR9_PE_SHIFT         1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR9_SRE_MASK         0x4u
#define  PORTE_PCR9_SRE_SHIFT        2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR9_PFE_MASK         0x10u
#define  PORTE_PCR9_PFE_SHIFT        4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR9_DSE_MASK         0x40u
#define  PORTE_PCR9_DSE_SHIFT        6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR9_MUX_MASK         0x700u
#define  PORTE_PCR9_MUX_SHIFT        8
#define  PORTE_PCR9_MUX(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_PCR9_MUX_SHIFT))&PORTE_PCR9_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR9_IRQC_MASK        0xF0000u
#define  PORTE_PCR9_IRQC_SHIFT       16
#define  PORTE_PCR9_IRQC(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR9_IRQC_SHIFT))&PORTE_PCR9_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR9_ISF_MASK         0x1000000u
#define  PORTE_PCR9_ISF_SHIFT        24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR10_PS_MASK         0x1u
#define  PORTE_PCR10_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR10_PE_MASK         0x2u
#define  PORTE_PCR10_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR10_SRE_MASK        0x4u
#define  PORTE_PCR10_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR10_PFE_MASK        0x10u
#define  PORTE_PCR10_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR10_DSE_MASK        0x40u
#define  PORTE_PCR10_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR10_MUX_MASK        0x700u
#define  PORTE_PCR10_MUX_SHIFT       8
#define  PORTE_PCR10_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR10_MUX_SHIFT))&PORTE_PCR10_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR10_IRQC_MASK       0xF0000u
#define  PORTE_PCR10_IRQC_SHIFT      16
#define  PORTE_PCR10_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR10_IRQC_SHIFT))&PORTE_PCR10_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR10_ISF_MASK        0x1000000u
#define  PORTE_PCR10_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR11_PS_MASK         0x1u
#define  PORTE_PCR11_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR11_PE_MASK         0x2u
#define  PORTE_PCR11_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR11_SRE_MASK        0x4u
#define  PORTE_PCR11_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR11_PFE_MASK        0x10u
#define  PORTE_PCR11_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR11_DSE_MASK        0x40u
#define  PORTE_PCR11_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR11_MUX_MASK        0x700u
#define  PORTE_PCR11_MUX_SHIFT       8
#define  PORTE_PCR11_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR11_MUX_SHIFT))&PORTE_PCR11_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR11_IRQC_MASK       0xF0000u
#define  PORTE_PCR11_IRQC_SHIFT      16
#define  PORTE_PCR11_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR11_IRQC_SHIFT))&PORTE_PCR11_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR11_ISF_MASK        0x1000000u
#define  PORTE_PCR11_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR12_PS_MASK         0x1u
#define  PORTE_PCR12_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR12_PE_MASK         0x2u
#define  PORTE_PCR12_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR12_SRE_MASK        0x4u
#define  PORTE_PCR12_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR12_PFE_MASK        0x10u
#define  PORTE_PCR12_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR12_DSE_MASK        0x40u
#define  PORTE_PCR12_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR12_MUX_MASK        0x700u
#define  PORTE_PCR12_MUX_SHIFT       8
#define  PORTE_PCR12_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR12_MUX_SHIFT))&PORTE_PCR12_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR12_IRQC_MASK       0xF0000u
#define  PORTE_PCR12_IRQC_SHIFT      16
#define  PORTE_PCR12_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR12_IRQC_SHIFT))&PORTE_PCR12_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR12_ISF_MASK        0x1000000u
#define  PORTE_PCR12_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR13_PS_MASK         0x1u
#define  PORTE_PCR13_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR13_PE_MASK         0x2u
#define  PORTE_PCR13_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR13_SRE_MASK        0x4u
#define  PORTE_PCR13_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR13_PFE_MASK        0x10u
#define  PORTE_PCR13_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR13_DSE_MASK        0x40u
#define  PORTE_PCR13_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR13_MUX_MASK        0x700u
#define  PORTE_PCR13_MUX_SHIFT       8
#define  PORTE_PCR13_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR13_MUX_SHIFT))&PORTE_PCR13_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR13_IRQC_MASK       0xF0000u
#define  PORTE_PCR13_IRQC_SHIFT      16
#define  PORTE_PCR13_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR13_IRQC_SHIFT))&PORTE_PCR13_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR13_ISF_MASK        0x1000000u
#define  PORTE_PCR13_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR14_PS_MASK         0x1u
#define  PORTE_PCR14_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR14_PE_MASK         0x2u
#define  PORTE_PCR14_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR14_SRE_MASK        0x4u
#define  PORTE_PCR14_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR14_PFE_MASK        0x10u
#define  PORTE_PCR14_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR14_DSE_MASK        0x40u
#define  PORTE_PCR14_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR14_MUX_MASK        0x700u
#define  PORTE_PCR14_MUX_SHIFT       8
#define  PORTE_PCR14_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR14_MUX_SHIFT))&PORTE_PCR14_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR14_IRQC_MASK       0xF0000u
#define  PORTE_PCR14_IRQC_SHIFT      16
#define  PORTE_PCR14_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR14_IRQC_SHIFT))&PORTE_PCR14_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR14_ISF_MASK        0x1000000u
#define  PORTE_PCR14_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR15_PS_MASK         0x1u
#define  PORTE_PCR15_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR15_PE_MASK         0x2u
#define  PORTE_PCR15_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR15_SRE_MASK        0x4u
#define  PORTE_PCR15_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR15_PFE_MASK        0x10u
#define  PORTE_PCR15_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR15_DSE_MASK        0x40u
#define  PORTE_PCR15_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR15_MUX_MASK        0x700u
#define  PORTE_PCR15_MUX_SHIFT       8
#define  PORTE_PCR15_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR15_MUX_SHIFT))&PORTE_PCR15_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR15_IRQC_MASK       0xF0000u
#define  PORTE_PCR15_IRQC_SHIFT      16
#define  PORTE_PCR15_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR15_IRQC_SHIFT))&PORTE_PCR15_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR15_ISF_MASK        0x1000000u
#define  PORTE_PCR15_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR16_PS_MASK         0x1u
#define  PORTE_PCR16_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR16_PE_MASK         0x2u
#define  PORTE_PCR16_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR16_SRE_MASK        0x4u
#define  PORTE_PCR16_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR16_PFE_MASK        0x10u
#define  PORTE_PCR16_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR16_DSE_MASK        0x40u
#define  PORTE_PCR16_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR16_MUX_MASK        0x700u
#define  PORTE_PCR16_MUX_SHIFT       8
#define  PORTE_PCR16_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR16_MUX_SHIFT))&PORTE_PCR16_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR16_IRQC_MASK       0xF0000u
#define  PORTE_PCR16_IRQC_SHIFT      16
#define  PORTE_PCR16_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR16_IRQC_SHIFT))&PORTE_PCR16_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR16_ISF_MASK        0x1000000u
#define  PORTE_PCR16_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR17_PS_MASK         0x1u
#define  PORTE_PCR17_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR17_PE_MASK         0x2u
#define  PORTE_PCR17_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR17_SRE_MASK        0x4u
#define  PORTE_PCR17_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR17_PFE_MASK        0x10u
#define  PORTE_PCR17_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR17_DSE_MASK        0x40u
#define  PORTE_PCR17_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR17_MUX_MASK        0x700u
#define  PORTE_PCR17_MUX_SHIFT       8
#define  PORTE_PCR17_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR17_MUX_SHIFT))&PORTE_PCR17_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR17_IRQC_MASK       0xF0000u
#define  PORTE_PCR17_IRQC_SHIFT      16
#define  PORTE_PCR17_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR17_IRQC_SHIFT))&PORTE_PCR17_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR17_ISF_MASK        0x1000000u
#define  PORTE_PCR17_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR18_PS_MASK         0x1u
#define  PORTE_PCR18_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR18_PE_MASK         0x2u
#define  PORTE_PCR18_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR18_SRE_MASK        0x4u
#define  PORTE_PCR18_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR18_PFE_MASK        0x10u
#define  PORTE_PCR18_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR18_DSE_MASK        0x40u
#define  PORTE_PCR18_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR18_MUX_MASK        0x700u
#define  PORTE_PCR18_MUX_SHIFT       8
#define  PORTE_PCR18_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR18_MUX_SHIFT))&PORTE_PCR18_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR18_IRQC_MASK       0xF0000u
#define  PORTE_PCR18_IRQC_SHIFT      16
#define  PORTE_PCR18_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR18_IRQC_SHIFT))&PORTE_PCR18_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR18_ISF_MASK        0x1000000u
#define  PORTE_PCR18_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR19_PS_MASK         0x1u
#define  PORTE_PCR19_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR19_PE_MASK         0x2u
#define  PORTE_PCR19_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR19_SRE_MASK        0x4u
#define  PORTE_PCR19_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR19_PFE_MASK        0x10u
#define  PORTE_PCR19_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR19_DSE_MASK        0x40u
#define  PORTE_PCR19_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR19_MUX_MASK        0x700u
#define  PORTE_PCR19_MUX_SHIFT       8
#define  PORTE_PCR19_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR19_MUX_SHIFT))&PORTE_PCR19_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR19_IRQC_MASK       0xF0000u
#define  PORTE_PCR19_IRQC_SHIFT      16
#define  PORTE_PCR19_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR19_IRQC_SHIFT))&PORTE_PCR19_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR19_ISF_MASK        0x1000000u
#define  PORTE_PCR19_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR20_PS_MASK         0x1u
#define  PORTE_PCR20_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR20_PE_MASK         0x2u
#define  PORTE_PCR20_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR20_SRE_MASK        0x4u
#define  PORTE_PCR20_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR20_PFE_MASK        0x10u
#define  PORTE_PCR20_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR20_DSE_MASK        0x40u
#define  PORTE_PCR20_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR20_MUX_MASK        0x700u
#define  PORTE_PCR20_MUX_SHIFT       8
#define  PORTE_PCR20_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR20_MUX_SHIFT))&PORTE_PCR20_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR20_IRQC_MASK       0xF0000u
#define  PORTE_PCR20_IRQC_SHIFT      16
#define  PORTE_PCR20_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR20_IRQC_SHIFT))&PORTE_PCR20_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR20_ISF_MASK        0x1000000u
#define  PORTE_PCR20_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR21_PS_MASK         0x1u
#define  PORTE_PCR21_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR21_PE_MASK         0x2u
#define  PORTE_PCR21_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR21_SRE_MASK        0x4u
#define  PORTE_PCR21_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR21_PFE_MASK        0x10u
#define  PORTE_PCR21_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR21_DSE_MASK        0x40u
#define  PORTE_PCR21_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR21_MUX_MASK        0x700u
#define  PORTE_PCR21_MUX_SHIFT       8
#define  PORTE_PCR21_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR21_MUX_SHIFT))&PORTE_PCR21_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR21_IRQC_MASK       0xF0000u
#define  PORTE_PCR21_IRQC_SHIFT      16
#define  PORTE_PCR21_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR21_IRQC_SHIFT))&PORTE_PCR21_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR21_ISF_MASK        0x1000000u
#define  PORTE_PCR21_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR22_PS_MASK         0x1u
#define  PORTE_PCR22_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR22_PE_MASK         0x2u
#define  PORTE_PCR22_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR22_SRE_MASK        0x4u
#define  PORTE_PCR22_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR22_PFE_MASK        0x10u
#define  PORTE_PCR22_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR22_DSE_MASK        0x40u
#define  PORTE_PCR22_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR22_MUX_MASK        0x700u
#define  PORTE_PCR22_MUX_SHIFT       8
#define  PORTE_PCR22_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR22_MUX_SHIFT))&PORTE_PCR22_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR22_IRQC_MASK       0xF0000u
#define  PORTE_PCR22_IRQC_SHIFT      16
#define  PORTE_PCR22_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR22_IRQC_SHIFT))&PORTE_PCR22_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR22_ISF_MASK        0x1000000u
#define  PORTE_PCR22_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR23_PS_MASK         0x1u
#define  PORTE_PCR23_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR23_PE_MASK         0x2u
#define  PORTE_PCR23_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR23_SRE_MASK        0x4u
#define  PORTE_PCR23_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR23_PFE_MASK        0x10u
#define  PORTE_PCR23_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR23_DSE_MASK        0x40u
#define  PORTE_PCR23_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR23_MUX_MASK        0x700u
#define  PORTE_PCR23_MUX_SHIFT       8
#define  PORTE_PCR23_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR23_MUX_SHIFT))&PORTE_PCR23_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR23_IRQC_MASK       0xF0000u
#define  PORTE_PCR23_IRQC_SHIFT      16
#define  PORTE_PCR23_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR23_IRQC_SHIFT))&PORTE_PCR23_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR23_ISF_MASK        0x1000000u
#define  PORTE_PCR23_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR24_PS_MASK         0x1u
#define  PORTE_PCR24_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR24_PE_MASK         0x2u
#define  PORTE_PCR24_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR24_SRE_MASK        0x4u
#define  PORTE_PCR24_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR24_PFE_MASK        0x10u
#define  PORTE_PCR24_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR24_DSE_MASK        0x40u
#define  PORTE_PCR24_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR24_MUX_MASK        0x700u
#define  PORTE_PCR24_MUX_SHIFT       8
#define  PORTE_PCR24_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR24_MUX_SHIFT))&PORTE_PCR24_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR24_IRQC_MASK       0xF0000u
#define  PORTE_PCR24_IRQC_SHIFT      16
#define  PORTE_PCR24_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR24_IRQC_SHIFT))&PORTE_PCR24_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR24_ISF_MASK        0x1000000u
#define  PORTE_PCR24_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR25_PS_MASK         0x1u
#define  PORTE_PCR25_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR25_PE_MASK         0x2u
#define  PORTE_PCR25_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR25_SRE_MASK        0x4u
#define  PORTE_PCR25_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR25_PFE_MASK        0x10u
#define  PORTE_PCR25_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR25_DSE_MASK        0x40u
#define  PORTE_PCR25_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR25_MUX_MASK        0x700u
#define  PORTE_PCR25_MUX_SHIFT       8
#define  PORTE_PCR25_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR25_MUX_SHIFT))&PORTE_PCR25_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR25_IRQC_MASK       0xF0000u
#define  PORTE_PCR25_IRQC_SHIFT      16
#define  PORTE_PCR25_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR25_IRQC_SHIFT))&PORTE_PCR25_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR25_ISF_MASK        0x1000000u
#define  PORTE_PCR25_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR26_PS_MASK         0x1u
#define  PORTE_PCR26_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR26_PE_MASK         0x2u
#define  PORTE_PCR26_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR26_SRE_MASK        0x4u
#define  PORTE_PCR26_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR26_PFE_MASK        0x10u
#define  PORTE_PCR26_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR26_DSE_MASK        0x40u
#define  PORTE_PCR26_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR26_MUX_MASK        0x700u
#define  PORTE_PCR26_MUX_SHIFT       8
#define  PORTE_PCR26_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR26_MUX_SHIFT))&PORTE_PCR26_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR26_IRQC_MASK       0xF0000u
#define  PORTE_PCR26_IRQC_SHIFT      16
#define  PORTE_PCR26_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR26_IRQC_SHIFT))&PORTE_PCR26_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR26_ISF_MASK        0x1000000u
#define  PORTE_PCR26_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR27_PS_MASK         0x1u
#define  PORTE_PCR27_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR27_PE_MASK         0x2u
#define  PORTE_PCR27_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR27_SRE_MASK        0x4u
#define  PORTE_PCR27_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR27_PFE_MASK        0x10u
#define  PORTE_PCR27_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR27_DSE_MASK        0x40u
#define  PORTE_PCR27_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR27_MUX_MASK        0x700u
#define  PORTE_PCR27_MUX_SHIFT       8
#define  PORTE_PCR27_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR27_MUX_SHIFT))&PORTE_PCR27_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR27_IRQC_MASK       0xF0000u
#define  PORTE_PCR27_IRQC_SHIFT      16
#define  PORTE_PCR27_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR27_IRQC_SHIFT))&PORTE_PCR27_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR27_ISF_MASK        0x1000000u
#define  PORTE_PCR27_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR28_PS_MASK         0x1u
#define  PORTE_PCR28_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR28_PE_MASK         0x2u
#define  PORTE_PCR28_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR28_SRE_MASK        0x4u
#define  PORTE_PCR28_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR28_PFE_MASK        0x10u
#define  PORTE_PCR28_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR28_DSE_MASK        0x40u
#define  PORTE_PCR28_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR28_MUX_MASK        0x700u
#define  PORTE_PCR28_MUX_SHIFT       8
#define  PORTE_PCR28_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR28_MUX_SHIFT))&PORTE_PCR28_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR28_IRQC_MASK       0xF0000u
#define  PORTE_PCR28_IRQC_SHIFT      16
#define  PORTE_PCR28_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR28_IRQC_SHIFT))&PORTE_PCR28_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR28_ISF_MASK        0x1000000u
#define  PORTE_PCR28_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR29_PS_MASK         0x1u
#define  PORTE_PCR29_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR29_PE_MASK         0x2u
#define  PORTE_PCR29_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR29_SRE_MASK        0x4u
#define  PORTE_PCR29_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR29_PFE_MASK        0x10u
#define  PORTE_PCR29_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR29_DSE_MASK        0x40u
#define  PORTE_PCR29_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR29_MUX_MASK        0x700u
#define  PORTE_PCR29_MUX_SHIFT       8
#define  PORTE_PCR29_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR29_MUX_SHIFT))&PORTE_PCR29_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR29_IRQC_MASK       0xF0000u
#define  PORTE_PCR29_IRQC_SHIFT      16
#define  PORTE_PCR29_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR29_IRQC_SHIFT))&PORTE_PCR29_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR29_ISF_MASK        0x1000000u
#define  PORTE_PCR29_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR30_PS_MASK         0x1u
#define  PORTE_PCR30_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR30_PE_MASK         0x2u
#define  PORTE_PCR30_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR30_SRE_MASK        0x4u
#define  PORTE_PCR30_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR30_PFE_MASK        0x10u
#define  PORTE_PCR30_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR30_DSE_MASK        0x40u
#define  PORTE_PCR30_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR30_MUX_MASK        0x700u
#define  PORTE_PCR30_MUX_SHIFT       8
#define  PORTE_PCR30_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR30_MUX_SHIFT))&PORTE_PCR30_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR30_IRQC_MASK       0xF0000u
#define  PORTE_PCR30_IRQC_SHIFT      16
#define  PORTE_PCR30_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR30_IRQC_SHIFT))&PORTE_PCR30_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR30_ISF_MASK        0x1000000u
#define  PORTE_PCR30_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_PCR31_PS_MASK         0x1u
#define  PORTE_PCR31_PS_SHIFT        0
//   Pull Select
//     0b0 ==> Internal pulldown resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.
//     0b1 ==> Internal pullup resistor is enabled on the corresponding pin, if the corresponding Port Pull Enable field is set.

#define  PORTE_PCR31_PE_MASK         0x2u
#define  PORTE_PCR31_PE_SHIFT        1
//   Pull Enable
//     0b0 ==> Internal pullup or pulldown resistor is not enabled on the corresponding pin.
//     0b1 ==> Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input.

#define  PORTE_PCR31_SRE_MASK        0x4u
#define  PORTE_PCR31_SRE_SHIFT       2
//   Slew Rate Enable
//     0b0 ==> Fast slew rate is configured on the corresponding pin, if the pin is configured as a digital output.
//     0b1 ==> Slow slew rate is configured on the corresponding pin, if the pin is configured as a digital output.

#define  PORTE_PCR31_PFE_MASK        0x10u
#define  PORTE_PCR31_PFE_SHIFT       4
//   Passive Filter Enable
//     0b0 ==> Passive input filter is disabled on the corresponding pin.
//     0b1 ==> Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. A low pass filter of 10 MHz to 30 MHz bandwidth is enabled on the digital input path. Disable the passive input filter when high speed interfaces of more than 2 MHz are supported on the pin.

#define  PORTE_PCR31_DSE_MASK        0x40u
#define  PORTE_PCR31_DSE_SHIFT       6
//   Drive Strength Enable
//     0b0 ==> Low drive strength is configured on the corresponding pin, if pin is configured as a digital output.
//     0b1 ==> High drive strength is configured on the corresponding pin, if pin is configured as a digital output.

#define  PORTE_PCR31_MUX_MASK        0x700u
#define  PORTE_PCR31_MUX_SHIFT       8
#define  PORTE_PCR31_MUX(x)          (((uint32_t)(((uint32_t)(x))<<PORTE_PCR31_MUX_SHIFT))&PORTE_PCR31_MUX_MASK)
//   Pin Mux Control
//     0b000 ==> Pin disabled (analog).
//     0b001 ==> Alternative 1 (GPIO).
//     0b010 ==> Alternative 2 (chip-specific).
//     0b011 ==> Alternative 3 (chip-specific).
//     0b100 ==> Alternative 4 (chip-specific).
//     0b101 ==> Alternative 5 (chip-specific).
//     0b110 ==> Alternative 6 (chip-specific).
//     0b111 ==> Alternative 7 (chip-specific).

#define  PORTE_PCR31_IRQC_MASK       0xF0000u
#define  PORTE_PCR31_IRQC_SHIFT      16
#define  PORTE_PCR31_IRQC(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_PCR31_IRQC_SHIFT))&PORTE_PCR31_IRQC_MASK)
//   Interrupt Configuration
//     0b0000 ==> Interrupt/DMA request disabled.
//     0b0001 ==> DMA request on rising edge.
//     0b0010 ==> DMA request on falling edge.
//     0b0011 ==> DMA request on either edge.
//     0b0100 ==> Reserved.
//     0b1000 ==> Interrupt when logic zero.
//     0b1001 ==> Interrupt on rising edge.
//     0b1010 ==> Interrupt on falling edge.
//     0b1011 ==> Interrupt on either edge.
//     0b1100 ==> Interrupt when logic one.

#define  PORTE_PCR31_ISF_MASK        0x1000000u
#define  PORTE_PCR31_ISF_SHIFT       24
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  PORTE_GPCLR_GPWD_MASK       0xFFFFu
#define  PORTE_GPCLR_GPWD_SHIFT      0
#define  PORTE_GPCLR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_GPCLR_GPWD_SHIFT))&PORTE_GPCLR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTE_GPCLR_GPWE_MASK       0xFFFF0000u
#define  PORTE_GPCLR_GPWE_SHIFT      16
#define  PORTE_GPCLR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_GPCLR_GPWE_SHIFT))&PORTE_GPCLR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTE_GPCHR_GPWD_MASK       0xFFFFu
#define  PORTE_GPCHR_GPWD_SHIFT      0
#define  PORTE_GPCHR_GPWD(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_GPCHR_GPWD_SHIFT))&PORTE_GPCHR_GPWD_MASK)
//   Global Pin Write Data

#define  PORTE_GPCHR_GPWE_MASK       0xFFFF0000u
#define  PORTE_GPCHR_GPWE_SHIFT      16
#define  PORTE_GPCHR_GPWE(x)         (((uint32_t)(((uint32_t)(x))<<PORTE_GPCHR_GPWE_SHIFT))&PORTE_GPCHR_GPWE_MASK)
//   Global Pin Write Enable
//     0b0 ==> Corresponding Pin Control Register is not updated with the value in GPWD.
//     0b1 ==> Corresponding Pin Control Register is updated with the value in GPWD.

#define  PORTE_ISFR_ISF_MASK         0xFFFFFFFFu
#define  PORTE_ISFR_ISF_SHIFT        0
#define  PORTE_ISFR_ISF(x)           (((uint32_t)(((uint32_t)(x))<<PORTE_ISFR_ISF_SHIFT))&PORTE_ISFR_ISF_MASK)
//   Interrupt Status Flag
//     0b0 ==> Configured interrupt is not detected.
//     0b1 ==> Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic one is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared.

#define  RCM_SRS0_WAKEUP_MASK        0x1u
#define  RCM_SRS0_WAKEUP_SHIFT       0
//   Low Leakage Wakeup Reset
//     0b0 ==> Reset not caused by LLWU module wakeup source
//     0b1 ==> Reset caused by LLWU module wakeup source

#define  RCM_SRS0_LVD_MASK           0x2u
#define  RCM_SRS0_LVD_SHIFT          1
//   Low-Voltage Detect Reset
//     0b0 ==> Reset not caused by LVD trip or POR
//     0b1 ==> Reset caused by LVD trip or POR

#define  RCM_SRS0_LOC_MASK           0x4u
#define  RCM_SRS0_LOC_SHIFT          2
//   Loss-of-Clock Reset
//     0b0 ==> Reset not caused by a loss of external clock.
//     0b1 ==> Reset caused by a loss of external clock.

#define  RCM_SRS0_LOL_MASK           0x8u
#define  RCM_SRS0_LOL_SHIFT          3
//   Loss-of-Lock Reset
//     0b0 ==> Reset not caused by a loss of lock in the PLL
//     0b1 ==> Reset caused by a loss of lock in the PLL

#define  RCM_SRS0_WDOG_MASK          0x20u
#define  RCM_SRS0_WDOG_SHIFT         5
//   Watchdog
//     0b0 ==> Reset not caused by watchdog timeout
//     0b1 ==> Reset caused by watchdog timeout

#define  RCM_SRS0_PIN_MASK           0x40u
#define  RCM_SRS0_PIN_SHIFT          6
//   External Reset Pin
//     0b0 ==> Reset not caused by external reset pin
//     0b1 ==> Reset caused by external reset pin

#define  RCM_SRS0_POR_MASK           0x80u
#define  RCM_SRS0_POR_SHIFT          7
//   Power-On Reset
//     0b0 ==> Reset not caused by POR
//     0b1 ==> Reset caused by POR

#define  RCM_SRS1_LOCKUP_MASK        0x2u
#define  RCM_SRS1_LOCKUP_SHIFT       1
//   Core Lockup
//     0b0 ==> Reset not caused by core LOCKUP event
//     0b1 ==> Reset caused by core LOCKUP event

#define  RCM_SRS1_SW_MASK            0x4u
#define  RCM_SRS1_SW_SHIFT           2
//   Software
//     0b0 ==> Reset not caused by software setting of SYSRESETREQ bit
//     0b1 ==> Reset caused by software setting of SYSRESETREQ bit

#define  RCM_SRS1_MDM_AP_MASK        0x8u
#define  RCM_SRS1_MDM_AP_SHIFT       3
//   MDM-AP System Reset Request
//     0b0 ==> Reset not caused by host debugger system setting of the System Reset Request bit
//     0b1 ==> Reset caused by host debugger system setting of the System Reset Request bit

#define  RCM_SRS1_SACKERR_MASK       0x20u
#define  RCM_SRS1_SACKERR_SHIFT      5
//   Stop Mode Acknowledge Error Reset
//     0b0 ==> Reset not caused by peripheral failure to acknowledge attempt to enter stop mode
//     0b1 ==> Reset caused by peripheral failure to acknowledge attempt to enter stop mode

#define  RCM_RPFC_RSTFLTSRW_MASK     0x3u
#define  RCM_RPFC_RSTFLTSRW_SHIFT    0
#define  RCM_RPFC_RSTFLTSRW(x)       (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSRW_SHIFT))&RCM_RPFC_RSTFLTSRW_MASK)
//   Reset Pin Filter Select in Run and Wait Modes
//     0b00 ==> All filtering disabled
//     0b01 ==> Bus clock filter enabled for normal operation
//     0b10 ==> LPO clock filter enabled for normal operation
//     0b11 ==> Reserved

#define  RCM_RPFC_RSTFLTSS_MASK      0x4u
#define  RCM_RPFC_RSTFLTSS_SHIFT     2
//   Reset Pin Filter Select in Stop Mode
//     0b0 ==> All filtering disabled
//     0b1 ==> LPO clock filter enabled

#define  RCM_RPFW_RSTFLTSEL_MASK     0x1Fu
#define  RCM_RPFW_RSTFLTSEL_SHIFT    0
#define  RCM_RPFW_RSTFLTSEL(x)       (((uint8_t)(((uint8_t)(x))<<RCM_RPFW_RSTFLTSEL_SHIFT))&RCM_RPFW_RSTFLTSEL_MASK)
//   Reset Pin Filter Bus Clock Select
//     0b00000 ==> Bus clock filter count is 1
//     0b00001 ==> Bus clock filter count is 2
//     0b00010 ==> Bus clock filter count is 3
//     0b00011 ==> Bus clock filter count is 4
//     0b00100 ==> Bus clock filter count is 5
//     0b00101 ==> Bus clock filter count is 6
//     0b00110 ==> Bus clock filter count is 7
//     0b00111 ==> Bus clock filter count is 8
//     0b01000 ==> Bus clock filter count is 9
//     0b01001 ==> Bus clock filter count is 10
//     0b01010 ==> Bus clock filter count is 11
//     0b01011 ==> Bus clock filter count is 12
//     0b01100 ==> Bus clock filter count is 13
//     0b01101 ==> Bus clock filter count is 14
//     0b01110 ==> Bus clock filter count is 15
//     0b01111 ==> Bus clock filter count is 16
//     0b10000 ==> Bus clock filter count is 17
//     0b10001 ==> Bus clock filter count is 18
//     0b10010 ==> Bus clock filter count is 19
//     0b10011 ==> Bus clock filter count is 20
//     0b10100 ==> Bus clock filter count is 21
//     0b10101 ==> Bus clock filter count is 22
//     0b10110 ==> Bus clock filter count is 23
//     0b10111 ==> Bus clock filter count is 24
//     0b11000 ==> Bus clock filter count is 25
//     0b11001 ==> Bus clock filter count is 26
//     0b11010 ==> Bus clock filter count is 27
//     0b11011 ==> Bus clock filter count is 28
//     0b11100 ==> Bus clock filter count is 29
//     0b11101 ==> Bus clock filter count is 30
//     0b11110 ==> Bus clock filter count is 31
//     0b11111 ==> Bus clock filter count is 32

#define  ROM_ENTRY0_ENTRY_MASK       0xFFFFFFFFu
#define  ROM_ENTRY0_ENTRY_SHIFT      0
#define  ROM_ENTRY0_ENTRY(x)         (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY0_ENTRY_SHIFT))&ROM_ENTRY0_ENTRY_MASK)
//   ENTRY

#define  ROM_ENTRY1_ENTRY_MASK       0xFFFFFFFFu
#define  ROM_ENTRY1_ENTRY_SHIFT      0
#define  ROM_ENTRY1_ENTRY(x)         (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY1_ENTRY_SHIFT))&ROM_ENTRY1_ENTRY_MASK)
//   ENTRY

#define  ROM_ENTRY2_ENTRY_MASK       0xFFFFFFFFu
#define  ROM_ENTRY2_ENTRY_SHIFT      0
#define  ROM_ENTRY2_ENTRY(x)         (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY2_ENTRY_SHIFT))&ROM_ENTRY2_ENTRY_MASK)
//   ENTRY

#define  ROM_TABLEMARK_MARK_MASK     0xFFFFFFFFu
#define  ROM_TABLEMARK_MARK_SHIFT    0
#define  ROM_TABLEMARK_MARK(x)       (((uint32_t)(((uint32_t)(x))<<ROM_TABLEMARK_MARK_SHIFT))&ROM_TABLEMARK_MARK_MASK)

#define  ROM_SYSACCESS_SYSACCESS_MASK 0xFFFFFFFFu
#define  ROM_SYSACCESS_SYSACCESS_SHIFT 0
#define  ROM_SYSACCESS_SYSACCESS(x)  (((uint32_t)(((uint32_t)(x))<<ROM_SYSACCESS_SYSACCESS_SHIFT))&ROM_SYSACCESS_SYSACCESS_MASK)

#define  ROM_PERIPHID4_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID4_PERIPHID_SHIFT 0
#define  ROM_PERIPHID4_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID4_PERIPHID_SHIFT))&ROM_PERIPHID4_PERIPHID_MASK)

#define  ROM_PERIPHID5_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID5_PERIPHID_SHIFT 0
#define  ROM_PERIPHID5_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID5_PERIPHID_SHIFT))&ROM_PERIPHID5_PERIPHID_MASK)

#define  ROM_PERIPHID6_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID6_PERIPHID_SHIFT 0
#define  ROM_PERIPHID6_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID6_PERIPHID_SHIFT))&ROM_PERIPHID6_PERIPHID_MASK)

#define  ROM_PERIPHID7_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID7_PERIPHID_SHIFT 0
#define  ROM_PERIPHID7_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID7_PERIPHID_SHIFT))&ROM_PERIPHID7_PERIPHID_MASK)

#define  ROM_PERIPHID0_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID0_PERIPHID_SHIFT 0
#define  ROM_PERIPHID0_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID0_PERIPHID_SHIFT))&ROM_PERIPHID0_PERIPHID_MASK)

#define  ROM_PERIPHID1_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID1_PERIPHID_SHIFT 0
#define  ROM_PERIPHID1_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID1_PERIPHID_SHIFT))&ROM_PERIPHID1_PERIPHID_MASK)

#define  ROM_PERIPHID2_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID2_PERIPHID_SHIFT 0
#define  ROM_PERIPHID2_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID2_PERIPHID_SHIFT))&ROM_PERIPHID2_PERIPHID_MASK)

#define  ROM_PERIPHID3_PERIPHID_MASK 0xFFFFFFFFu
#define  ROM_PERIPHID3_PERIPHID_SHIFT 0
#define  ROM_PERIPHID3_PERIPHID(x)   (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID3_PERIPHID_SHIFT))&ROM_PERIPHID3_PERIPHID_MASK)

#define  ROM_COMPID0_COMPID_MASK     0xFFFFFFFFu
#define  ROM_COMPID0_COMPID_SHIFT    0
#define  ROM_COMPID0_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<ROM_COMPID0_COMPID_SHIFT))&ROM_COMPID0_COMPID_MASK)
//   Component ID

#define  ROM_COMPID1_COMPID_MASK     0xFFFFFFFFu
#define  ROM_COMPID1_COMPID_SHIFT    0
#define  ROM_COMPID1_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<ROM_COMPID1_COMPID_SHIFT))&ROM_COMPID1_COMPID_MASK)
//   Component ID

#define  ROM_COMPID2_COMPID_MASK     0xFFFFFFFFu
#define  ROM_COMPID2_COMPID_SHIFT    0
#define  ROM_COMPID2_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<ROM_COMPID2_COMPID_SHIFT))&ROM_COMPID2_COMPID_MASK)
//   Component ID

#define  ROM_COMPID3_COMPID_MASK     0xFFFFFFFFu
#define  ROM_COMPID3_COMPID_SHIFT    0
#define  ROM_COMPID3_COMPID(x)       (((uint32_t)(((uint32_t)(x))<<ROM_COMPID3_COMPID_SHIFT))&ROM_COMPID3_COMPID_MASK)
//   Component ID

#define  RTC_TSR_TSR_MASK            0xFFFFFFFFu
#define  RTC_TSR_TSR_SHIFT           0
#define  RTC_TSR_TSR(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TSR_TSR_SHIFT))&RTC_TSR_TSR_MASK)
//   Time Seconds Register

#define  RTC_TPR_TPR_MASK            0xFFFFu
#define  RTC_TPR_TPR_SHIFT           0
#define  RTC_TPR_TPR(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TPR_TPR_SHIFT))&RTC_TPR_TPR_MASK)
//   Time Prescaler Register

#define  RTC_TAR_TAR_MASK            0xFFFFFFFFu
#define  RTC_TAR_TAR_SHIFT           0
#define  RTC_TAR_TAR(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TAR_TAR_SHIFT))&RTC_TAR_TAR_MASK)
//   Time Alarm Register

#define  RTC_TCR_TCR_MASK            0xFFu
#define  RTC_TCR_TCR_SHIFT           0
#define  RTC_TCR_TCR(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCR_SHIFT))&RTC_TCR_TCR_MASK)
//   Time Compensation Register
//     0b10000000 ==> Time Prescaler Register overflows every 32896 clock cycles.
//     0b11111111 ==> Time Prescaler Register overflows every 32769 clock cycles.
//     0b0 ==> Time Prescaler Register overflows every 32768 clock cycles.
//     0b1 ==> Time Prescaler Register overflows every 32767 clock cycles.
//     0b1111111 ==> Time Prescaler Register overflows every 32641 clock cycles.

#define  RTC_TCR_CIR_MASK            0xFF00u
#define  RTC_TCR_CIR_SHIFT           8
#define  RTC_TCR_CIR(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIR_SHIFT))&RTC_TCR_CIR_MASK)
//   Compensation Interval Register

#define  RTC_TCR_TCV_MASK            0xFF0000u
#define  RTC_TCR_TCV_SHIFT           16
#define  RTC_TCR_TCV(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCV_SHIFT))&RTC_TCR_TCV_MASK)
//   Time Compensation Value

#define  RTC_TCR_CIC_MASK            0xFF000000u
#define  RTC_TCR_CIC_SHIFT           24
#define  RTC_TCR_CIC(x)              (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIC_SHIFT))&RTC_TCR_CIC_MASK)
//   Compensation Interval Counter

#define  RTC_CR_SWR_MASK             0x1u
#define  RTC_CR_SWR_SHIFT            0
//   Software Reset
//     0b0 ==> No effect.
//     0b1 ==> Resets all RTC registers except for the SWR bit . The SWR bit is cleared by POR and by software explicitly clearing it.

#define  RTC_CR_WPE_MASK             0x2u
#define  RTC_CR_WPE_SHIFT            1
//   Wakeup Pin Enable
//     0b0 ==> Wakeup pin is disabled.
//     0b1 ==> Wakeup pin is enabled and wakeup pin asserts if the RTC interrupt asserts or the wakeup pin is turned on.

#define  RTC_CR_SUP_MASK             0x4u
#define  RTC_CR_SUP_SHIFT            2
//   Supervisor Access
//     0b0 ==> Non-supervisor mode write accesses are not supported and generate a bus error.
//     0b1 ==> Non-supervisor mode write accesses are supported.

#define  RTC_CR_UM_MASK              0x8u
#define  RTC_CR_UM_SHIFT             3
//   Update Mode
//     0b0 ==> Registers cannot be written when locked.
//     0b1 ==> Registers can be written when locked under limited conditions.

#define  RTC_CR_OSCE_MASK            0x100u
#define  RTC_CR_OSCE_SHIFT           8
//   Oscillator Enable
//     0b0 ==> 32.768 kHz oscillator is disabled.
//     0b1 ==> 32.768 kHz oscillator is enabled. After setting this bit, wait the oscillator startup time before enabling the time counter to allow the 32.768 kHz clock time to stabilize.

#define  RTC_CR_CLKO_MASK            0x200u
#define  RTC_CR_CLKO_SHIFT           9
//   Clock Output
//     0b0 ==> The 32 kHz clock is output to other peripherals.
//     0b1 ==> The 32 kHz clock is not output to other peripherals.

#define  RTC_CR_SC16P_MASK           0x400u
#define  RTC_CR_SC16P_SHIFT          10
//   Oscillator 16pF Load Configure
//     0b0 ==> Disable the load.
//     0b1 ==> Enable the additional load.

#define  RTC_CR_SC8P_MASK            0x800u
#define  RTC_CR_SC8P_SHIFT           11
//   Oscillator 8pF Load Configure
//     0b0 ==> Disable the load.
//     0b1 ==> Enable the additional load.

#define  RTC_CR_SC4P_MASK            0x1000u
#define  RTC_CR_SC4P_SHIFT           12
//   Oscillator 4pF Load Configure
//     0b0 ==> Disable the load.
//     0b1 ==> Enable the additional load.

#define  RTC_CR_SC2P_MASK            0x2000u
#define  RTC_CR_SC2P_SHIFT           13
//   Oscillator 2pF Load Configure
//     0b0 ==> Disable the load.
//     0b1 ==> Enable the additional load.

#define  RTC_SR_TIF_MASK             0x1u
#define  RTC_SR_TIF_SHIFT            0
//   Time Invalid Flag
//     0b0 ==> Time is valid.
//     0b1 ==> Time is invalid and time counter is read as zero.

#define  RTC_SR_TOF_MASK             0x2u
#define  RTC_SR_TOF_SHIFT            1
//   Time Overflow Flag
//     0b0 ==> Time overflow has not occurred.
//     0b1 ==> Time overflow has occurred and time counter is read as zero.

#define  RTC_SR_TAF_MASK             0x4u
#define  RTC_SR_TAF_SHIFT            2
//   Time Alarm Flag
//     0b0 ==> Time alarm has not occurred.
//     0b1 ==> Time alarm has occurred.

#define  RTC_SR_TCE_MASK             0x10u
#define  RTC_SR_TCE_SHIFT            4
//   Time Counter Enable
//     0b0 ==> Time counter is disabled.
//     0b1 ==> Time counter is enabled.

#define  RTC_LR_TCL_MASK             0x8u
#define  RTC_LR_TCL_SHIFT            3
//   Time Compensation Lock
//     0b0 ==> Time Compensation Register is locked and writes are ignored.
//     0b1 ==> Time Compensation Register is not locked and writes complete as normal.

#define  RTC_LR_CRL_MASK             0x10u
#define  RTC_LR_CRL_SHIFT            4
//   Control Register Lock
//     0b0 ==> Control Register is locked and writes are ignored.
//     0b1 ==> Control Register is not locked and writes complete as normal.

#define  RTC_LR_SRL_MASK             0x20u
#define  RTC_LR_SRL_SHIFT            5
//   Status Register Lock
//     0b0 ==> Status Register is locked and writes are ignored.
//     0b1 ==> Status Register is not locked and writes complete as normal.

#define  RTC_LR_LRL_MASK             0x40u
#define  RTC_LR_LRL_SHIFT            6
//   Lock Register Lock
//     0b0 ==> Lock Register is locked and writes are ignored.
//     0b1 ==> Lock Register is not locked and writes complete as normal.

#define  RTC_IER_TIIE_MASK           0x1u
#define  RTC_IER_TIIE_SHIFT          0
//   Time Invalid Interrupt Enable
//     0b0 ==> Time invalid flag does not generate an interrupt.
//     0b1 ==> Time invalid flag does generate an interrupt.

#define  RTC_IER_TOIE_MASK           0x2u
#define  RTC_IER_TOIE_SHIFT          1
//   Time Overflow Interrupt Enable
//     0b0 ==> Time overflow flag does not generate an interrupt.
//     0b1 ==> Time overflow flag does generate an interrupt.

#define  RTC_IER_TAIE_MASK           0x4u
#define  RTC_IER_TAIE_SHIFT          2
//   Time Alarm Interrupt Enable
//     0b0 ==> Time alarm flag does not generate an interrupt.
//     0b1 ==> Time alarm flag does generate an interrupt.

#define  RTC_IER_TSIE_MASK           0x10u
#define  RTC_IER_TSIE_SHIFT          4
//   Time Seconds Interrupt Enable
//     0b0 ==> Seconds interrupt is disabled.
//     0b1 ==> Seconds interrupt is enabled.

#define  RTC_IER_WPON_MASK           0x80u
#define  RTC_IER_WPON_SHIFT          7
//   Wakup Pin On
//     0b0 ==> No effect.
//     0b1 ==> If the wakeup pin is enabled, then the wakeup pin will assert.

#define  SIM_SOPT1_OSC32KSEL_MASK    0xC0000u
#define  SIM_SOPT1_OSC32KSEL_SHIFT   18
#define  SIM_SOPT1_OSC32KSEL(x)      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_OSC32KSEL_SHIFT))&SIM_SOPT1_OSC32KSEL_MASK)
//   32K oscillator clock select
//     0b00 ==> System oscillator (OSC32KCLK)
//     0b01 ==> Reserved
//     0b10 ==> RTC_CLKIN
//     0b11 ==> LPO 1kHz

#define  SIM_SOPT1_USBVSTBY_MASK     0x20000000u
#define  SIM_SOPT1_USBVSTBY_SHIFT    29
//   USB voltage regulator in standby mode during VLPR and VLPW modes
//     0b0 ==> USB voltage regulator not in standby during VLPR and VLPW modes.
//     0b1 ==> USB voltage regulator in standby during VLPR and VLPW modes.

#define  SIM_SOPT1_USBSSTBY_MASK     0x40000000u
#define  SIM_SOPT1_USBSSTBY_SHIFT    30
//   USB voltage regulator in standby mode during Stop, VLPS, LLS and VLLS modes.
//     0b0 ==> USB voltage regulator not in standby during Stop, VLPS, LLS and VLLS modes.
//     0b1 ==> USB voltage regulator in standby during Stop, VLPS, LLS and VLLS modes.

#define  SIM_SOPT1_USBREGEN_MASK     0x80000000u
#define  SIM_SOPT1_USBREGEN_SHIFT    31
//   USB voltage regulator enable
//     0b0 ==> USB voltage regulator is disabled.
//     0b1 ==> USB voltage regulator is enabled.

#define  SIM_SOPT1CFG_URWE_MASK      0x1000000u
#define  SIM_SOPT1CFG_URWE_SHIFT     24
//   USB voltage regulator enable write enable
//     0b0 ==> SOPT1 USBREGEN cannot be written.
//     0b1 ==> SOPT1 USBREGEN can be written.

#define  SIM_SOPT1CFG_UVSWE_MASK     0x2000000u
#define  SIM_SOPT1CFG_UVSWE_SHIFT    25
//   USB voltage regulator VLP standby write enable
//     0b0 ==> SOPT1 USBVSTB cannot be written.
//     0b1 ==> SOPT1 USBVSTB can be written.

#define  SIM_SOPT1CFG_USSWE_MASK     0x4000000u
#define  SIM_SOPT1CFG_USSWE_SHIFT    26
//   USB voltage regulator stop standby write enable
//     0b0 ==> SOPT1 USBSSTB cannot be written.
//     0b1 ==> SOPT1 USBSSTB can be written.

#define  SIM_SOPT2_RTCCLKOUTSEL_MASK 0x10u
#define  SIM_SOPT2_RTCCLKOUTSEL_SHIFT 4
//   RTC clock out select
//     0b0 ==> RTC 1 Hz clock is output on the RTC_CLKOUT pin.
//     0b1 ==> OSCERCLK0 clock is output on the RTC_CLKOUT pin.

#define  SIM_SOPT2_CLKOUTSEL_MASK    0xE0u
#define  SIM_SOPT2_CLKOUTSEL_SHIFT   5
#define  SIM_SOPT2_CLKOUTSEL(x)      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_CLKOUTSEL_SHIFT))&SIM_SOPT2_CLKOUTSEL_MASK)
//   CLKOUT select
//     0b000 ==> Reserved
//     0b001 ==> Reserved
//     0b010 ==> Bus clock
//     0b011 ==> LPO clock (1 kHz)
//     0b100 ==> MCGIRCLK
//     0b101 ==> Reserved
//     0b110 ==> OSCERCLK0
//     0b111 ==> Reserved

#define  SIM_SOPT2_PLLFLLSEL_MASK    0x10000u
#define  SIM_SOPT2_PLLFLLSEL_SHIFT   16
//   PLL/FLL clock select
//     0b0 ==> MCGFLLCLK clock
//     0b1 ==> MCGPLLCLK clock with fixed divide by two

#define  SIM_SOPT2_USBSRC_MASK       0x40000u
#define  SIM_SOPT2_USBSRC_SHIFT      18
//   USB clock source select
//     0b0 ==> External bypass clock (USB_CLKIN).
//     0b1 ==> MCGPLLCLK / MCGFLLCLK clock

#define  SIM_SOPT2_LPTPMSRC_MASK     0x3000000u
#define  SIM_SOPT2_LPTPMSRC_SHIFT    24
#define  SIM_SOPT2_LPTPMSRC(x)       (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_LPTPMSRC_SHIFT))&SIM_SOPT2_LPTPMSRC_MASK)
//   LPTPM clock source select
//     0b00 ==> Clock disabled
//     0b01 ==> MCGFLLCLK clock MCGPLLCLK or
//     0b10 ==> OSCERCLK clock
//     0b11 ==> MCGIRCLK clock

#define  SIM_SOPT2_UART0SRC_MASK     0xC000000u
#define  SIM_SOPT2_UART0SRC_SHIFT    26
#define  SIM_SOPT2_UART0SRC(x)       (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_UART0SRC_SHIFT))&SIM_SOPT2_UART0SRC_MASK)
//   UART0 clock source select
//     0b00 ==> Clock disabled
//     0b01 ==> MCGFLLCLK clock or MCGPLLCLK/2 clock
//     0b10 ==> OSCERCLK clock
//     0b11 ==> MCGIRCLK clock

#define  SIM_SOPT4_LPTPM1CH0SRC_MASK 0x40000u
#define  SIM_SOPT4_LPTPM1CH0SRC_SHIFT 18
//   LPTPM1 channel 0 input capture source select
//     0b0 ==> LPTPM1_CH0 signal
//     0b1 ==> CMP0 output

#define  SIM_SOPT4_LPTPM2CH0SRC_MASK 0x100000u
#define  SIM_SOPT4_LPTPM2CH0SRC_SHIFT 20
//   LPTPM2 channel 0 input capture source select
//     0b0 ==> LPTPM2_CH0 signal
//     0b1 ==> CMP0 output

#define  SIM_SOPT4_LPTPM0CLKSEL_MASK 0x1000000u
#define  SIM_SOPT4_LPTPM0CLKSEL_SHIFT 24
//   LPTPM0 External Clock Pin Select
//     0b0 ==> LPTPM0 external clock driven by LPTPM_CLK0 pin.
//     0b1 ==> LPTPM0 external clock driven by LPTPM_CLK1 pin.

#define  SIM_SOPT4_LPTPM1CLKSEL_MASK 0x2000000u
#define  SIM_SOPT4_LPTPM1CLKSEL_SHIFT 25
//   LPTPM1 External Clock Pin Select
//     0b0 ==> LPTPM1 external clock driven by LPTPM_CLK0 pin.
//     0b1 ==> LPTPM1 external clock driven by LPTPM_CLK1 pin.

#define  SIM_SOPT4_LPTPM2CLKSEL_MASK 0x4000000u
#define  SIM_SOPT4_LPTPM2CLKSEL_SHIFT 26
//   LPTPM2 External Clock Pin Select
//     0b0 ==> LPTPM2 external clock driven by LPTPM_CLK0 pin.
//     0b1 ==> LPTPM2 external clock driven by LPTPM_CLK1 pin.

#define  SIM_SOPT5_UART0TXSRC_MASK   0x3u
#define  SIM_SOPT5_UART0TXSRC_SHIFT  0
#define  SIM_SOPT5_UART0TXSRC(x)     (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0TXSRC_SHIFT))&SIM_SOPT5_UART0TXSRC_MASK)
//   UART0 transmit data source select
//     0b00 ==> UART0_TX pin
//     0b01 ==> UART0_TX pin modulated with LPTPM1 channel 0 output
//     0b10 ==> UART0_TX pin modulated with LPTPM2 channel 0 output
//     0b11 ==> Reserved

#define  SIM_SOPT5_UART0RXSRC_MASK   0x4u
#define  SIM_SOPT5_UART0RXSRC_SHIFT  2
//   UART0 receive data source select
//     0b0 ==> UART0_RX pin
//     0b1 ==> CMP0 output

#define  SIM_SOPT5_UART1TXSRC_MASK   0x30u
#define  SIM_SOPT5_UART1TXSRC_SHIFT  4
#define  SIM_SOPT5_UART1TXSRC(x)     (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1TXSRC_SHIFT))&SIM_SOPT5_UART1TXSRC_MASK)
//   UART1 transmit data source select
//     0b00 ==> UART1_TX pin
//     0b01 ==> UART1_TX pin modulated with LPTPM1 channel 0 output
//     0b10 ==> UART1_TX pin modulated with LPTPM2 channel 0 output
//     0b11 ==> Reserved

#define  SIM_SOPT5_UART1RXSRC_MASK   0x40u
#define  SIM_SOPT5_UART1RXSRC_SHIFT  6
//   UART1 receive data source select
//     0b0 ==> UART1_RX pin
//     0b1 ==> CMP0 output

#define  SIM_SOPT5_UART0ODE_MASK     0x10000u
#define  SIM_SOPT5_UART0ODE_SHIFT    16
//   UART0 Open Drain Enable
//     0b0 ==> Open drain is disabled on UART0
//     0b1 ==> Open drain is enabled on UART0

#define  SIM_SOPT5_UART1ODE_MASK     0x20000u
#define  SIM_SOPT5_UART1ODE_SHIFT    17
//   UART1 Open Drain Enable
//     0b0 ==> Open drain is disabled on UART1
//     0b1 ==> Open drain is enabled on UART1

#define  SIM_SOPT5_UART2ODE_MASK     0x40000u
#define  SIM_SOPT5_UART2ODE_SHIFT    18
//   UART2 Open Drain Enable
//     0b0 ==> Open drain is disabled on UART2
//     0b1 ==> Open drain is enabled on UART2

#define  SIM_SOPT7_ADC0TRGSEL_MASK   0xFu
#define  SIM_SOPT7_ADC0TRGSEL_SHIFT  0
#define  SIM_SOPT7_ADC0TRGSEL(x)     (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0TRGSEL_SHIFT))&SIM_SOPT7_ADC0TRGSEL_MASK)
//   ADC0 trigger select
//     0b0000 ==> External trigger pin input (EXTRG_IN)
//     0b0001 ==> HSCMP0 output
//     0b0010 ==> Reserved
//     0b0011 ==> Reserved
//     0b0100 ==> PIT trigger 0
//     0b0101 ==> PIT trigger 1
//     0b0110 ==> Reserved
//     0b0111 ==> Reserved
//     0b1000 ==> LPTPM0 overflow
//     0b1001 ==> LPTPM1 overflow
//     0b1010 ==> LPTPM2 overflow
//     0b1011 ==> Reserved
//     0b1100 ==> RTC alarm
//     0b1101 ==> RTC seconds
//     0b1110 ==> LPTMR0 trigger
//     0b1111 ==> Reserved

#define  SIM_SOPT7_ADC0PRETRGSEL_MASK 0x10u
#define  SIM_SOPT7_ADC0PRETRGSEL_SHIFT 4
//   ADC0 pretrigger select
//     0b0 ==> Pre-trigger A
//     0b1 ==> Pre-trigger B

#define  SIM_SOPT7_ADC0ALTTRGEN_MASK 0x80u
#define  SIM_SOPT7_ADC0ALTTRGEN_SHIFT 7
//   ADC0 alternate trigger enable
//     0b0 ==> LPTPM1 channel 0 (A) and channel 1 (B) triggers selected for ADC0.
//     0b1 ==> Alternate trigger selected for ADC0.

#define  SIM_SDID_PINID_MASK         0xFu
#define  SIM_SDID_PINID_SHIFT        0
#define  SIM_SDID_PINID(x)           (((uint32_t)(((uint32_t)(x))<<SIM_SDID_PINID_SHIFT))&SIM_SDID_PINID_MASK)
//   Pincount identification
//     0b0000 ==> 16-pin
//     0b0001 ==> 24-pin
//     0b0010 ==> 32-pin
//     0b0011 ==> 44-pin
//     0b0100 ==> 48-pin
//     0b0101 ==> 64-pin
//     0b0110 ==> 80-pin
//     0b0111 ==> Reserved
//     0b1000 ==> 100-pin
//     0b1001 ==> Reserved
//     0b1010 ==> Reserved
//     0b1011 ==> Reserved
//     0b1100 ==> Reserved
//     0b1101 ==> Reserved
//     0b1110 ==> Reserved
//     0b1111 ==> Reserved

#define  SIM_SDID_DIEID_MASK         0xF80u
#define  SIM_SDID_DIEID_SHIFT        7
#define  SIM_SDID_DIEID(x)           (((uint32_t)(((uint32_t)(x))<<SIM_SDID_DIEID_SHIFT))&SIM_SDID_DIEID_MASK)
//   Device die number

#define  SIM_SDID_REVID_MASK         0xF000u
#define  SIM_SDID_REVID_SHIFT        12
#define  SIM_SDID_REVID(x)           (((uint32_t)(((uint32_t)(x))<<SIM_SDID_REVID_SHIFT))&SIM_SDID_REVID_MASK)
//   Device revision number

#define  SIM_SDID_SRAMSIZE_MASK      0xF0000u
#define  SIM_SDID_SRAMSIZE_SHIFT     16
#define  SIM_SDID_SRAMSIZE(x)        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SRAMSIZE_SHIFT))&SIM_SDID_SRAMSIZE_MASK)
//   System SRAM Size
//     0b0000 ==> 0.5kB
//     0b0001 ==> 1 kB
//     0b0010 ==> 2 kB
//     0b0011 ==> 4 kB
//     0b0100 ==> 8 kB
//     0b0101 ==> 16 kB
//     0b0110 ==> 32 kB
//     0b0111 ==> 64 kB

#define  SIM_SDID_SERIESID_MASK      0xF00000u
#define  SIM_SDID_SERIESID_SHIFT     20
#define  SIM_SDID_SERIESID(x)        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SERIESID_SHIFT))&SIM_SDID_SERIESID_MASK)
//   Kinetis Series ID
//     0b0001 ==> KL family

#define  SIM_SDID_SUBFAMID_MASK      0xF000000u
#define  SIM_SDID_SUBFAMID_SHIFT     24
#define  SIM_SDID_SUBFAMID(x)        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SUBFAMID_SHIFT))&SIM_SDID_SUBFAMID_MASK)
//   Kinetis Sub-Family ID
//     0b0100 ==> KLx4 Subfamily (basic analog)
//     0b0101 ==> KLx5 Subfamily (advanced analog)

#define  SIM_SDID_FAMID_MASK         0xF0000000u
#define  SIM_SDID_FAMID_SHIFT        28
#define  SIM_SDID_FAMID(x)           (((uint32_t)(((uint32_t)(x))<<SIM_SDID_FAMID_SHIFT))&SIM_SDID_FAMID_MASK)
//   Kinetis family ID
//     0b0000 ==> KL0x Family
//     0b0001 ==> KL1x Family (basic)
//     0b0010 ==> KL2x Family (USB)
//     0b0011 ==> KL3x Family (Segment LCD)
//     0b0100 ==> KL4x Family (USB and Segment LCD)

#define  SIM_SCGC4_I2C0_MASK         0x40u
#define  SIM_SCGC4_I2C0_SHIFT        6
//   I2C0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_I2C1_MASK         0x80u
#define  SIM_SCGC4_I2C1_SHIFT        7
//   I2C1 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_UART0_MASK        0x400u
#define  SIM_SCGC4_UART0_SHIFT       10
//   UART0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_UART1_MASK        0x800u
#define  SIM_SCGC4_UART1_SHIFT       11
//   UART1 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_UART2_MASK        0x1000u
#define  SIM_SCGC4_UART2_SHIFT       12
//   UART2 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_USBOTG_MASK       0x40000u
#define  SIM_SCGC4_USBOTG_SHIFT      18
//   USB Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_CMP_MASK          0x80000u
#define  SIM_SCGC4_CMP_SHIFT         19
//   Comparator Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_SPI0_MASK         0x400000u
#define  SIM_SCGC4_SPI0_SHIFT        22
//   SPI0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC4_SPI1_MASK         0x800000u
#define  SIM_SCGC4_SPI1_SHIFT        23
//   SPI1 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC5_LPTMR_MASK        0x1u
#define  SIM_SCGC5_LPTMR_SHIFT       0
//   Low Power Timer Access Control
//     0b0 ==> Access disabled
//     0b1 ==> Access enabled

#define  SIM_SCGC5_TSI_MASK          0x20u
#define  SIM_SCGC5_TSI_SHIFT         5
//   TSI Access Control
//     0b0 ==> Access disabled
//     0b1 ==> Access enabled

#define  SIM_SCGC5_PORTA_MASK        0x200u
#define  SIM_SCGC5_PORTA_SHIFT       9
//   Port A Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC5_PORTB_MASK        0x400u
#define  SIM_SCGC5_PORTB_SHIFT       10
//   Port B Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC5_PORTC_MASK        0x800u
#define  SIM_SCGC5_PORTC_SHIFT       11
//   Port C Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC5_PORTD_MASK        0x1000u
#define  SIM_SCGC5_PORTD_SHIFT       12
//   Port D Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC5_PORTE_MASK        0x2000u
#define  SIM_SCGC5_PORTE_SHIFT       13
//   Port E Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_FTF_MASK          0x1u
#define  SIM_SCGC6_FTF_SHIFT         0
//   Flash Memory Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_DMAMUX_MASK       0x2u
#define  SIM_SCGC6_DMAMUX_SHIFT      1
//   DMA Mux Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_PIT_MASK          0x800000u
#define  SIM_SCGC6_PIT_SHIFT         23
//   PIT Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_LPTPM0_MASK       0x1000000u
#define  SIM_SCGC6_LPTPM0_SHIFT      24
//   LPTPM0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_LPTPM1_MASK       0x2000000u
#define  SIM_SCGC6_LPTPM1_SHIFT      25
//   LPTPM1 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_LPTPM2_MASK       0x4000000u
#define  SIM_SCGC6_LPTPM2_SHIFT      26
//   LPTPM2 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_ADC0_MASK         0x8000000u
#define  SIM_SCGC6_ADC0_SHIFT        27
//   ADC0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC6_RTC_MASK          0x20000000u
#define  SIM_SCGC6_RTC_SHIFT         29
//   RTC Access Control
//     0b0 ==> Access and interrupts disabled
//     0b1 ==> Access and interrupts enabled

#define  SIM_SCGC6_DAC0_MASK         0x80000000u
#define  SIM_SCGC6_DAC0_SHIFT        31
//   DAC0 Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_SCGC7_DMA_MASK          0x100u
#define  SIM_SCGC7_DMA_SHIFT         8
//   DMA Clock Gate Control
//     0b0 ==> Clock disabled
//     0b1 ==> Clock enabled

#define  SIM_CLKDIV1_OUTDIV4_MASK    0x70000u
#define  SIM_CLKDIV1_OUTDIV4_SHIFT   16
#define  SIM_CLKDIV1_OUTDIV4(x)      (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV4_SHIFT))&SIM_CLKDIV1_OUTDIV4_MASK)
//   Clock 4 output divider value
//     0b000 ==> Divide-by-1.
//     0b001 ==> Divide-by-2.
//     0b010 ==> Divide-by-3.
//     0b011 ==> Divide-by-4.
//     0b100 ==> Divide-by-5.
//     0b101 ==> Divide-by-6.
//     0b110 ==> Divide-by-7.
//     0b111 ==> Divide-by-8.

#define  SIM_CLKDIV1_OUTDIV1_MASK    0xF0000000u
#define  SIM_CLKDIV1_OUTDIV1_SHIFT   28
#define  SIM_CLKDIV1_OUTDIV1(x)      (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV1_SHIFT))&SIM_CLKDIV1_OUTDIV1_MASK)
//   Clock 1 output divider value
//     0b0000 ==> Divide-by-1.
//     0b0001 ==> Divide-by-2.
//     0b0010 ==> Divide-by-3.
//     0b0011 ==> Divide-by-4.
//     0b0100 ==> Divide-by-5.
//     0b0101 ==> Divide-by-6.
//     0b0110 ==> Divide-by-7.
//     0b0111 ==> Divide-by-8.
//     0b1000 ==> Divide-by-9.
//     0b1001 ==> Divide-by-10.
//     0b1010 ==> Divide-by-11.
//     0b1011 ==> Divide-by-12.
//     0b1100 ==> Divide-by-13.
//     0b1101 ==> Divide-by-14.
//     0b1110 ==> Divide-by-15.
//     0b1111 ==> Divide-by-16.

#define  SIM_FCFG1_FLASHDIS_MASK     0x1u
#define  SIM_FCFG1_FLASHDIS_SHIFT    0
//   Flash Disable
//     0b0 ==> Flash is enabled
//     0b1 ==> Flash is disabled

#define  SIM_FCFG1_FLASHDOZE_MASK    0x2u
#define  SIM_FCFG1_FLASHDOZE_SHIFT   1
//   Flash Doze
//     0b0 ==> Flash remains enabled during Doze mode
//     0b1 ==> Flash is disabled for the duration of Doze mode

#define  SIM_FCFG1_PFSIZE_MASK       0xF000000u
#define  SIM_FCFG1_PFSIZE_SHIFT      24
#define  SIM_FCFG1_PFSIZE(x)         (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_PFSIZE_SHIFT))&SIM_FCFG1_PFSIZE_MASK)
//   Program flash size
//     0b0000 ==> 8 KB of program flash memory, 0.25 KB protection region
//     0b0001 ==> 16 KB of program flash memory, 0.5 KB protection region
//     0b0011 ==> 32 KB of program flash memory, 1 KB protection region
//     0b0101 ==> 64 KB of program flash memory, 2 KB protection region
//     0b0111 ==> 128 KB of program flash memory, 4 KB protection region
//     0b1001 ==> 256 KB of program flash memory, 4 KB protection region
//     0b1111 ==> 128 KB of program flash memory, 4 KB protection region

#define  SIM_FCFG2_MAXADDR_MASK      0x7F000000u
#define  SIM_FCFG2_MAXADDR_SHIFT     24
#define  SIM_FCFG2_MAXADDR(x)        (((uint32_t)(((uint32_t)(x))<<SIM_FCFG2_MAXADDR_SHIFT))&SIM_FCFG2_MAXADDR_MASK)
//   Max address block

#define  SIM_UIDMH_UID_MASK          0xFFFFu
#define  SIM_UIDMH_UID_SHIFT         0
#define  SIM_UIDMH_UID(x)            (((uint32_t)(((uint32_t)(x))<<SIM_UIDMH_UID_SHIFT))&SIM_UIDMH_UID_MASK)
//   Unique Identification

#define  SIM_UIDML_UID_MASK          0xFFFFFFFFu
#define  SIM_UIDML_UID_SHIFT         0
#define  SIM_UIDML_UID(x)            (((uint32_t)(((uint32_t)(x))<<SIM_UIDML_UID_SHIFT))&SIM_UIDML_UID_MASK)
//   Unique Identification

#define  SIM_UIDL_UID_MASK           0xFFFFFFFFu
#define  SIM_UIDL_UID_SHIFT          0
#define  SIM_UIDL_UID(x)             (((uint32_t)(((uint32_t)(x))<<SIM_UIDL_UID_SHIFT))&SIM_UIDL_UID_MASK)
//   Unique Identification

#define  SIM_COPC_COPW_MASK          0x1u
#define  SIM_COPC_COPW_SHIFT         0
//   COP windowed mode
//     0b0 ==> Normal mode
//     0b1 ==> Windowed mode

#define  SIM_COPC_COPCLKS_MASK       0x2u
#define  SIM_COPC_COPCLKS_SHIFT      1
//   COP Clock Select
//     0b0 ==> Internal 1 kHz clock is source to COP
//     0b1 ==> Bus clock is source to COP

#define  SIM_COPC_COPT_MASK          0xCu
#define  SIM_COPC_COPT_SHIFT         2
#define  SIM_COPC_COPT(x)            (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPT_SHIFT))&SIM_COPC_COPT_MASK)
//   COP Watchdog Timeout
//     0b00 ==> COP disabled
//     0b01 ==> COP timeout after 2^5 LPO cycles or 2^13 bus clock cycles
//     0b10 ==> COP timeout after 2^8 LPO cycles or 2^16 bus clock cycles
//     0b11 ==> COP timeout after 2^10 LPO cycles or 2^18 bus clock cycles

#define  SIM_SRVCOP_SRVCOP_MASK      0xFFu
#define  SIM_SRVCOP_SRVCOP_SHIFT     0
#define  SIM_SRVCOP_SRVCOP(x)        (((uint32_t)(((uint32_t)(x))<<SIM_SRVCOP_SRVCOP_SHIFT))&SIM_SRVCOP_SRVCOP_MASK)
//   Sevice COP Register

#define  SMC_PMPROT_AVLLS_MASK       0x2u
#define  SMC_PMPROT_AVLLS_SHIFT      1
//   Allow Very-Low-Leakage Stop Mode
//     0b0 ==> Any VLLSx mode is not allowed
//     0b1 ==> Any VLLSx mode is allowed

#define  SMC_PMPROT_ALLS_MASK        0x8u
#define  SMC_PMPROT_ALLS_SHIFT       3
//   Allow Low-Leakage Stop Mode
//     0b0 ==> LLS is not allowed
//     0b1 ==> LLS is allowed

#define  SMC_PMPROT_AVLP_MASK        0x20u
#define  SMC_PMPROT_AVLP_SHIFT       5
//   Allow Very-Low-Power Modes
//     0b0 ==> VLPR, VLPW and VLPS are not allowed
//     0b1 ==> VLPR, VLPW and VLPS are allowed

#define  SMC_PMCTRL_STOPM_MASK       0x7u
#define  SMC_PMCTRL_STOPM_SHIFT      0
#define  SMC_PMCTRL_STOPM(x)         (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPM_SHIFT))&SMC_PMCTRL_STOPM_MASK)
//   Stop Mode Control
//     0b000 ==> Normal Stop (STOP)
//     0b001 ==> Reserved
//     0b010 ==> Very-Low-Power Stop (VLPS)
//     0b011 ==> Low-Leakage Stop (LLS)
//     0b100 ==> Very-Low-Leakage Stop (VLLSx)
//     0b101 ==> Reserved
//     0b110 ==> Reseved
//     0b111 ==> Reserved

#define  SMC_PMCTRL_STOPA_MASK       0x8u
#define  SMC_PMCTRL_STOPA_SHIFT      3
//   Stop Aborted
//     0b0 ==> The previous stop mode entry was successsful.
//     0b1 ==> The previous stop mode entry was aborted.

#define  SMC_PMCTRL_RUNM_MASK        0x60u
#define  SMC_PMCTRL_RUNM_SHIFT       5
#define  SMC_PMCTRL_RUNM(x)          (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_RUNM_SHIFT))&SMC_PMCTRL_RUNM_MASK)
//   Run Mode Control
//     0b00 ==> Normal Run mode (RUN)
//     0b01 ==> Reserved
//     0b10 ==> Very-Low-Power Run mode (VLPR)
//     0b11 ==> Reserved

#define  SMC_STOPCTRL_VLLSM_MASK     0x7u
#define  SMC_STOPCTRL_VLLSM_SHIFT    0
#define  SMC_STOPCTRL_VLLSM(x)       (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_VLLSM_SHIFT))&SMC_STOPCTRL_VLLSM_MASK)
//   VLLS Mode Control.
//     0b000 ==> VLLS0
//     0b001 ==> VLLS1
//     0b010 ==> VLLS2
//     0b011 ==> VLLS3
//     0b100 ==> Reserved
//     0b101 ==> Reserved
//     0b110 ==> Reserved
//     0b111 ==> Reserved

#define  SMC_STOPCTRL_PORPO_MASK     0x20u
#define  SMC_STOPCTRL_PORPO_SHIFT    5
//   POR Power Option
//     0b0 ==> POR detect circuit is enabled in VLLS0
//     0b1 ==> POR detect circuit is disabled in VLLS0

#define  SMC_STOPCTRL_PSTOPO_MASK    0xC0u
#define  SMC_STOPCTRL_PSTOPO_SHIFT   6
#define  SMC_STOPCTRL_PSTOPO(x)      (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PSTOPO_SHIFT))&SMC_STOPCTRL_PSTOPO_MASK)
//   Partial Stop Option
//     0b00 ==> STOP - Normal Stop mode
//     0b01 ==> PSTOP1 - Partial Stop with both system and bus clocks disabled
//     0b10 ==> PSTOP2 - Partial Stop with system clock disabled and bus clock enabled
//     0b11 ==> Reserved

#define  SMC_PMSTAT_PMSTAT_MASK      0x7Fu
#define  SMC_PMSTAT_PMSTAT_SHIFT     0
#define  SMC_PMSTAT_PMSTAT(x)        (((uint8_t)(((uint8_t)(x))<<SMC_PMSTAT_PMSTAT_SHIFT))&SMC_PMSTAT_PMSTAT_MASK)

#define  SPI0_C1_LSBFE_MASK          0x1u
#define  SPI0_C1_LSBFE_SHIFT         0
//   LSB first (shifter direction)
//     0b0 ==> SPI serial data transfers start with most significant bit
//     0b1 ==> SPI serial data transfers start with least significant bit

#define  SPI0_C1_SSOE_MASK           0x2u
#define  SPI0_C1_SSOE_SHIFT          1
//   Slave select output enable
//     0b0 ==> When MODFEN is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When MODFEN is 1: In master mode, SS pin function is SS input for mode fault. In slave mode, SS pin function is slave select input.
//     0b1 ==> When MODFEN is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When MODFEN is 1: In master mode, SS pin function is automatic SS output. In slave mode: SS pin function is slave select input.

#define  SPI0_C1_CPHA_MASK           0x4u
#define  SPI0_C1_CPHA_SHIFT          2
//   Clock phase
//     0b0 ==> First edge on SPSCK occurs at the middle of the first cycle of a data transfer
//     0b1 ==> First edge on SPSCK occurs at the start of the first cycle of a data transfer

#define  SPI0_C1_CPOL_MASK           0x8u
#define  SPI0_C1_CPOL_SHIFT          3
//   Clock polarity
//     0b0 ==> Active-high SPI clock (idles low)
//     0b1 ==> Active-low SPI clock (idles high)

#define  SPI0_C1_MSTR_MASK           0x10u
#define  SPI0_C1_MSTR_SHIFT          4
//   Master/slave mode select
//     0b0 ==> SPI module configured as a slave SPI device
//     0b1 ==> SPI module configured as a master SPI device

#define  SPI0_C1_SPTIE_MASK          0x20u
#define  SPI0_C1_SPTIE_SHIFT         5
//   SPI transmit interrupt enable
//     0b0 ==> Interrupts from SPTEF inhibited (use polling)
//     0b1 ==> When SPTEF is 1, hardware interrupt requested

#define  SPI0_C1_SPE_MASK            0x40u
#define  SPI0_C1_SPE_SHIFT           6
//   SPI system enable
//     0b0 ==> SPI system inactive
//     0b1 ==> SPI system enabled

#define  SPI0_C1_SPIE_MASK           0x80u
#define  SPI0_C1_SPIE_SHIFT          7
//   SPI interrupt enable: for SPRF and MODF
//     0b0 ==> Interrupts from SPRF and MODF are inhibited-use polling
//     0b1 ==> Request a hardware interrupt when SPRF or MODF is 1

#define  SPI0_C2_SPC0_MASK           0x1u
#define  SPI0_C2_SPC0_SHIFT          0
//   SPI pin control 0
//     0b0 ==> SPI uses separate pins for data input and data output (pin mode is normal). In master mode of operation: MISO is master in and MOSI is master out. In slave mode of operation: MISO is slave out and MOSI is slave in.
//     0b1 ==> SPI configured for single-wire bidirectional operation (pin mode is bidirectional). In master mode of operation: MISO is not used by SPI; MOSI is master in when BIDIROE is 0 or master I/O when BIDIROE is 1. In slave mode of operation: MISO is slave in when BIDIROE is 0 or slave I/O when BIDIROE is 1; MOSI is not used by SPI.

#define  SPI0_C2_SPISWAI_MASK        0x2u
#define  SPI0_C2_SPISWAI_SHIFT       1
//   SPI stop in wait mode
//     0b0 ==> SPI clocks continue to operate in wait mode
//     0b1 ==> SPI clocks stop when the MCU enters wait mode

#define  SPI0_C2_RXDMAE_MASK         0x4u
#define  SPI0_C2_RXDMAE_SHIFT        2
//   Receive DMA enable
//     0b0 ==> DMA request for receive is disabled and interrupt from SPRF is allowed
//     0b1 ==> DMA request for receive is enabled and interrupt from SPRF is disabled

#define  SPI0_C2_BIDIROE_MASK        0x8u
#define  SPI0_C2_BIDIROE_SHIFT       3
//   Bidirectional mode output enable
//     0b0 ==> Output driver disabled so SPI data I/O pin acts as an input
//     0b1 ==> SPI I/O pin enabled as an output

#define  SPI0_C2_MODFEN_MASK         0x10u
#define  SPI0_C2_MODFEN_SHIFT        4
//   Master mode-fault function enable
//     0b0 ==> Mode fault function disabled, master SS pin reverts to general-purpose I/O not controlled by SPI
//     0b1 ==> Mode fault function enabled, master SS pin acts as the mode fault input or the slave select output

#define  SPI0_C2_TXDMAE_MASK         0x20u
#define  SPI0_C2_TXDMAE_SHIFT        5
//   Transmit DMA enable
//     0b0 ==> DMA request for transmit is disabled and interrupt from SPTEF is allowed
//     0b1 ==> DMA request for transmit is enabled and interrupt from SPTEF is disabled

#define  SPI0_C2_SPLPIE_MASK         0x40u
#define  SPI0_C2_SPLPIE_SHIFT        6
//   SPI low power interrupt enable bit
//     0b0 ==> The SPI module cannot generate an asynchronous interrupt to wake the CPU from wait mode or stop mode.
//     0b1 ==> Under specific conditions, the SPI module can generate an asynchronous interrupt to wake the CPU from wait mode or stop mode.

#define  SPI0_C2_SPMIE_MASK          0x80u
#define  SPI0_C2_SPMIE_SHIFT         7
//   SPI match interrupt enable
//     0b0 ==> Interrupts from SPMF inhibited (use polling)
//     0b1 ==> When SPMF is 1, requests a hardware interrupt

#define  SPI0_BR_SPR_MASK            0xFu
#define  SPI0_BR_SPR_SHIFT           0
#define  SPI0_BR_SPR(x)              (((uint8_t)(((uint8_t)(x))<<SPI0_BR_SPR_SHIFT))&SPI0_BR_SPR_MASK)
//   SPI baud rate divisor
//     0b0000 ==> Baud rate divisor is 2
//     0b0001 ==> Baud rate divisor is 4
//     0b0010 ==> Baud rate divisor is 8
//     0b0011 ==> Baud rate divisor is 16
//     0b0100 ==> Baud rate divisor is 32
//     0b0101 ==> Baud rate divisor is 64
//     0b0110 ==> Baud rate divisor is 128
//     0b0111 ==> Baud rate divisor is 256
//     0b1000 ==> Baud rate divisor is 512

#define  SPI0_BR_SPPR_MASK           0x70u
#define  SPI0_BR_SPPR_SHIFT          4
#define  SPI0_BR_SPPR(x)             (((uint8_t)(((uint8_t)(x))<<SPI0_BR_SPPR_SHIFT))&SPI0_BR_SPPR_MASK)
//   SPI baud rate prescale divisor
//     0b000 ==> Baud rate prescaler divisor is 1
//     0b001 ==> Baud rate prescaler divisor is 2
//     0b010 ==> Baud rate prescaler divisor is 3
//     0b011 ==> Baud rate prescaler divisor is 4
//     0b100 ==> Baud rate prescaler divisor is 5
//     0b101 ==> Baud rate prescaler divisor is 6
//     0b110 ==> Baud rate prescaler divisor is 7
//     0b111 ==> Baud rate prescaler divisor is 8

#define  SPI0_S_MODF_MASK            0x10u
#define  SPI0_S_MODF_SHIFT           4
//   Master mode fault flag
//     0b0 ==> No mode fault error
//     0b1 ==> Mode fault error detected

#define  SPI0_S_SPTEF_MASK           0x20u
#define  SPI0_S_SPTEF_SHIFT          5
//   SPI transmit buffer empty flag
//     0b0 ==> SPI transmit buffer not empty
//     0b1 ==> SPI transmit buffer empty

#define  SPI0_S_SPMF_MASK            0x40u
#define  SPI0_S_SPMF_SHIFT           6
//   SPI match flag
//     0b0 ==> Value in the receive data buffer does not match the value in the M register
//     0b1 ==> Value in the receive data buffer matches the value in the M register

#define  SPI0_S_SPRF_MASK            0x80u
#define  SPI0_S_SPRF_SHIFT           7
//   SPI read buffer full flag
//     0b0 ==> No data available in the receive data buffer
//     0b1 ==> Data available in the receive data buffer

#define  SPI0_D_Bits_MASK            0xFFu
#define  SPI0_D_Bits_SHIFT           0
#define  SPI0_D_Bits(x)              (((uint8_t)(((uint8_t)(x))<<SPI0_D_Bits_SHIFT))&SPI0_D_Bits_MASK)
//   Data (low byte)

#define  SPI0_M_Bits_MASK            0xFFu
#define  SPI0_M_Bits_SHIFT           0
#define  SPI0_M_Bits(x)              (((uint8_t)(((uint8_t)(x))<<SPI0_M_Bits_SHIFT))&SPI0_M_Bits_MASK)
//   Hardware compare value (low byte)

#define  SPI1_C1_LSBFE_MASK          0x1u
#define  SPI1_C1_LSBFE_SHIFT         0
//   LSB first (shifter direction)
//     0b0 ==> SPI serial data transfers start with most significant bit
//     0b1 ==> SPI serial data transfers start with least significant bit

#define  SPI1_C1_SSOE_MASK           0x2u
#define  SPI1_C1_SSOE_SHIFT          1
//   Slave select output enable
//     0b0 ==> When MODFEN is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When MODFEN is 1: In master mode, SS pin function is SS input for mode fault. In slave mode, SS pin function is slave select input.
//     0b1 ==> When MODFEN is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When MODFEN is 1: In master mode, SS pin function is automatic SS output. In slave mode: SS pin function is slave select input.

#define  SPI1_C1_CPHA_MASK           0x4u
#define  SPI1_C1_CPHA_SHIFT          2
//   Clock phase
//     0b0 ==> First edge on SPSCK occurs at the middle of the first cycle of a data transfer
//     0b1 ==> First edge on SPSCK occurs at the start of the first cycle of a data transfer

#define  SPI1_C1_CPOL_MASK           0x8u
#define  SPI1_C1_CPOL_SHIFT          3
//   Clock polarity
//     0b0 ==> Active-high SPI clock (idles low)
//     0b1 ==> Active-low SPI clock (idles high)

#define  SPI1_C1_MSTR_MASK           0x10u
#define  SPI1_C1_MSTR_SHIFT          4
//   Master/slave mode select
//     0b0 ==> SPI module configured as a slave SPI device
//     0b1 ==> SPI module configured as a master SPI device

#define  SPI1_C1_SPTIE_MASK          0x20u
#define  SPI1_C1_SPTIE_SHIFT         5
//   SPI transmit interrupt enable
//     0b0 ==> Interrupts from SPTEF inhibited (use polling)
//     0b1 ==> When SPTEF is 1, hardware interrupt requested

#define  SPI1_C1_SPE_MASK            0x40u
#define  SPI1_C1_SPE_SHIFT           6
//   SPI system enable
//     0b0 ==> SPI system inactive
//     0b1 ==> SPI system enabled

#define  SPI1_C1_SPIE_MASK           0x80u
#define  SPI1_C1_SPIE_SHIFT          7
//   SPI interrupt enable: for SPRF and MODF
//     0b0 ==> Interrupts from SPRF and MODF are inhibited-use polling
//     0b1 ==> Request a hardware interrupt when SPRF or MODF is 1

#define  SPI1_C2_SPC0_MASK           0x1u
#define  SPI1_C2_SPC0_SHIFT          0
//   SPI pin control 0
//     0b0 ==> SPI uses separate pins for data input and data output (pin mode is normal). In master mode of operation: MISO is master in and MOSI is master out. In slave mode of operation: MISO is slave out and MOSI is slave in.
//     0b1 ==> SPI configured for single-wire bidirectional operation (pin mode is bidirectional). In master mode of operation: MISO is not used by SPI; MOSI is master in when BIDIROE is 0 or master I/O when BIDIROE is 1. In slave mode of operation: MISO is slave in when BIDIROE is 0 or slave I/O when BIDIROE is 1; MOSI is not used by SPI.

#define  SPI1_C2_SPISWAI_MASK        0x2u
#define  SPI1_C2_SPISWAI_SHIFT       1
//   SPI stop in wait mode
//     0b0 ==> SPI clocks continue to operate in wait mode
//     0b1 ==> SPI clocks stop when the MCU enters wait mode

#define  SPI1_C2_RXDMAE_MASK         0x4u
#define  SPI1_C2_RXDMAE_SHIFT        2
//   Receive DMA enable
//     0b0 ==> DMA request for receive is disabled and interrupt from SPRF is allowed
//     0b1 ==> DMA request for receive is enabled and interrupt from SPRF is disabled

#define  SPI1_C2_BIDIROE_MASK        0x8u
#define  SPI1_C2_BIDIROE_SHIFT       3
//   Bidirectional mode output enable
//     0b0 ==> Output driver disabled so SPI data I/O pin acts as an input
//     0b1 ==> SPI I/O pin enabled as an output

#define  SPI1_C2_MODFEN_MASK         0x10u
#define  SPI1_C2_MODFEN_SHIFT        4
//   Master mode-fault function enable
//     0b0 ==> Mode fault function disabled, master SS pin reverts to general-purpose I/O not controlled by SPI
//     0b1 ==> Mode fault function enabled, master SS pin acts as the mode fault input or the slave select output

#define  SPI1_C2_TXDMAE_MASK         0x20u
#define  SPI1_C2_TXDMAE_SHIFT        5
//   Transmit DMA enable
//     0b0 ==> DMA request for transmit is disabled and interrupt from SPTEF is allowed
//     0b1 ==> DMA request for transmit is enabled and interrupt from SPTEF is disabled

#define  SPI1_C2_SPLPIE_MASK         0x40u
#define  SPI1_C2_SPLPIE_SHIFT        6
//   SPI low power interrupt enable bit
//     0b0 ==> The SPI module cannot generate an asynchronous interrupt to wake the CPU from wait mode or stop mode.
//     0b1 ==> Under specific conditions, the SPI module can generate an asynchronous interrupt to wake the CPU from wait mode or stop mode.

#define  SPI1_C2_SPMIE_MASK          0x80u
#define  SPI1_C2_SPMIE_SHIFT         7
//   SPI match interrupt enable
//     0b0 ==> Interrupts from SPMF inhibited (use polling)
//     0b1 ==> When SPMF is 1, requests a hardware interrupt

#define  SPI1_BR_SPR_MASK            0xFu
#define  SPI1_BR_SPR_SHIFT           0
#define  SPI1_BR_SPR(x)              (((uint8_t)(((uint8_t)(x))<<SPI1_BR_SPR_SHIFT))&SPI1_BR_SPR_MASK)
//   SPI baud rate divisor
//     0b0000 ==> Baud rate divisor is 2
//     0b0001 ==> Baud rate divisor is 4
//     0b0010 ==> Baud rate divisor is 8
//     0b0011 ==> Baud rate divisor is 16
//     0b0100 ==> Baud rate divisor is 32
//     0b0101 ==> Baud rate divisor is 64
//     0b0110 ==> Baud rate divisor is 128
//     0b0111 ==> Baud rate divisor is 256
//     0b1000 ==> Baud rate divisor is 512

#define  SPI1_BR_SPPR_MASK           0x70u
#define  SPI1_BR_SPPR_SHIFT          4
#define  SPI1_BR_SPPR(x)             (((uint8_t)(((uint8_t)(x))<<SPI1_BR_SPPR_SHIFT))&SPI1_BR_SPPR_MASK)
//   SPI baud rate prescale divisor
//     0b000 ==> Baud rate prescaler divisor is 1
//     0b001 ==> Baud rate prescaler divisor is 2
//     0b010 ==> Baud rate prescaler divisor is 3
//     0b011 ==> Baud rate prescaler divisor is 4
//     0b100 ==> Baud rate prescaler divisor is 5
//     0b101 ==> Baud rate prescaler divisor is 6
//     0b110 ==> Baud rate prescaler divisor is 7
//     0b111 ==> Baud rate prescaler divisor is 8

#define  SPI1_S_MODF_MASK            0x10u
#define  SPI1_S_MODF_SHIFT           4
//   Master mode fault flag
//     0b0 ==> No mode fault error
//     0b1 ==> Mode fault error detected

#define  SPI1_S_SPTEF_MASK           0x20u
#define  SPI1_S_SPTEF_SHIFT          5
//   SPI transmit buffer empty flag
//     0b0 ==> SPI transmit buffer not empty
//     0b1 ==> SPI transmit buffer empty

#define  SPI1_S_SPMF_MASK            0x40u
#define  SPI1_S_SPMF_SHIFT           6
//   SPI match flag
//     0b0 ==> Value in the receive data buffer does not match the value in the M register
//     0b1 ==> Value in the receive data buffer matches the value in the M register

#define  SPI1_S_SPRF_MASK            0x80u
#define  SPI1_S_SPRF_SHIFT           7
//   SPI read buffer full flag
//     0b0 ==> No data available in the receive data buffer
//     0b1 ==> Data available in the receive data buffer

#define  SPI1_D_Bits_MASK            0xFFu
#define  SPI1_D_Bits_SHIFT           0
#define  SPI1_D_Bits(x)              (((uint8_t)(((uint8_t)(x))<<SPI1_D_Bits_SHIFT))&SPI1_D_Bits_MASK)
//   Data (low byte)

#define  SPI1_M_Bits_MASK            0xFFu
#define  SPI1_M_Bits_SHIFT           0
#define  SPI1_M_Bits(x)              (((uint8_t)(((uint8_t)(x))<<SPI1_M_Bits_SHIFT))&SPI1_M_Bits_MASK)
//   Hardware compare value (low byte)

#define  TSI0_GENCS_CURSW_MASK       0x2u
#define  TSI0_GENCS_CURSW_SHIFT      1
//   CURSW
//     0b0 ==> The current source pair are not swapped.
//     0b1 ==> The current source pair are swapped.

#define  TSI0_GENCS_EOSF_MASK        0x4u
#define  TSI0_GENCS_EOSF_SHIFT       2
//   End of Scan Flag
//     0b0 ==> Scan not complete.
//     0b1 ==> Scan complete.

#define  TSI0_GENCS_SCNIP_MASK       0x8u
#define  TSI0_GENCS_SCNIP_SHIFT      3
//   Scan In Progress Status
//     0b0 ==> No scan in progress.
//     0b1 ==> Scan in progress.

#define  TSI0_GENCS_STM_MASK         0x10u
#define  TSI0_GENCS_STM_SHIFT        4
//   Scan Trigger Mode
//     0b0 ==> Software trigger scan.
//     0b1 ==> Hardware trigger scan.

#define  TSI0_GENCS_STPE_MASK        0x20u
#define  TSI0_GENCS_STPE_SHIFT       5
//   TSI STOP Enable
//     0b0 ==> TSI is disabled when MCU goes into low power mode.
//     0b1 ==> Allows TSI to continue running in all low power modes.

#define  TSI0_GENCS_TSIIEN_MASK      0x40u
#define  TSI0_GENCS_TSIIEN_SHIFT     6
//   Touch Sensing Input Interrupt Enable
//     0b0 ==> TSI interrupt is disabled.
//     0b1 ==> TSI interrupt is enabled.

#define  TSI0_GENCS_TSIEN_MASK       0x80u
#define  TSI0_GENCS_TSIEN_SHIFT      7
//   Touch Sensing Input Module Enable
//     0b0 ==> TSI module disabled.
//     0b1 ==> TSI module enabled.

#define  TSI0_GENCS_NSCN_MASK        0x1F00u
#define  TSI0_GENCS_NSCN_SHIFT       8
#define  TSI0_GENCS_NSCN(x)          (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_NSCN_SHIFT))&TSI0_GENCS_NSCN_MASK)
//   NSCN
//     0b00000 ==> Once per electrode
//     0b00001 ==> Twice per electrode
//     0b00010 ==> 3 times per electrode
//     0b00011 ==> 4 times per electrode
//     0b00100 ==> 5 times per electrode
//     0b00101 ==> 6 times per electrode
//     0b00110 ==> 7 times per electrode
//     0b00111 ==> 8 times per electrode
//     0b01000 ==> 9 times per electrode
//     0b01001 ==> 10 times per electrode
//     0b01010 ==> 11 times per electrode
//     0b01011 ==> 12 times per electrode
//     0b01100 ==> 13 times per electrode
//     0b01101 ==> 14 times per electrode
//     0b01110 ==> 15 times per electrode
//     0b01111 ==> 16 times per electrode
//     0b10000 ==> 17 times per electrode
//     0b10001 ==> 18 times per electrode
//     0b10010 ==> 19 times per electrode
//     0b10011 ==> 20 times per electrode
//     0b10100 ==> 21 times per electrode
//     0b10101 ==> 22 times per electrode
//     0b10110 ==> 23 times per electrode
//     0b10111 ==> 24 times per electrode
//     0b11000 ==> 25 times per electrode
//     0b11001 ==> 26 times per electrode
//     0b11010 ==> 27 times per electrode
//     0b11011 ==> 28 times per electrode
//     0b11100 ==> 29 times per electrode
//     0b11101 ==> 30 times per electrode
//     0b11110 ==> 31 times per electrode
//     0b11111 ==> 32 times per electrode

#define  TSI0_GENCS_PS_MASK          0xE000u
#define  TSI0_GENCS_PS_SHIFT         13
#define  TSI0_GENCS_PS(x)            (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_PS_SHIFT))&TSI0_GENCS_PS_MASK)
//   PS
//     0b000 ==> Electrode Oscillator Frequency divided by 1
//     0b001 ==> Electrode Oscillator Frequency divided by 2
//     0b010 ==> Electrode Oscillator Frequency divided by 4
//     0b011 ==> Electrode Oscillator Frequency divided by 8
//     0b100 ==> Electrode Oscillator Frequency divided by 16
//     0b101 ==> Electrode Oscillator Frequency divided by 32
//     0b110 ==> Electrode Oscillator Frequency divided by 64
//     0b111 ==> Electrode Oscillator Frequency divided by 128

#define  TSI0_GENCS_EXTCHRG_MASK     0x70000u
#define  TSI0_GENCS_EXTCHRG_SHIFT    16
#define  TSI0_GENCS_EXTCHRG(x)       (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_EXTCHRG_SHIFT))&TSI0_GENCS_EXTCHRG_MASK)
//   EXTCHRG
//     0b000 ==> 500 nA.
//     0b001 ==> 1 μA.
//     0b010 ==> 2 μA.
//     0b011 ==> 4 μA.
//     0b100 ==> 8 μA.
//     0b101 ==> 16 μA.
//     0b110 ==> 32 μA.
//     0b111 ==> 64 μA.

#define  TSI0_GENCS_DVOLT_MASK       0x180000u
#define  TSI0_GENCS_DVOLT_SHIFT      19
#define  TSI0_GENCS_DVOLT(x)         (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_DVOLT_SHIFT))&TSI0_GENCS_DVOLT_MASK)
//   DVOLT
//     0b00 ==> DV = 1.03 V; VP = 1.33 V; Vm = 0.30 V.
//     0b01 ==> DV = 0.73 V; VP = 1.18 V; Vm = 0.45 V.
//     0b10 ==> DV = 0.43 V; VP = 1.03 V; Vm = 0.60 V.
//     0b11 ==> DV = 0.29 V; VP = 0.95 V; Vm = 0.67 V.

#define  TSI0_GENCS_REFCHRG_MASK     0xE00000u
#define  TSI0_GENCS_REFCHRG_SHIFT    21
#define  TSI0_GENCS_REFCHRG(x)       (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_REFCHRG_SHIFT))&TSI0_GENCS_REFCHRG_MASK)
//   REFCHRG
//     0b000 ==> 500 nA.
//     0b001 ==> 1 μA.
//     0b010 ==> 2 μA.
//     0b011 ==> 4 μA.
//     0b100 ==> 8 μA.
//     0b101 ==> 16 μA.
//     0b110 ==> 32 μA.
//     0b111 ==> 64 μA.

#define  TSI0_GENCS_STATUS_SETUP_MASK 0xF000000u
#define  TSI0_GENCS_STATUS_SETUP_SHIFT 24
#define  TSI0_GENCS_STATUS_SETUP(x)  (((uint32_t)(((uint32_t)(x))<<TSI0_GENCS_STATUS_SETUP_SHIFT))&TSI0_GENCS_STATUS_SETUP_MASK)
//   TSI analog modes setup and status bits.
//     0b0000 ==> Set TSI in capacitive sensing(non-noise detection) mode.
//     0b0100 ==> Set TSI analog to work in single threshold noise detection mode and the frequency limitation circuit is disabled.
//     0b1000 ==> Set TSI analog to work in single threshold noise detection mode and the frequency limitation circuit is enabled to work in higher frequencies operations.
//     0b1100 ==> Set TSI analog to work in automatic noise detection mode.

#define  TSI0_GENCS_ESOR_MASK        0x10000000u
#define  TSI0_GENCS_ESOR_SHIFT       28
//   End-of-scan or Out-of-Range Interrupt Selection
//     0b0 ==> Out-of-range interrupt is allowed.
//     0b1 ==> End-of-scan interrupt is allowed.

#define  TSI0_GENCS_OUTRGF_MASK      0x80000000u
#define  TSI0_GENCS_OUTRGF_SHIFT     31
//   Out of Range Flag.

#define  TSI0_DATA_TSICNT_MASK       0xFFFFu
#define  TSI0_DATA_TSICNT_SHIFT      0
#define  TSI0_DATA_TSICNT(x)         (((uint32_t)(((uint32_t)(x))<<TSI0_DATA_TSICNT_SHIFT))&TSI0_DATA_TSICNT_MASK)
//   TSI Conversion Counter Value

#define  TSI0_DATA_SWTS_MASK         0x400000u
#define  TSI0_DATA_SWTS_SHIFT        22
//   Software Trigger Start
//     0b0 ==> No effect.
//     0b1 ==> Start a scan to determine which channel is specified by TSI_DATA[TSICH].

#define  TSI0_DATA_DMAEN_MASK        0x800000u
#define  TSI0_DATA_DMAEN_SHIFT       23
//   DMA Transfer Enabled
//     0b0 ==> Interrupt is selected when the interrupt enable bit is set and the corresponding TSI events assert.
//     0b1 ==> DMA transfer request is selected when the interrupt enable bit is set and the corresponding TSI events assert.

#define  TSI0_DATA_TSICH_MASK        0xF0000000u
#define  TSI0_DATA_TSICH_SHIFT       28
#define  TSI0_DATA_TSICH(x)          (((uint32_t)(((uint32_t)(x))<<TSI0_DATA_TSICH_SHIFT))&TSI0_DATA_TSICH_MASK)
//   TSICH
//     0b0000 ==> Channel 0.
//     0b0001 ==> Channel 1.
//     0b0010 ==> Channel 2.
//     0b0011 ==> Channel 3.
//     0b0100 ==> Channel 4.
//     0b0101 ==> Channel 5.
//     0b0110 ==> Channel 6.
//     0b0111 ==> Channel 7.
//     0b1000 ==> Channel 8.
//     0b1001 ==> Channel 9.
//     0b1010 ==> Channel 10.
//     0b1011 ==> Channel 11.
//     0b1100 ==> Channel 12.
//     0b1101 ==> Channel 13.
//     0b1110 ==> Channel 14.
//     0b1111 ==> Channel 15.

#define  TSI0_TSHD_THRESL_MASK       0xFFFFu
#define  TSI0_TSHD_THRESL_SHIFT      0
#define  TSI0_TSHD_THRESL(x)         (((uint32_t)(((uint32_t)(x))<<TSI0_TSHD_THRESL_SHIFT))&TSI0_TSHD_THRESL_MASK)
//   TSI Wakeup Channel Low-threshold

#define  TSI0_TSHD_THRESH_MASK       0xFFFF0000u
#define  TSI0_TSHD_THRESH_SHIFT      16
#define  TSI0_TSHD_THRESH(x)         (((uint32_t)(((uint32_t)(x))<<TSI0_TSHD_THRESH_SHIFT))&TSI0_TSHD_THRESH_MASK)
//   TSI Wakeup Channel High-threshold
/*
#define  UART0_BDH_SBR_MASK          0x1Fu
#define  UART0_BDH_SBR_SHIFT         0
#define  UART0_BDH_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBR_SHIFT))&UART0_BDH_SBR_MASK)
//   Baud Rate Modulo Divisor.

#define  UART0_BDH_SBNS_MASK         0x20u
#define  UART0_BDH_SBNS_SHIFT        5
//   Stop Bit Number Select
//     0b0 ==> One stop bit.
//     0b1 ==> Two stop bit.

#define  UART0_BDH_RXEDGIE_MASK      0x40u
#define  UART0_BDH_RXEDGIE_SHIFT     6
//   RX Input Active Edge Interrupt Enable (for RXEDGIF)
//     0b0 ==> Hardware interrupts from UART_S2[RXEDGIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[RXEDGIF] flag is 1.

#define  UART0_BDH_LBKDIE_MASK       0x80u
#define  UART0_BDH_LBKDIE_SHIFT      7
//   LIN Break Detect Interrupt Enable (for LBKDIF)
//     0b0 ==> Hardware interrupts from UART_S2[LBKDIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[LBKDIF] flag is 1.

#define  UART0_BDL_SBR_MASK          0xFFu
#define  UART0_BDL_SBR_SHIFT         0
#define  UART0_BDL_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART0_BDL_SBR_SHIFT))&UART0_BDL_SBR_MASK)
//   Baud Rate Modulo Divisor

#define  UART0_C1_PT_MASK            0x1u
#define  UART0_C1_PT_SHIFT           0
//   Parity Type
//     0b0 ==> Even parity.
//     0b1 ==> Odd parity.

#define  UART0_C1_PE_MASK            0x2u
#define  UART0_C1_PE_SHIFT           1
//   Parity Enable
//     0b0 ==> No hardware parity generation or checking.
//     0b1 ==> Parity enabled.

#define  UART0_C1_ILT_MASK           0x4u
#define  UART0_C1_ILT_SHIFT          2
//   Idle Line Type Select
//     0b0 ==> Idle character bit count starts after start bit.
//     0b1 ==> Idle character bit count starts after stop bit.

#define  UART0_C1_WAKE_MASK          0x8u
#define  UART0_C1_WAKE_SHIFT         3
//   Receiver Wakeup Method Select
//     0b0 ==> Idle-line wakeup.
//     0b1 ==> Address-mark wakeup.

#define  UART0_C1_M_MASK             0x10u
#define  UART0_C1_M_SHIFT            4
//   9-Bit or 8-Bit Mode Select
//     0b0 ==> Receiver and transmitter use 8-bit data characters.
//     0b1 ==> Receiver and transmitter use 9-bit data characters.

#define  UART0_C1_RSRC_MASK          0x20u
#define  UART0_C1_RSRC_SHIFT         5
//   Receiver Source Select
//     0b0 ==> Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the UART does not use the UART_RX pins.
//     0b1 ==> Single-wire UART mode where the UART_TX pin is connected to the transmitter output and receiver input.

#define  UART0_C1_DOZEEN_MASK        0x40u
#define  UART0_C1_DOZEEN_SHIFT       6
//   Doze Enable
//     0b0 ==> UART is enabled in Wait mode.
//     0b1 ==> UART is disabled in Wait mode.

#define  UART0_C1_LOOPS_MASK         0x80u
#define  UART0_C1_LOOPS_SHIFT        7
//   Loop Mode Select
//     0b0 ==> Normal operation - UART_RX and UART_TX use separate pins.
//     0b1 ==> Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input. (See RSRC bit.) UART_RX pin is not used by UART.

#define  UART0_C2_SBK_MASK           0x1u
#define  UART0_C2_SBK_SHIFT          0
//   Send Break
//     0b0 ==> Normal transmitter operation.
//     0b1 ==> Queue break character(s) to be sent.

#define  UART0_C2_RWU_MASK           0x2u
#define  UART0_C2_RWU_SHIFT          1
//   Receiver Wakeup Control
//     0b0 ==> Normal UART receiver operation.
//     0b1 ==> UART receiver in standby waiting for wakeup condition.

#define  UART0_C2_RE_MASK            0x4u
#define  UART0_C2_RE_SHIFT           2
//   Receiver Enable
//     0b0 ==> Receiver disabled.
//     0b1 ==> Receiver enabled.

#define  UART0_C2_TE_MASK            0x8u
#define  UART0_C2_TE_SHIFT           3
//   Transmitter Enable
//     0b0 ==> Transmitter disabled.
//     0b1 ==> Transmitter enabled.

#define  UART0_C2_ILIE_MASK          0x10u
#define  UART0_C2_ILIE_SHIFT         4
//   Idle Line Interrupt Enable for IDLE
//     0b0 ==> Hardware interrupts from IDLE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when IDLE flag is 1.

#define  UART0_C2_RIE_MASK           0x20u
#define  UART0_C2_RIE_SHIFT          5
//   Receiver Interrupt Enable for RDRF
//     0b0 ==> Hardware interrupts from RDRF disabled; use polling.
//     0b1 ==> Hardware interrupt requested when RDRF flag is 1.

#define  UART0_C2_TCIE_MASK          0x40u
#define  UART0_C2_TCIE_SHIFT         6
//   Transmission Complete Interrupt Enable for TC
//     0b0 ==> Hardware interrupts from TC disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TC flag is 1.

#define  UART0_C2_TIE_MASK           0x80u
#define  UART0_C2_TIE_SHIFT          7
//   Transmit Interrupt Enable for TDRE
//     0b0 ==> Hardware interrupts from TDRE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TDRE flag is 1.

#define  UART0_S1_PF_MASK            0x1u
#define  UART0_S1_PF_SHIFT           0
//   Parity Error Flag
//     0b0 ==> No parity error.
//     0b1 ==> Parity error.

#define  UART0_S1_FE_MASK            0x2u
#define  UART0_S1_FE_SHIFT           1
//   Framing Error Flag
//     0b0 ==> No framing error detected. This does not guarantee the framing is correct.
//     0b1 ==> Framing error.

#define  UART0_S1_NF_MASK            0x4u
#define  UART0_S1_NF_SHIFT           2
//   Noise Flag
//     0b0 ==> No noise detected.
//     0b1 ==> Noise detected in the received character in UART_D.

#define  UART0_S1_OR_MASK            0x8u
#define  UART0_S1_OR_SHIFT           3
//   Receiver Overrun Flag
//     0b0 ==> No overrun.
//     0b1 ==> Receive overrun (new UART data lost).

#define  UART0_S1_IDLE_MASK          0x10u
#define  UART0_S1_IDLE_SHIFT         4
//   Idle Line Flag
//     0b0 ==> No idle line detected.
//     0b1 ==> Idle line was detected.

#define  UART0_S1_RDRF_MASK          0x20u
#define  UART0_S1_RDRF_SHIFT         5
//   Receive Data Register Full Flag
//     0b0 ==> Receive data buffer empty.
//     0b1 ==> Receive data buffer full.

#define  UART0_S1_TC_MASK            0x40u
#define  UART0_S1_TC_SHIFT           6
//   Transmission Complete Flag
//     0b0 ==> Transmitter active (sending data, a preamble, or a break).
//     0b1 ==> Transmitter idle (transmission activity complete).

#define  UART0_S1_TDRE_MASK          0x80u
#define  UART0_S1_TDRE_SHIFT         7
//   Transmit Data Register Empty Flag
//     0b0 ==> Transmit data buffer full.
//     0b1 ==> Transmit data buffer empty.

#define  UART0_S2_RAF_MASK           0x1u
#define  UART0_S2_RAF_SHIFT          0
//   Receiver Active Flag
//     0b0 ==> UART receiver idle waiting for a start bit.
//     0b1 ==> UART receiver active (UART_RXD input not idle).

#define  UART0_S2_LBKDE_MASK         0x2u
#define  UART0_S2_LBKDE_SHIFT        1
//   LIN Break Detection Enable
//     0b0 ==> Break character is detected at length 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1 or M10 = 1, SNBS = 0) or 13 (if M10 = 1, SNBS = 1).
//     0b1 ==> Break character is detected at length of 11 bit times (if M = 0, SBNS = 0) or 12 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 14 (if M = 1, SBNS = 1 or M10 = 1, SNBS = 0) or 15 (if M10 = 1, SNBS = 1).

#define  UART0_S2_BRK13_MASK         0x4u
#define  UART0_S2_BRK13_SHIFT        2
//   Break Character Generation Length
//     0b0 ==> Break character is transmitted with length of 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1 or M10 = 1, SNBS = 0) or 13 (if M10 = 1, SNBS = 1).
//     0b1 ==> Break character is transmitted with length of 13 bit times (if M = 0, SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1, SBNS = 1 or M10 = 1, SNBS = 0) or 16 (if M10 = 1, SNBS = 1).

#define  UART0_S2_RWUID_MASK         0x8u
#define  UART0_S2_RWUID_SHIFT        3
//   Receive Wake Up Idle Detect
//     0b0 ==> During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character.
//     0b1 ==> During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character.

#define  UART0_S2_RXINV_MASK         0x10u
#define  UART0_S2_RXINV_SHIFT        4
//   Receive Data Inversion
//     0b0 ==> Receive data not inverted.
//     0b1 ==> Receive data inverted.

#define  UART0_S2_MSBF_MASK          0x20u
#define  UART0_S2_MSBF_SHIFT         5
//   MSB First
//     0b0 ==> LSB (bit0) is the first bit that is transmitted following the start bit. Further, the first bit received after the start bit is identified as bit0.
//     0b1 ==> MSB (bit9, bit8, bit7 or bit6) is the first bit that is transmitted following the start bit depending on the setting of C1[M], C1[PE] and C4[M10]. Further, the first bit received after the start bit is identified as bit9, bit8, bit7 or bit6 depending on the setting of C1[M] and C1[PE].

#define  UART0_S2_RXEDGIF_MASK       0x40u
#define  UART0_S2_RXEDGIF_SHIFT      6
//   UART_RX Pin Active Edge Interrupt Flag
//     0b0 ==> No active edge on the receive pin has occurred.
//     0b1 ==> An active edge on the receive pin has occurred.

#define  UART0_S2_LBKDIF_MASK        0x80u
#define  UART0_S2_LBKDIF_SHIFT       7
//   LIN Break Detect Interrupt Flag
//     0b0 ==> No LIN break character has been detected.
//     0b1 ==> LIN break character has been detected.

#define  UART0_C3_PEIE_MASK          0x1u
#define  UART0_C3_PEIE_SHIFT         0
//   Parity Error Interrupt Enable
//     0b0 ==> PF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when PF is set.

#define  UART0_C3_FEIE_MASK          0x2u
#define  UART0_C3_FEIE_SHIFT         1
//   Framing Error Interrupt Enable
//     0b0 ==> FE interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when FE is set.

#define  UART0_C3_NEIE_MASK          0x4u
#define  UART0_C3_NEIE_SHIFT         2
//   Noise Error Interrupt Enable
//     0b0 ==> NF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when NF is set.

#define  UART0_C3_ORIE_MASK          0x8u
#define  UART0_C3_ORIE_SHIFT         3
//   Overrun Interrupt Enable
//     0b0 ==> OR interrupts disabled; use polling.
//     0b1 ==> Hardware interrupt requested when OR is set.

#define  UART0_C3_TXINV_MASK         0x10u
#define  UART0_C3_TXINV_SHIFT        4
//   Transmit Data Inversion
//     0b0 ==> Transmit data not inverted.
//     0b1 ==> Transmit data inverted.

#define  UART0_C3_TXDIR_MASK         0x20u
#define  UART0_C3_TXDIR_SHIFT        5
//   UART_TX Pin Direction in Single-Wire Mode
//     0b0 ==> UART_TXD pin is an input in single-wire mode.
//     0b1 ==> UART_TXD pin is an output in single-wire mode.

#define  UART0_C3_R9T8_MASK          0x40u
#define  UART0_C3_R9T8_SHIFT         6
//   Receive Bit 9 / Transmit Bit 8

#define  UART0_C3_R8T9_MASK          0x80u
#define  UART0_C3_R8T9_SHIFT         7
//   Receive Bit 8 / Transmit Bit 9

#define  UART0_D_R0T0_MASK           0x1u
#define  UART0_D_R0T0_SHIFT          0

#define  UART0_D_R1T1_MASK           0x2u
#define  UART0_D_R1T1_SHIFT          1

#define  UART0_D_R2T2_MASK           0x4u
#define  UART0_D_R2T2_SHIFT          2

#define  UART0_D_R3T3_MASK           0x8u
#define  UART0_D_R3T3_SHIFT          3

#define  UART0_D_R4T4_MASK           0x10u
#define  UART0_D_R4T4_SHIFT          4

#define  UART0_D_R5T5_MASK           0x20u
#define  UART0_D_R5T5_SHIFT          5

#define  UART0_D_R6T6_MASK           0x40u
#define  UART0_D_R6T6_SHIFT          6

#define  UART0_D_R7T7_MASK           0x80u
#define  UART0_D_R7T7_SHIFT          7

#define  UART0_MA1_MA_MASK           0xFFu
#define  UART0_MA1_MA_SHIFT          0
#define  UART0_MA1_MA(x)             (((uint8_t)(((uint8_t)(x))<<UART0_MA1_MA_SHIFT))&UART0_MA1_MA_MASK)
//   Match Address

#define  UART0_MA2_MA_MASK           0xFFu
#define  UART0_MA2_MA_SHIFT          0
#define  UART0_MA2_MA(x)             (((uint8_t)(((uint8_t)(x))<<UART0_MA2_MA_SHIFT))&UART0_MA2_MA_MASK)
//   Match Address

#define  UART0_C4_OSR_MASK           0x1Fu
#define  UART0_C4_OSR_SHIFT          0
#define  UART0_C4_OSR(x)             (((uint8_t)(((uint8_t)(x))<<UART0_C4_OSR_SHIFT))&UART0_C4_OSR_MASK)
//   Over Sampling Ratio

#define  UART0_C4_M10_MASK           0x20u
#define  UART0_C4_M10_SHIFT          5
//   10-bit Mode select
//     0b0 ==> Receiver and transmitter use 8-bit or 9-bit data characters.
//     0b1 ==> Receiver and transmitter use 10-bit data characters.

#define  UART0_C4_MAEN2_MASK         0x40u
#define  UART0_C4_MAEN2_SHIFT        6
//   Match Address Mode Enable 2
//     0b0 ==> All data received is transferred to the data buffer if MAEN1 is cleared.
//     0b1 ==> All data received with the most significant bit cleared, is discarded. All data received with the most significant bit set, is compared with contents of MA2 register. If no match occurs, the data is discarded. If match occurs, data is transferred to the data buffer.

#define  UART0_C4_MAEN1_MASK         0x80u
#define  UART0_C4_MAEN1_SHIFT        7
//   Match Address Mode Enable 1
//     0b0 ==> All data received is transferred to the data buffer if MAEN2 is cleared.
//     0b1 ==> All data received with the most significant bit cleared, is discarded. All data received with the most significant bit set, is compared with contents of MA1 register. If no match occurs, the data is discarded. If match occurs, data is transferred to the data buffer.

#define  UART0_C5_RESYNCDIS_MASK     0x1u
#define  UART0_C5_RESYNCDIS_SHIFT    0
//   Resynchronization Disable
//     0b0 ==> Resynchronization during received data word is supported
//     0b1 ==> Resynchronization during received data word is disabled

#define  UART0_C5_BOTHEDGE_MASK      0x2u
#define  UART0_C5_BOTHEDGE_SHIFT     1
//   Both Edge Sampling
//     0b0 ==> Receiver samples input data using the rising edge of the baud rate clock.
//     0b1 ==> Receiver samples input data using the rising and falling edge of the baud rate clock.

#define  UART0_C5_RDMAE_MASK         0x20u
#define  UART0_C5_RDMAE_SHIFT        5
//   Receiver Full DMA Enable
//     0b0 ==> DMA request disabled.
//     0b1 ==> DMA request enabled.

#define  UART0_C5_TDMAE_MASK         0x80u
#define  UART0_C5_TDMAE_SHIFT        7
//   Transmitter DMA Enable
//     0b0 ==> DMA request disabled.
//     0b1 ==> DMA request enabled.

#define  UART1_BDH_SBR_MASK          0x1Fu
#define  UART1_BDH_SBR_SHIFT         0
#define  UART1_BDH_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART1_BDH_SBR_SHIFT))&UART1_BDH_SBR_MASK)
//   Baud Rate Modulo Divisor.

#define  UART1_BDH_SBNS_MASK         0x20u
#define  UART1_BDH_SBNS_SHIFT        5
//   Stop Bit Number Select
//     0b0 ==> One stop bit.
//     0b1 ==> Two stop bit.

#define  UART1_BDH_RXEDGIE_MASK      0x40u
#define  UART1_BDH_RXEDGIE_SHIFT     6
//   RxD Input Active Edge Interrupt Enable (for RXEDGIF)
//     0b0 ==> Hardware interrupts from UART_S2[RXEDGIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[RXEDGIF] flag is 1.

#define  UART1_BDH_LBKDIE_MASK       0x80u
#define  UART1_BDH_LBKDIE_SHIFT      7
//   LIN Break Detect Interrupt Enable (for LBKDIF)
//     0b0 ==> Hardware interrupts from UART_S2[LBKDIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[LBKDIF] flag is 1.

#define  UART1_BDL_SBR_MASK          0xFFu
#define  UART1_BDL_SBR_SHIFT         0
#define  UART1_BDL_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART1_BDL_SBR_SHIFT))&UART1_BDL_SBR_MASK)
//   Baud Rate Modulo Divisor

#define  UART1_C1_PT_MASK            0x1u
#define  UART1_C1_PT_SHIFT           0
//   Parity Type
//     0b0 ==> Even parity.
//     0b1 ==> Odd parity.

#define  UART1_C1_PE_MASK            0x2u
#define  UART1_C1_PE_SHIFT           1
//   Parity Enable
//     0b0 ==> No hardware parity generation or checking.
//     0b1 ==> Parity enabled.

#define  UART1_C1_ILT_MASK           0x4u
#define  UART1_C1_ILT_SHIFT          2
//   Idle Line Type Select
//     0b0 ==> Idle character bit count starts after start bit.
//     0b1 ==> Idle character bit count starts after stop bit.

#define  UART1_C1_WAKE_MASK          0x8u
#define  UART1_C1_WAKE_SHIFT         3
//   Receiver Wakeup Method Select
//     0b0 ==> Idle-line wakeup.
//     0b1 ==> Address-mark wakeup.

#define  UART1_C1_M_MASK             0x10u
#define  UART1_C1_M_SHIFT            4
//   9-Bit or 8-Bit Mode Select
//     0b0 ==> Normal - start + 8 data bits (lsb first) + stop.
//     0b1 ==> Receiver and transmitter use 9-bit data characters start + 8 data bits (lsb first) + 9th data bit + stop.

#define  UART1_C1_RSRC_MASK          0x20u
#define  UART1_C1_RSRC_SHIFT         5
//   Receiver Source Select
//     0b0 ==> Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the UART does not use the RxD pins.
//     0b1 ==> Single-wire UART mode where the TxD pin is connected to the transmitter output and receiver input.

#define  UART1_C1_SCISWAI_MASK       0x40u
#define  UART1_C1_SCISWAI_SHIFT      6
//   UART Stops in Wait Mode
//     0b0 ==> UART clocks continue to run in wait mode so the UART can be the source of an interrupt that wakes up the CPU.
//     0b1 ==> UART clocks freeze while CPU is in wait mode.

#define  UART1_C1_LOOPS_MASK         0x80u
#define  UART1_C1_LOOPS_SHIFT        7
//   Loop Mode Select
//     0b0 ==> Normal operation - RxD and TxD use separate pins.
//     0b1 ==> Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input. (See RSRC bit.) RxD pin is not used by UART.

#define  UART1_C2_SBK_MASK           0x1u
#define  UART1_C2_SBK_SHIFT          0
//   Send Break
//     0b0 ==> Normal transmitter operation.
//     0b1 ==> Queue break character(s) to be sent.

#define  UART1_C2_RWU_MASK           0x2u
#define  UART1_C2_RWU_SHIFT          1
//   Receiver Wakeup Control
//     0b0 ==> Normal UART receiver operation.
//     0b1 ==> UART receiver in standby waiting for wakeup condition.

#define  UART1_C2_RE_MASK            0x4u
#define  UART1_C2_RE_SHIFT           2
//   Receiver Enable
//     0b0 ==> Receiver off.
//     0b1 ==> Receiver on.

#define  UART1_C2_TE_MASK            0x8u
#define  UART1_C2_TE_SHIFT           3
//   Transmitter Enable
//     0b0 ==> Transmitter off.
//     0b1 ==> Transmitter on.

#define  UART1_C2_ILIE_MASK          0x10u
#define  UART1_C2_ILIE_SHIFT         4
//   Idle Line Interrupt Enable for IDLE
//     0b0 ==> Hardware interrupts from IDLE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when IDLE flag is 1.

#define  UART1_C2_RIE_MASK           0x20u
#define  UART1_C2_RIE_SHIFT          5
//   Receiver Interrupt Enable for RDRF
//     0b0 ==> Hardware interrupts from RDRF disabled; use polling.
//     0b1 ==> Hardware interrupt requested when RDRF flag is 1.

#define  UART1_C2_TCIE_MASK          0x40u
#define  UART1_C2_TCIE_SHIFT         6
//   Transmission Complete Interrupt Enable for TC
//     0b0 ==> Hardware interrupts from TC disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TC flag is 1.

#define  UART1_C2_TIE_MASK           0x80u
#define  UART1_C2_TIE_SHIFT          7
//   Transmit Interrupt Enable for TDRE
//     0b0 ==> Hardware interrupts from TDRE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TDRE flag is 1.

#define  UART1_S1_PF_MASK            0x1u
#define  UART1_S1_PF_SHIFT           0
//   Parity Error Flag
//     0b0 ==> No parity error.
//     0b1 ==> Parity error.

#define  UART1_S1_FE_MASK            0x2u
#define  UART1_S1_FE_SHIFT           1
//   Framing Error Flag
//     0b0 ==> No framing error detected. This does not guarantee the framing is correct.
//     0b1 ==> Framing error.

#define  UART1_S1_NF_MASK            0x4u
#define  UART1_S1_NF_SHIFT           2
//   Noise Flag
//     0b0 ==> No noise detected.
//     0b1 ==> Noise detected in the received character in UART_D.

#define  UART1_S1_OR_MASK            0x8u
#define  UART1_S1_OR_SHIFT           3
//   Receiver Overrun Flag
//     0b0 ==> No overrun.
//     0b1 ==> Receive overrun (new UART data lost).

#define  UART1_S1_IDLE_MASK          0x10u
#define  UART1_S1_IDLE_SHIFT         4
//   Idle Line Flag
//     0b0 ==> No idle line detected.
//     0b1 ==> Idle line was detected.

#define  UART1_S1_RDRF_MASK          0x20u
#define  UART1_S1_RDRF_SHIFT         5
//   Receive Data Register Full Flag
//     0b0 ==> Receive data register empty.
//     0b1 ==> Receive data register full.

#define  UART1_S1_TC_MASK            0x40u
#define  UART1_S1_TC_SHIFT           6
//   Transmission Complete Flag
//     0b0 ==> Transmitter active (sending data, a preamble, or a break).
//     0b1 ==> Transmitter idle (transmission activity complete).

#define  UART1_S1_TDRE_MASK          0x80u
#define  UART1_S1_TDRE_SHIFT         7
//   Transmit Data Register Empty Flag
//     0b0 ==> Transmit data register (buffer) full.
//     0b1 ==> Transmit data register (buffer) empty.

#define  UART1_S2_RAF_MASK           0x1u
#define  UART1_S2_RAF_SHIFT          0
//   Receiver Active Flag
//     0b0 ==> UART receiver idle waiting for a start bit.
//     0b1 ==> UART receiver active (RxD input not idle).

#define  UART1_S2_LBKDE_MASK         0x2u
#define  UART1_S2_LBKDE_SHIFT        1
//   LIN Break Detection Enable
//     0b0 ==> Break character is detected at length 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1).
//     0b1 ==> Break character is detected at length of 11 bit times (if M = 0, SBNS = 0) or 12 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 13 (if M = 1, SBNS = 1).

#define  UART1_S2_BRK13_MASK         0x4u
#define  UART1_S2_BRK13_SHIFT        2
//   Break Character Generation Length
//     0b0 ==> Break character is transmitted with length of 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1).
//     0b1 ==> Break character is transmitted with length of 13 bit times (if M = 0, SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1, SBNS = 1).

#define  UART1_S2_RWUID_MASK         0x8u
#define  UART1_S2_RWUID_SHIFT        3
//   Receive Wake Up Idle Detect
//     0b0 ==> During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character.
//     0b1 ==> During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character.

#define  UART1_S2_RXINV_MASK         0x10u
#define  UART1_S2_RXINV_SHIFT        4
//   Receive Data Inversion
//     0b0 ==> Receive data not inverted.
//     0b1 ==> Receive data inverted.

#define  UART1_S2_RXEDGIF_MASK       0x40u
#define  UART1_S2_RXEDGIF_SHIFT      6
//   RxD Pin Active Edge Interrupt Flag
//     0b0 ==> No active edge on the receive pin has occurred.
//     0b1 ==> An active edge on the receive pin has occurred.

#define  UART1_S2_LBKDIF_MASK        0x80u
#define  UART1_S2_LBKDIF_SHIFT       7
//   LIN Break Detect Interrupt Flag
//     0b0 ==> No LIN break character has been detected.
//     0b1 ==> LIN break character has been detected.

#define  UART1_C3_PEIE_MASK          0x1u
#define  UART1_C3_PEIE_SHIFT         0
//   Parity Error Interrupt Enable
//     0b0 ==> PF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when PF is set.

#define  UART1_C3_FEIE_MASK          0x2u
#define  UART1_C3_FEIE_SHIFT         1
//   Framing Error Interrupt Enable
//     0b0 ==> FE interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when FE is set.

#define  UART1_C3_NEIE_MASK          0x4u
#define  UART1_C3_NEIE_SHIFT         2
//   Noise Error Interrupt Enable
//     0b0 ==> NF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when NF is set.

#define  UART1_C3_ORIE_MASK          0x8u
#define  UART1_C3_ORIE_SHIFT         3
//   Overrun Interrupt Enable
//     0b0 ==> OR interrupts disabled; use polling.
//     0b1 ==> Hardware interrupt requested when OR is set.

#define  UART1_C3_TXINV_MASK         0x10u
#define  UART1_C3_TXINV_SHIFT        4
//   Transmit Data Inversion
//     0b0 ==> Transmit data not inverted.
//     0b1 ==> Transmit data inverted.

#define  UART1_C3_TXDIR_MASK         0x20u
#define  UART1_C3_TXDIR_SHIFT        5
//   TxD Pin Direction in Single-Wire Mode
//     0b0 ==> TxD pin is an input in single-wire mode.
//     0b1 ==> TxD pin is an output in single-wire mode.

#define  UART1_C3_T8_MASK            0x40u
#define  UART1_C3_T8_SHIFT           6
//   Ninth Data Bit for Transmitter

#define  UART1_C3_R8_MASK            0x80u
#define  UART1_C3_R8_SHIFT           7
//   Ninth Data Bit for Receiver

#define  UART1_D_R0T0_MASK           0x1u
#define  UART1_D_R0T0_SHIFT          0

#define  UART1_D_R1T1_MASK           0x2u
#define  UART1_D_R1T1_SHIFT          1

#define  UART1_D_R2T2_MASK           0x4u
#define  UART1_D_R2T2_SHIFT          2

#define  UART1_D_R3T3_MASK           0x8u
#define  UART1_D_R3T3_SHIFT          3

#define  UART1_D_R4T4_MASK           0x10u
#define  UART1_D_R4T4_SHIFT          4

#define  UART1_D_R5T5_MASK           0x20u
#define  UART1_D_R5T5_SHIFT          5

#define  UART1_D_R6T6_MASK           0x40u
#define  UART1_D_R6T6_SHIFT          6

#define  UART1_D_R7T7_MASK           0x80u
#define  UART1_D_R7T7_SHIFT          7

#define  UART1_C4_LBKDDMAS_MASK      0x8u
#define  UART1_C4_LBKDDMAS_SHIFT     3
//   LIN Break Detect DMA Select Bit
//     0b0 ==> If LBKDIE is set and the LBKDIF flag is set, the LBKDIF interrupt signal is asserted to request interrupt service.
//     0b1 ==> If LBKDIE is set and the LBKDIF flag is set, the LBKDIF DMA request signal is asserted to request a DMA transfer.

#define  UART1_C4_ILDMAS_MASK        0x10u
#define  UART1_C4_ILDMAS_SHIFT       4
//   Idle Line DMA Select
//     0b0 ==> If ILIE is set and the IDLE flag is set, the IDLE interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If ILIE is set and the IDLE flag is set, the IDLE DMA request signal is asserted to request a DMA transfer.

#define  UART1_C4_RDMAS_MASK         0x20u
#define  UART1_C4_RDMAS_SHIFT        5
//   Receiver Full DMA Select
//     0b0 ==> If RIE is set and the RDRF flag is set, the RDRF interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If RIE is set and the RDRF flag is set, the RDRF DMA request signal is asserted to request a DMA transfer.

#define  UART1_C4_TCDMAS_MASK        0x40u
#define  UART1_C4_TCDMAS_SHIFT       6
//   Transmission Complete DMA Select
//     0b0 ==> If TCIE is set and the TC flag is set, the TC interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If TCIE is set and the TC flag is set, the TC DMA request signal is asserted to request a DMA transfer.

#define  UART1_C4_TDMAS_MASK         0x80u
#define  UART1_C4_TDMAS_SHIFT        7
//   Transmitter DMA Select
//     0b0 ==> If TIE is set and the TDRE flag is set, the TDRE interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If TIE is set and the TDRE flag is set, the TDRE DMA request signal is asserted to request a DMA transfer.

#define  UART2_BDH_SBR_MASK          0x1Fu
#define  UART2_BDH_SBR_SHIFT         0
#define  UART2_BDH_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART2_BDH_SBR_SHIFT))&UART2_BDH_SBR_MASK)
//   Baud Rate Modulo Divisor.

#define  UART2_BDH_SBNS_MASK         0x20u
#define  UART2_BDH_SBNS_SHIFT        5
//   Stop Bit Number Select
//     0b0 ==> One stop bit.
//     0b1 ==> Two stop bit.

#define  UART2_BDH_RXEDGIE_MASK      0x40u
#define  UART2_BDH_RXEDGIE_SHIFT     6
//   RxD Input Active Edge Interrupt Enable (for RXEDGIF)
//     0b0 ==> Hardware interrupts from UART_S2[RXEDGIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[RXEDGIF] flag is 1.

#define  UART2_BDH_LBKDIE_MASK       0x80u
#define  UART2_BDH_LBKDIE_SHIFT      7
//   LIN Break Detect Interrupt Enable (for LBKDIF)
//     0b0 ==> Hardware interrupts from UART_S2[LBKDIF] disabled (use polling).
//     0b1 ==> Hardware interrupt requested when UART_S2[LBKDIF] flag is 1.

#define  UART2_BDL_SBR_MASK          0xFFu
#define  UART2_BDL_SBR_SHIFT         0
#define  UART2_BDL_SBR(x)            (((uint8_t)(((uint8_t)(x))<<UART2_BDL_SBR_SHIFT))&UART2_BDL_SBR_MASK)
//   Baud Rate Modulo Divisor

#define  UART2_C1_PT_MASK            0x1u
#define  UART2_C1_PT_SHIFT           0
//   Parity Type
//     0b0 ==> Even parity.
//     0b1 ==> Odd parity.

#define  UART2_C1_PE_MASK            0x2u
#define  UART2_C1_PE_SHIFT           1
//   Parity Enable
//     0b0 ==> No hardware parity generation or checking.
//     0b1 ==> Parity enabled.

#define  UART2_C1_ILT_MASK           0x4u
#define  UART2_C1_ILT_SHIFT          2
//   Idle Line Type Select
//     0b0 ==> Idle character bit count starts after start bit.
//     0b1 ==> Idle character bit count starts after stop bit.

#define  UART2_C1_WAKE_MASK          0x8u
#define  UART2_C1_WAKE_SHIFT         3
//   Receiver Wakeup Method Select
//     0b0 ==> Idle-line wakeup.
//     0b1 ==> Address-mark wakeup.

#define  UART2_C1_M_MASK             0x10u
#define  UART2_C1_M_SHIFT            4
//   9-Bit or 8-Bit Mode Select
//     0b0 ==> Normal - start + 8 data bits (lsb first) + stop.
//     0b1 ==> Receiver and transmitter use 9-bit data characters start + 8 data bits (lsb first) + 9th data bit + stop.

#define  UART2_C1_RSRC_MASK          0x20u
#define  UART2_C1_RSRC_SHIFT         5
//   Receiver Source Select
//     0b0 ==> Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the UART does not use the RxD pins.
//     0b1 ==> Single-wire UART mode where the TxD pin is connected to the transmitter output and receiver input.

#define  UART2_C1_SCISWAI_MASK       0x40u
#define  UART2_C1_SCISWAI_SHIFT      6
//   UART Stops in Wait Mode
//     0b0 ==> UART clocks continue to run in wait mode so the UART can be the source of an interrupt that wakes up the CPU.
//     0b1 ==> UART clocks freeze while CPU is in wait mode.

#define  UART2_C1_LOOPS_MASK         0x80u
#define  UART2_C1_LOOPS_SHIFT        7
//   Loop Mode Select
//     0b0 ==> Normal operation - RxD and TxD use separate pins.
//     0b1 ==> Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input. (See RSRC bit.) RxD pin is not used by UART.

#define  UART2_C2_SBK_MASK           0x1u
#define  UART2_C2_SBK_SHIFT          0
//   Send Break
//     0b0 ==> Normal transmitter operation.
//     0b1 ==> Queue break character(s) to be sent.

#define  UART2_C2_RWU_MASK           0x2u
#define  UART2_C2_RWU_SHIFT          1
//   Receiver Wakeup Control
//     0b0 ==> Normal UART receiver operation.
//     0b1 ==> UART receiver in standby waiting for wakeup condition.

#define  UART2_C2_RE_MASK            0x4u
#define  UART2_C2_RE_SHIFT           2
//   Receiver Enable
//     0b0 ==> Receiver off.
//     0b1 ==> Receiver on.

#define  UART2_C2_TE_MASK            0x8u
#define  UART2_C2_TE_SHIFT           3
//   Transmitter Enable
//     0b0 ==> Transmitter off.
//     0b1 ==> Transmitter on.

#define  UART2_C2_ILIE_MASK          0x10u
#define  UART2_C2_ILIE_SHIFT         4
//   Idle Line Interrupt Enable for IDLE
//     0b0 ==> Hardware interrupts from IDLE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when IDLE flag is 1.

#define  UART2_C2_RIE_MASK           0x20u
#define  UART2_C2_RIE_SHIFT          5
//   Receiver Interrupt Enable for RDRF
//     0b0 ==> Hardware interrupts from RDRF disabled; use polling.
//     0b1 ==> Hardware interrupt requested when RDRF flag is 1.

#define  UART2_C2_TCIE_MASK          0x40u
#define  UART2_C2_TCIE_SHIFT         6
//   Transmission Complete Interrupt Enable for TC
//     0b0 ==> Hardware interrupts from TC disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TC flag is 1.

#define  UART2_C2_TIE_MASK           0x80u
#define  UART2_C2_TIE_SHIFT          7
//   Transmit Interrupt Enable for TDRE
//     0b0 ==> Hardware interrupts from TDRE disabled; use polling.
//     0b1 ==> Hardware interrupt requested when TDRE flag is 1.

#define  UART2_S1_PF_MASK            0x1u
#define  UART2_S1_PF_SHIFT           0
//   Parity Error Flag
//     0b0 ==> No parity error.
//     0b1 ==> Parity error.

#define  UART2_S1_FE_MASK            0x2u
#define  UART2_S1_FE_SHIFT           1
//   Framing Error Flag
//     0b0 ==> No framing error detected. This does not guarantee the framing is correct.
//     0b1 ==> Framing error.

#define  UART2_S1_NF_MASK            0x4u
#define  UART2_S1_NF_SHIFT           2
//   Noise Flag
//     0b0 ==> No noise detected.
//     0b1 ==> Noise detected in the received character in UART_D.

#define  UART2_S1_OR_MASK            0x8u
#define  UART2_S1_OR_SHIFT           3
//   Receiver Overrun Flag
//     0b0 ==> No overrun.
//     0b1 ==> Receive overrun (new UART data lost).

#define  UART2_S1_IDLE_MASK          0x10u
#define  UART2_S1_IDLE_SHIFT         4
//   Idle Line Flag
//     0b0 ==> No idle line detected.
//     0b1 ==> Idle line was detected.

#define  UART2_S1_RDRF_MASK          0x20u
#define  UART2_S1_RDRF_SHIFT         5
//   Receive Data Register Full Flag
//     0b0 ==> Receive data register empty.
//     0b1 ==> Receive data register full.

#define  UART2_S1_TC_MASK            0x40u
#define  UART2_S1_TC_SHIFT           6
//   Transmission Complete Flag
//     0b0 ==> Transmitter active (sending data, a preamble, or a break).
//     0b1 ==> Transmitter idle (transmission activity complete).

#define  UART2_S1_TDRE_MASK          0x80u
#define  UART2_S1_TDRE_SHIFT         7
//   Transmit Data Register Empty Flag
//     0b0 ==> Transmit data register (buffer) full.
//     0b1 ==> Transmit data register (buffer) empty.

#define  UART2_S2_RAF_MASK           0x1u
#define  UART2_S2_RAF_SHIFT          0
//   Receiver Active Flag
//     0b0 ==> UART receiver idle waiting for a start bit.
//     0b1 ==> UART receiver active (RxD input not idle).

#define  UART2_S2_LBKDE_MASK         0x2u
#define  UART2_S2_LBKDE_SHIFT        1
//   LIN Break Detection Enable
//     0b0 ==> Break character is detected at length 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1).
//     0b1 ==> Break character is detected at length of 11 bit times (if M = 0, SBNS = 0) or 12 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 13 (if M = 1, SBNS = 1).

#define  UART2_S2_BRK13_MASK         0x4u
#define  UART2_S2_BRK13_SHIFT        2
//   Break Character Generation Length
//     0b0 ==> Break character is transmitted with length of 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1).
//     0b1 ==> Break character is transmitted with length of 13 bit times (if M = 0, SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1, SBNS = 1).

#define  UART2_S2_RWUID_MASK         0x8u
#define  UART2_S2_RWUID_SHIFT        3
//   Receive Wake Up Idle Detect
//     0b0 ==> During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character.
//     0b1 ==> During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character.

#define  UART2_S2_RXINV_MASK         0x10u
#define  UART2_S2_RXINV_SHIFT        4
//   Receive Data Inversion
//     0b0 ==> Receive data not inverted.
//     0b1 ==> Receive data inverted.

#define  UART2_S2_RXEDGIF_MASK       0x40u
#define  UART2_S2_RXEDGIF_SHIFT      6
//   RxD Pin Active Edge Interrupt Flag
//     0b0 ==> No active edge on the receive pin has occurred.
//     0b1 ==> An active edge on the receive pin has occurred.

#define  UART2_S2_LBKDIF_MASK        0x80u
#define  UART2_S2_LBKDIF_SHIFT       7
//   LIN Break Detect Interrupt Flag
//     0b0 ==> No LIN break character has been detected.
//     0b1 ==> LIN break character has been detected.

#define  UART2_C3_PEIE_MASK          0x1u
#define  UART2_C3_PEIE_SHIFT         0
//   Parity Error Interrupt Enable
//     0b0 ==> PF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when PF is set.

#define  UART2_C3_FEIE_MASK          0x2u
#define  UART2_C3_FEIE_SHIFT         1
//   Framing Error Interrupt Enable
//     0b0 ==> FE interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when FE is set.

#define  UART2_C3_NEIE_MASK          0x4u
#define  UART2_C3_NEIE_SHIFT         2
//   Noise Error Interrupt Enable
//     0b0 ==> NF interrupts disabled; use polling).
//     0b1 ==> Hardware interrupt requested when NF is set.

#define  UART2_C3_ORIE_MASK          0x8u
#define  UART2_C3_ORIE_SHIFT         3
//   Overrun Interrupt Enable
//     0b0 ==> OR interrupts disabled; use polling.
//     0b1 ==> Hardware interrupt requested when OR is set.

#define  UART2_C3_TXINV_MASK         0x10u
#define  UART2_C3_TXINV_SHIFT        4
//   Transmit Data Inversion
//     0b0 ==> Transmit data not inverted.
//     0b1 ==> Transmit data inverted.

#define  UART2_C3_TXDIR_MASK         0x20u
#define  UART2_C3_TXDIR_SHIFT        5
//   TxD Pin Direction in Single-Wire Mode
//     0b0 ==> TxD pin is an input in single-wire mode.
//     0b1 ==> TxD pin is an output in single-wire mode.

#define  UART2_C3_T8_MASK            0x40u
#define  UART2_C3_T8_SHIFT           6
//   Ninth Data Bit for Transmitter

#define  UART2_C3_R8_MASK            0x80u
#define  UART2_C3_R8_SHIFT           7
//   Ninth Data Bit for Receiver

#define  UART2_D_R0T0_MASK           0x1u
#define  UART2_D_R0T0_SHIFT          0

#define  UART2_D_R1T1_MASK           0x2u
#define  UART2_D_R1T1_SHIFT          1

#define  UART2_D_R2T2_MASK           0x4u
#define  UART2_D_R2T2_SHIFT          2

#define  UART2_D_R3T3_MASK           0x8u
#define  UART2_D_R3T3_SHIFT          3

#define  UART2_D_R4T4_MASK           0x10u
#define  UART2_D_R4T4_SHIFT          4

#define  UART2_D_R5T5_MASK           0x20u
#define  UART2_D_R5T5_SHIFT          5

#define  UART2_D_R6T6_MASK           0x40u
#define  UART2_D_R6T6_SHIFT          6

#define  UART2_D_R7T7_MASK           0x80u
#define  UART2_D_R7T7_SHIFT          7

#define  UART2_C4_LBKDDMAS_MASK      0x8u
#define  UART2_C4_LBKDDMAS_SHIFT     3
//   LIN Break Detect DMA Select Bit
//     0b0 ==> If LBKDIE is set and the LBKDIF flag is set, the LBKDIF interrupt signal is asserted to request interrupt service.
//     0b1 ==> If LBKDIE is set and the LBKDIF flag is set, the LBKDIF DMA request signal is asserted to request a DMA transfer.

#define  UART2_C4_ILDMAS_MASK        0x10u
#define  UART2_C4_ILDMAS_SHIFT       4
//   Idle Line DMA Select
//     0b0 ==> If ILIE is set and the IDLE flag is set, the IDLE interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If ILIE is set and the IDLE flag is set, the IDLE DMA request signal is asserted to request a DMA transfer.

#define  UART2_C4_RDMAS_MASK         0x20u
#define  UART2_C4_RDMAS_SHIFT        5
//   Receiver Full DMA Select
//     0b0 ==> If RIE is set and the RDRF flag is set, the RDRF interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If RIE is set and the RDRF flag is set, the RDRF DMA request signal is asserted to request a DMA transfer.

#define  UART2_C4_TCDMAS_MASK        0x40u
#define  UART2_C4_TCDMAS_SHIFT       6
//   Transmission Complete DMA Select
//     0b0 ==> If TCIE is set and the TC flag is set, the TC interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If TCIE is set and the TC flag is set, the TC DMA request signal is asserted to request a DMA transfer.

#define  UART2_C4_TDMAS_MASK         0x80u
#define  UART2_C4_TDMAS_SHIFT        7
//   Transmitter DMA Select
//     0b0 ==> If TIE is set and the TDRE flag is set, the TDRE interrupt request signal is asserted to request interrupt service.
//     0b1 ==> If TIE is set and the TDRE flag is set, the TDRE DMA request signal is asserted to request a DMA transfer.
*/
#define  USB0_PERID_ID_MASK          0x3Fu
#define  USB0_PERID_ID_SHIFT         0
#define  USB0_PERID_ID(x)            (((uint8_t)(((uint8_t)(x))<<USB0_PERID_ID_SHIFT))&USB0_PERID_ID_MASK)
//   Peripheral Identification

#define  USB0_IDCOMP_NID_MASK        0x3Fu
#define  USB0_IDCOMP_NID_SHIFT       0
#define  USB0_IDCOMP_NID(x)          (((uint8_t)(((uint8_t)(x))<<USB0_IDCOMP_NID_SHIFT))&USB0_IDCOMP_NID_MASK)

#define  USB0_REV_REV_MASK           0xFFu
#define  USB0_REV_REV_SHIFT          0
#define  USB0_REV_REV(x)             (((uint8_t)(((uint8_t)(x))<<USB0_REV_REV_SHIFT))&USB0_REV_REV_MASK)
//   Revision

#define  USB0_ADDINFO_IEHOST_MASK    0x1u
#define  USB0_ADDINFO_IEHOST_SHIFT   0

#define  USB0_ADDINFO_IRQNUM_MASK    0xF8u
#define  USB0_ADDINFO_IRQNUM_SHIFT   3
#define  USB0_ADDINFO_IRQNUM(x)      (((uint8_t)(((uint8_t)(x))<<USB0_ADDINFO_IRQNUM_SHIFT))&USB0_ADDINFO_IRQNUM_MASK)
//   Assigned Interrupt Request Number

#define  USB0_OTGISTAT_AVBUSCHG_MASK 0x1u
#define  USB0_OTGISTAT_AVBUSCHG_SHIFT 0

#define  USB0_OTGISTAT_B_SESS_CHG_MASK 0x4u
#define  USB0_OTGISTAT_B_SESS_CHG_SHIFT 2

#define  USB0_OTGISTAT_SESSVLDCHG_MASK 0x8u
#define  USB0_OTGISTAT_SESSVLDCHG_SHIFT 3

#define  USB0_OTGISTAT_LINE_STATE_CHG_MASK 0x20u
#define  USB0_OTGISTAT_LINE_STATE_CHG_SHIFT 5

#define  USB0_OTGISTAT_ONEMSEC_MASK  0x40u
#define  USB0_OTGISTAT_ONEMSEC_SHIFT 6

#define  USB0_OTGISTAT_IDCHG_MASK    0x80u
#define  USB0_OTGISTAT_IDCHG_SHIFT   7

#define  USB0_OTGICR_AVBUSEN_MASK    0x1u
#define  USB0_OTGICR_AVBUSEN_SHIFT   0
//   A VBUS Valid Interrupt Enable
//     0b0 ==> Disables the AVBUSCHG interrupt.
//     0b1 ==> Enables the AVBUSCHG interrupt.

#define  USB0_OTGICR_BSESSEN_MASK    0x4u
#define  USB0_OTGICR_BSESSEN_SHIFT   2
//   B Session END Interrupt Enable
//     0b0 ==> Disables the B_SESS_CHG interrupt.
//     0b1 ==> Enables the B_SESS_CHG interrupt.

#define  USB0_OTGICR_SESSVLDEN_MASK  0x8u
#define  USB0_OTGICR_SESSVLDEN_SHIFT 3
//   Session Valid Interrupt Enable
//     0b0 ==> Disables the SESSVLDCHG interrupt.
//     0b1 ==> Enables the SESSVLDCHG interrupt.

#define  USB0_OTGICR_LINESTATEEN_MASK 0x20u
#define  USB0_OTGICR_LINESTATEEN_SHIFT 5
//   Line State Change Interrupt Enable
//     0b0 ==> Disables the LINE_STAT_CHG interrupt.
//     0b1 ==> Enables the LINE_STAT_CHG interrupt.

#define  USB0_OTGICR_ONEMSECEN_MASK  0x40u
#define  USB0_OTGICR_ONEMSECEN_SHIFT 6
//   One Millisecond Interrupt Enable
//     0b0 ==> Diables the 1ms timer interrupt.
//     0b1 ==> Enables the 1ms timer interrupt.

#define  USB0_OTGICR_IDEN_MASK       0x80u
#define  USB0_OTGICR_IDEN_SHIFT      7
//   ID Interrupt Enable
//     0b0 ==> The ID interrupt is disabled
//     0b1 ==> The ID interrupt is enabled

#define  USB0_OTGSTAT_AVBUSVLD_MASK  0x1u
#define  USB0_OTGSTAT_AVBUSVLD_SHIFT 0
//   A VBUS Valid
//     0b0 ==> The VBUS voltage is below the A VBUS Valid threshold.
//     0b1 ==> The VBUS voltage is above the A VBUS Valid threshold.

#define  USB0_OTGSTAT_BSESSEND_MASK  0x4u
#define  USB0_OTGSTAT_BSESSEND_SHIFT 2
//   B Session End
//     0b0 ==> The VBUS voltage is above the B session end threshold.
//     0b1 ==> The VBUS voltage is below the B session end threshold.

#define  USB0_OTGSTAT_SESS_VLD_MASK  0x8u
#define  USB0_OTGSTAT_SESS_VLD_SHIFT 3
//   Session Valid
//     0b0 ==> The VBUS voltage is below the B session valid threshold
//     0b1 ==> The VBUS voltage is above the B session valid threshold.

#define  USB0_OTGSTAT_LINESTATESTABLE_MASK 0x20u
#define  USB0_OTGSTAT_LINESTATESTABLE_SHIFT 5
//     0b0 ==> The LINE_STAT_CHG bit is not yet stable.
//     0b1 ==> The LINE_STAT_CHG bit has been debounced and is stable.

#define  USB0_OTGSTAT_ONEMSECEN_MASK 0x40u
#define  USB0_OTGSTAT_ONEMSECEN_SHIFT 6

#define  USB0_OTGSTAT_ID_MASK        0x80u
#define  USB0_OTGSTAT_ID_SHIFT       7
//     0b0 ==> Indicates a Type A cable is plugged into the USB connector.
//     0b1 ==> Indicates no cable is attached or a Type B cable is plugged into the USB connector.

#define  USB0_OTGCTL_OTGEN_MASK      0x4u
#define  USB0_OTGCTL_OTGEN_SHIFT     2
//   On-The-Go pullup/pulldown resistor enable
//     0b0 ==> If USB_EN is 1 and HOST_MODE is 0 in the Control Register (CTL), then the D+ Data Line pull-up resistors are enabled. If HOST_MODE is 1 the D+ and D- Data Line pull-down resistors are engaged.
//     0b1 ==> The pull-up and pull-down controls in this register are used.

#define  USB0_OTGCTL_DMLOW_MASK      0x10u
#define  USB0_OTGCTL_DMLOW_SHIFT     4
//   D- Data Line pull-down resistor enable
//     0b0 ==> D- pulldown resistor is not enabled.
//     0b1 ==> D- pulldown resistor is enabled.

#define  USB0_OTGCTL_DPLOW_MASK      0x20u
#define  USB0_OTGCTL_DPLOW_SHIFT     5
//   D+ Data Line pull-down resistor enable
//     0b0 ==> D+ pulldown resistor is not enabled.
//     0b1 ==> D+ pulldown resistor is enabled.

#define  USB0_OTGCTL_DPHIGH_MASK     0x80u
#define  USB0_OTGCTL_DPHIGH_SHIFT    7
//   D+ Data Line pullup resistor enable
//     0b0 ==> D+ pullup resistor is not enabled
//     0b1 ==> D+ pullup resistor is enabled

#define  USB0_ISTAT_USBRST_MASK      0x1u
#define  USB0_ISTAT_USBRST_SHIFT     0

#define  USB0_ISTAT_ERROR_MASK       0x2u
#define  USB0_ISTAT_ERROR_SHIFT      1

#define  USB0_ISTAT_SOFTOK_MASK      0x4u
#define  USB0_ISTAT_SOFTOK_SHIFT     2

#define  USB0_ISTAT_TOKDNE_MASK      0x8u
#define  USB0_ISTAT_TOKDNE_SHIFT     3

#define  USB0_ISTAT_SLEEP_MASK       0x10u
#define  USB0_ISTAT_SLEEP_SHIFT      4

#define  USB0_ISTAT_RESUME_MASK      0x20u
#define  USB0_ISTAT_RESUME_SHIFT     5

#define  USB0_ISTAT_ATTACH_MASK      0x40u
#define  USB0_ISTAT_ATTACH_SHIFT     6
//   Attach Interrupt

#define  USB0_ISTAT_STALL_MASK       0x80u
#define  USB0_ISTAT_STALL_SHIFT      7
//   Stall Interrupt

#define  USB0_INTEN_USBRSTEN_MASK    0x1u
#define  USB0_INTEN_USBRSTEN_SHIFT   0
//   USBRST Interrupt Enable
//     0b0 ==> Disables the USBRST interrupt.
//     0b1 ==> Enables the USBRST interrupt.

#define  USB0_INTEN_ERROREN_MASK     0x2u
#define  USB0_INTEN_ERROREN_SHIFT    1
//   ERROR Interrupt Enable
//     0b0 ==> Disables the ERROR interrupt.
//     0b1 ==> Enables the ERROR interrupt.

#define  USB0_INTEN_SOFTOKEN_MASK    0x4u
#define  USB0_INTEN_SOFTOKEN_SHIFT   2
//   SOFTOK Interrupt Enable
//     0b0 ==> Disbles the SOFTOK interrupt.
//     0b1 ==> Enables the SOFTOK interrupt.

#define  USB0_INTEN_TOKDNEEN_MASK    0x8u
#define  USB0_INTEN_TOKDNEEN_SHIFT   3
//   TOKDNE Interrupt Enable
//     0b0 ==> Disables the TOKDNE interrupt.
//     0b1 ==> Enables the TOKDNE interrupt.

#define  USB0_INTEN_SLEEPEN_MASK     0x10u
#define  USB0_INTEN_SLEEPEN_SHIFT    4
//   SLEEP Interrupt Enable
//     0b0 ==> Disables the SLEEP interrupt.
//     0b1 ==> Enables the SLEEP interrupt.

#define  USB0_INTEN_RESUMEEN_MASK    0x20u
#define  USB0_INTEN_RESUMEEN_SHIFT   5
//   RESUME Interrupt Enable
//     0b0 ==> Disables the RESUME interrupt.
//     0b1 ==> Enables the RESUME interrupt.

#define  USB0_INTEN_ATTACHEN_MASK    0x40u
#define  USB0_INTEN_ATTACHEN_SHIFT   6
//   ATTACH Interrupt Enable
//     0b0 ==> Disables the ATTACH interrupt.
//     0b1 ==> Enables the ATTACH interrupt.

#define  USB0_INTEN_STALLEN_MASK     0x80u
#define  USB0_INTEN_STALLEN_SHIFT    7
//   STALL Interrupt Enable
//     0b0 ==> Diasbles the STALL interrupt.
//     0b1 ==> Enables the STALL interrupt.

#define  USB0_ERRSTAT_PIDERR_MASK    0x1u
#define  USB0_ERRSTAT_PIDERR_SHIFT   0

#define  USB0_ERRSTAT_CRC5EOF_MASK   0x2u
#define  USB0_ERRSTAT_CRC5EOF_SHIFT  1

#define  USB0_ERRSTAT_CRC16_MASK     0x4u
#define  USB0_ERRSTAT_CRC16_SHIFT    2

#define  USB0_ERRSTAT_DFN8_MASK      0x8u
#define  USB0_ERRSTAT_DFN8_SHIFT     3

#define  USB0_ERRSTAT_BTOERR_MASK    0x10u
#define  USB0_ERRSTAT_BTOERR_SHIFT   4

#define  USB0_ERRSTAT_DMAERR_MASK    0x20u
#define  USB0_ERRSTAT_DMAERR_SHIFT   5

#define  USB0_ERRSTAT_BTSERR_MASK    0x80u
#define  USB0_ERRSTAT_BTSERR_SHIFT   7

#define  USB0_ERREN_PIDERREN_MASK    0x1u
#define  USB0_ERREN_PIDERREN_SHIFT   0
//   PIDERR Interrupt Enable
//     0b0 ==> Disables the PIDERR interrupt.
//     0b1 ==> Enters the PIDERR interrupt.

#define  USB0_ERREN_CRC5EOFEN_MASK   0x2u
#define  USB0_ERREN_CRC5EOFEN_SHIFT  1
//   CRC5/EOF Interrupt Enable
//     0b0 ==> Disables the CRC5/EOF interrupt.
//     0b1 ==> Enables the CRC5/EOF interrupt.

#define  USB0_ERREN_CRC16EN_MASK     0x4u
#define  USB0_ERREN_CRC16EN_SHIFT    2
//   CRC16 Interrupt Enable
//     0b0 ==> Disables the CRC16 interrupt.
//     0b1 ==> Enables the CRC16 interrupt.

#define  USB0_ERREN_DFN8EN_MASK      0x8u
#define  USB0_ERREN_DFN8EN_SHIFT     3
//   DFN8 Interrupt Enable
//     0b0 ==> Disables the DFN8 interrupt.
//     0b1 ==> Enables the DFN8 interrupt.

#define  USB0_ERREN_BTOERREN_MASK    0x10u
#define  USB0_ERREN_BTOERREN_SHIFT   4
//   BTOERR Interrupt Enable
//     0b0 ==> Disables the BTOERR interrupt.
//     0b1 ==> Enables the BTOERR interrupt.

#define  USB0_ERREN_DMAERREN_MASK    0x20u
#define  USB0_ERREN_DMAERREN_SHIFT   5
//   DMAERR Interrupt Enable
//     0b0 ==> Disables the DMAERR interrupt.
//     0b1 ==> Enables the DMAERR interrupt.

#define  USB0_ERREN_BTSERREN_MASK    0x80u
#define  USB0_ERREN_BTSERREN_SHIFT   7
//   BTSERR Interrupt Enable
//     0b0 ==> Disables the BTSERR interrupt.
//     0b1 ==> Enables the BTSERR interrupt.

#define  USB0_STAT_ODD_MASK          0x4u
#define  USB0_STAT_ODD_SHIFT         2

#define  USB0_STAT_TX_MASK           0x8u
#define  USB0_STAT_TX_SHIFT          3
//   Transmit Indicator
//     0b0 ==> The most recent transaction was a receive operation.
//     0b1 ==> The most recent transaction was a transmit operation.

#define  USB0_STAT_ENDP_MASK         0xF0u
#define  USB0_STAT_ENDP_SHIFT        4
#define  USB0_STAT_ENDP(x)           (((uint8_t)(((uint8_t)(x))<<USB0_STAT_ENDP_SHIFT))&USB0_STAT_ENDP_MASK)

#define  USB0_CTL_USBENSOFEN_MASK    0x1u
#define  USB0_CTL_USBENSOFEN_SHIFT   0
//   USB Enable
//     0b0 ==> Disables the USB Module.
//     0b1 ==> Enables the USB Module.

#define  USB0_CTL_ODDRST_MASK        0x2u
#define  USB0_CTL_ODDRST_SHIFT       1

#define  USB0_CTL_RESUME_MASK        0x4u
#define  USB0_CTL_RESUME_SHIFT       2

#define  USB0_CTL_HOSTMODEEN_MASK    0x8u
#define  USB0_CTL_HOSTMODEEN_SHIFT   3

#define  USB0_CTL_RESET_MASK         0x10u
#define  USB0_CTL_RESET_SHIFT        4

#define  USB0_CTL_TXSUSPENDTOKENBUSY_MASK 0x20u
#define  USB0_CTL_TXSUSPENDTOKENBUSY_SHIFT 5

#define  USB0_CTL_SE0_MASK           0x40u
#define  USB0_CTL_SE0_SHIFT          6
//   Live USB Single Ended Zero signal

#define  USB0_CTL_JSTATE_MASK        0x80u
#define  USB0_CTL_JSTATE_SHIFT       7
//   Live USB differential receiver JSTATE signal

#define  USB0_ADDR_ADDR_MASK         0x7Fu
#define  USB0_ADDR_ADDR_SHIFT        0
#define  USB0_ADDR_ADDR(x)           (((uint8_t)(((uint8_t)(x))<<USB0_ADDR_ADDR_SHIFT))&USB0_ADDR_ADDR_MASK)
//   USB Address

#define  USB0_ADDR_LSEN_MASK         0x80u
#define  USB0_ADDR_LSEN_SHIFT        7
//   Low Speed Enable bit

#define  USB0_BDTPAGE1_BDTBA_MASK    0xFEu
#define  USB0_BDTPAGE1_BDTBA_SHIFT   1
#define  USB0_BDTPAGE1_BDTBA(x)      (((uint8_t)(((uint8_t)(x))<<USB0_BDTPAGE1_BDTBA_SHIFT))&USB0_BDTPAGE1_BDTBA_MASK)

#define  USB0_FRMNUML_FRM_MASK       0xFFu
#define  USB0_FRMNUML_FRM_SHIFT      0
#define  USB0_FRMNUML_FRM(x)         (((uint8_t)(((uint8_t)(x))<<USB0_FRMNUML_FRM_SHIFT))&USB0_FRMNUML_FRM_MASK)

#define  USB0_FRMNUMH_FRM_MASK       0x7u
#define  USB0_FRMNUMH_FRM_SHIFT      0
#define  USB0_FRMNUMH_FRM(x)         (((uint8_t)(((uint8_t)(x))<<USB0_FRMNUMH_FRM_SHIFT))&USB0_FRMNUMH_FRM_MASK)

#define  USB0_TOKEN_TOKENENDPT_MASK  0xFu
#define  USB0_TOKEN_TOKENENDPT_SHIFT 0
#define  USB0_TOKEN_TOKENENDPT(x)    (((uint8_t)(((uint8_t)(x))<<USB0_TOKEN_TOKENENDPT_SHIFT))&USB0_TOKEN_TOKENENDPT_MASK)

#define  USB0_TOKEN_TOKENPID_MASK    0xF0u
#define  USB0_TOKEN_TOKENPID_SHIFT   4
#define  USB0_TOKEN_TOKENPID(x)      (((uint8_t)(((uint8_t)(x))<<USB0_TOKEN_TOKENPID_SHIFT))&USB0_TOKEN_TOKENPID_MASK)
//     0b0001 ==> OUT Token. USB Module performs an OUT (TX) transaction.
//     0b1001 ==> IN Token. USB Module performs an In (RX) transaction.
//     0b1101 ==> SETUP Token. USB Module performs a SETUP (TX) transaction

#define  USB0_SOFTHLD_CNT_MASK       0xFFu
#define  USB0_SOFTHLD_CNT_SHIFT      0
#define  USB0_SOFTHLD_CNT(x)         (((uint8_t)(((uint8_t)(x))<<USB0_SOFTHLD_CNT_SHIFT))&USB0_SOFTHLD_CNT_MASK)

#define  USB0_BDTPAGE2_BDTBA_MASK    0xFFu
#define  USB0_BDTPAGE2_BDTBA_SHIFT   0
#define  USB0_BDTPAGE2_BDTBA(x)      (((uint8_t)(((uint8_t)(x))<<USB0_BDTPAGE2_BDTBA_SHIFT))&USB0_BDTPAGE2_BDTBA_MASK)

#define  USB0_BDTPAGE3_BDTBA_MASK    0xFFu
#define  USB0_BDTPAGE3_BDTBA_SHIFT   0
#define  USB0_BDTPAGE3_BDTBA(x)      (((uint8_t)(((uint8_t)(x))<<USB0_BDTPAGE3_BDTBA_SHIFT))&USB0_BDTPAGE3_BDTBA_MASK)

#define  USB0_ENDPT0_EPHSHK_MASK     0x1u
#define  USB0_ENDPT0_EPHSHK_SHIFT    0

#define  USB0_ENDPT0_EPSTALL_MASK    0x2u
#define  USB0_ENDPT0_EPSTALL_SHIFT   1

#define  USB0_ENDPT0_EPTXEN_MASK     0x4u
#define  USB0_ENDPT0_EPTXEN_SHIFT    2

#define  USB0_ENDPT0_EPRXEN_MASK     0x8u
#define  USB0_ENDPT0_EPRXEN_SHIFT    3

#define  USB0_ENDPT0_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT0_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT0_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT0_RETRYDIS_SHIFT  6

#define  USB0_ENDPT0_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT0_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT1_EPHSHK_MASK     0x1u
#define  USB0_ENDPT1_EPHSHK_SHIFT    0

#define  USB0_ENDPT1_EPSTALL_MASK    0x2u
#define  USB0_ENDPT1_EPSTALL_SHIFT   1

#define  USB0_ENDPT1_EPTXEN_MASK     0x4u
#define  USB0_ENDPT1_EPTXEN_SHIFT    2

#define  USB0_ENDPT1_EPRXEN_MASK     0x8u
#define  USB0_ENDPT1_EPRXEN_SHIFT    3

#define  USB0_ENDPT1_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT1_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT1_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT1_RETRYDIS_SHIFT  6

#define  USB0_ENDPT1_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT1_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT2_EPHSHK_MASK     0x1u
#define  USB0_ENDPT2_EPHSHK_SHIFT    0

#define  USB0_ENDPT2_EPSTALL_MASK    0x2u
#define  USB0_ENDPT2_EPSTALL_SHIFT   1

#define  USB0_ENDPT2_EPTXEN_MASK     0x4u
#define  USB0_ENDPT2_EPTXEN_SHIFT    2

#define  USB0_ENDPT2_EPRXEN_MASK     0x8u
#define  USB0_ENDPT2_EPRXEN_SHIFT    3

#define  USB0_ENDPT2_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT2_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT2_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT2_RETRYDIS_SHIFT  6

#define  USB0_ENDPT2_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT2_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT3_EPHSHK_MASK     0x1u
#define  USB0_ENDPT3_EPHSHK_SHIFT    0

#define  USB0_ENDPT3_EPSTALL_MASK    0x2u
#define  USB0_ENDPT3_EPSTALL_SHIFT   1

#define  USB0_ENDPT3_EPTXEN_MASK     0x4u
#define  USB0_ENDPT3_EPTXEN_SHIFT    2

#define  USB0_ENDPT3_EPRXEN_MASK     0x8u
#define  USB0_ENDPT3_EPRXEN_SHIFT    3

#define  USB0_ENDPT3_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT3_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT3_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT3_RETRYDIS_SHIFT  6

#define  USB0_ENDPT3_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT3_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT4_EPHSHK_MASK     0x1u
#define  USB0_ENDPT4_EPHSHK_SHIFT    0

#define  USB0_ENDPT4_EPSTALL_MASK    0x2u
#define  USB0_ENDPT4_EPSTALL_SHIFT   1

#define  USB0_ENDPT4_EPTXEN_MASK     0x4u
#define  USB0_ENDPT4_EPTXEN_SHIFT    2

#define  USB0_ENDPT4_EPRXEN_MASK     0x8u
#define  USB0_ENDPT4_EPRXEN_SHIFT    3

#define  USB0_ENDPT4_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT4_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT4_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT4_RETRYDIS_SHIFT  6

#define  USB0_ENDPT4_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT4_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT5_EPHSHK_MASK     0x1u
#define  USB0_ENDPT5_EPHSHK_SHIFT    0

#define  USB0_ENDPT5_EPSTALL_MASK    0x2u
#define  USB0_ENDPT5_EPSTALL_SHIFT   1

#define  USB0_ENDPT5_EPTXEN_MASK     0x4u
#define  USB0_ENDPT5_EPTXEN_SHIFT    2

#define  USB0_ENDPT5_EPRXEN_MASK     0x8u
#define  USB0_ENDPT5_EPRXEN_SHIFT    3

#define  USB0_ENDPT5_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT5_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT5_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT5_RETRYDIS_SHIFT  6

#define  USB0_ENDPT5_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT5_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT6_EPHSHK_MASK     0x1u
#define  USB0_ENDPT6_EPHSHK_SHIFT    0

#define  USB0_ENDPT6_EPSTALL_MASK    0x2u
#define  USB0_ENDPT6_EPSTALL_SHIFT   1

#define  USB0_ENDPT6_EPTXEN_MASK     0x4u
#define  USB0_ENDPT6_EPTXEN_SHIFT    2

#define  USB0_ENDPT6_EPRXEN_MASK     0x8u
#define  USB0_ENDPT6_EPRXEN_SHIFT    3

#define  USB0_ENDPT6_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT6_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT6_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT6_RETRYDIS_SHIFT  6

#define  USB0_ENDPT6_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT6_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT7_EPHSHK_MASK     0x1u
#define  USB0_ENDPT7_EPHSHK_SHIFT    0

#define  USB0_ENDPT7_EPSTALL_MASK    0x2u
#define  USB0_ENDPT7_EPSTALL_SHIFT   1

#define  USB0_ENDPT7_EPTXEN_MASK     0x4u
#define  USB0_ENDPT7_EPTXEN_SHIFT    2

#define  USB0_ENDPT7_EPRXEN_MASK     0x8u
#define  USB0_ENDPT7_EPRXEN_SHIFT    3

#define  USB0_ENDPT7_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT7_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT7_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT7_RETRYDIS_SHIFT  6

#define  USB0_ENDPT7_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT7_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT8_EPHSHK_MASK     0x1u
#define  USB0_ENDPT8_EPHSHK_SHIFT    0

#define  USB0_ENDPT8_EPSTALL_MASK    0x2u
#define  USB0_ENDPT8_EPSTALL_SHIFT   1

#define  USB0_ENDPT8_EPTXEN_MASK     0x4u
#define  USB0_ENDPT8_EPTXEN_SHIFT    2

#define  USB0_ENDPT8_EPRXEN_MASK     0x8u
#define  USB0_ENDPT8_EPRXEN_SHIFT    3

#define  USB0_ENDPT8_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT8_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT8_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT8_RETRYDIS_SHIFT  6

#define  USB0_ENDPT8_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT8_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT9_EPHSHK_MASK     0x1u
#define  USB0_ENDPT9_EPHSHK_SHIFT    0

#define  USB0_ENDPT9_EPSTALL_MASK    0x2u
#define  USB0_ENDPT9_EPSTALL_SHIFT   1

#define  USB0_ENDPT9_EPTXEN_MASK     0x4u
#define  USB0_ENDPT9_EPTXEN_SHIFT    2

#define  USB0_ENDPT9_EPRXEN_MASK     0x8u
#define  USB0_ENDPT9_EPRXEN_SHIFT    3

#define  USB0_ENDPT9_EPCTLDIS_MASK   0x10u
#define  USB0_ENDPT9_EPCTLDIS_SHIFT  4

#define  USB0_ENDPT9_RETRYDIS_MASK   0x40u
#define  USB0_ENDPT9_RETRYDIS_SHIFT  6

#define  USB0_ENDPT9_HOSTWOHUB_MASK  0x80u
#define  USB0_ENDPT9_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT10_EPHSHK_MASK    0x1u
#define  USB0_ENDPT10_EPHSHK_SHIFT   0

#define  USB0_ENDPT10_EPSTALL_MASK   0x2u
#define  USB0_ENDPT10_EPSTALL_SHIFT  1

#define  USB0_ENDPT10_EPTXEN_MASK    0x4u
#define  USB0_ENDPT10_EPTXEN_SHIFT   2

#define  USB0_ENDPT10_EPRXEN_MASK    0x8u
#define  USB0_ENDPT10_EPRXEN_SHIFT   3

#define  USB0_ENDPT10_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT10_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT10_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT10_RETRYDIS_SHIFT 6

#define  USB0_ENDPT10_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT10_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT11_EPHSHK_MASK    0x1u
#define  USB0_ENDPT11_EPHSHK_SHIFT   0

#define  USB0_ENDPT11_EPSTALL_MASK   0x2u
#define  USB0_ENDPT11_EPSTALL_SHIFT  1

#define  USB0_ENDPT11_EPTXEN_MASK    0x4u
#define  USB0_ENDPT11_EPTXEN_SHIFT   2

#define  USB0_ENDPT11_EPRXEN_MASK    0x8u
#define  USB0_ENDPT11_EPRXEN_SHIFT   3

#define  USB0_ENDPT11_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT11_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT11_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT11_RETRYDIS_SHIFT 6

#define  USB0_ENDPT11_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT11_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT12_EPHSHK_MASK    0x1u
#define  USB0_ENDPT12_EPHSHK_SHIFT   0

#define  USB0_ENDPT12_EPSTALL_MASK   0x2u
#define  USB0_ENDPT12_EPSTALL_SHIFT  1

#define  USB0_ENDPT12_EPTXEN_MASK    0x4u
#define  USB0_ENDPT12_EPTXEN_SHIFT   2

#define  USB0_ENDPT12_EPRXEN_MASK    0x8u
#define  USB0_ENDPT12_EPRXEN_SHIFT   3

#define  USB0_ENDPT12_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT12_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT12_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT12_RETRYDIS_SHIFT 6

#define  USB0_ENDPT12_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT12_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT13_EPHSHK_MASK    0x1u
#define  USB0_ENDPT13_EPHSHK_SHIFT   0

#define  USB0_ENDPT13_EPSTALL_MASK   0x2u
#define  USB0_ENDPT13_EPSTALL_SHIFT  1

#define  USB0_ENDPT13_EPTXEN_MASK    0x4u
#define  USB0_ENDPT13_EPTXEN_SHIFT   2

#define  USB0_ENDPT13_EPRXEN_MASK    0x8u
#define  USB0_ENDPT13_EPRXEN_SHIFT   3

#define  USB0_ENDPT13_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT13_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT13_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT13_RETRYDIS_SHIFT 6

#define  USB0_ENDPT13_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT13_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT14_EPHSHK_MASK    0x1u
#define  USB0_ENDPT14_EPHSHK_SHIFT   0

#define  USB0_ENDPT14_EPSTALL_MASK   0x2u
#define  USB0_ENDPT14_EPSTALL_SHIFT  1

#define  USB0_ENDPT14_EPTXEN_MASK    0x4u
#define  USB0_ENDPT14_EPTXEN_SHIFT   2

#define  USB0_ENDPT14_EPRXEN_MASK    0x8u
#define  USB0_ENDPT14_EPRXEN_SHIFT   3

#define  USB0_ENDPT14_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT14_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT14_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT14_RETRYDIS_SHIFT 6

#define  USB0_ENDPT14_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT14_HOSTWOHUB_SHIFT 7

#define  USB0_ENDPT15_EPHSHK_MASK    0x1u
#define  USB0_ENDPT15_EPHSHK_SHIFT   0

#define  USB0_ENDPT15_EPSTALL_MASK   0x2u
#define  USB0_ENDPT15_EPSTALL_SHIFT  1

#define  USB0_ENDPT15_EPTXEN_MASK    0x4u
#define  USB0_ENDPT15_EPTXEN_SHIFT   2

#define  USB0_ENDPT15_EPRXEN_MASK    0x8u
#define  USB0_ENDPT15_EPRXEN_SHIFT   3

#define  USB0_ENDPT15_EPCTLDIS_MASK  0x10u
#define  USB0_ENDPT15_EPCTLDIS_SHIFT 4

#define  USB0_ENDPT15_RETRYDIS_MASK  0x40u
#define  USB0_ENDPT15_RETRYDIS_SHIFT 6

#define  USB0_ENDPT15_HOSTWOHUB_MASK 0x80u
#define  USB0_ENDPT15_HOSTWOHUB_SHIFT 7

#define  USB0_USBCTRL_PDE_MASK       0x40u
#define  USB0_USBCTRL_PDE_SHIFT      6
//     0b0 ==> Weak pulldowns are disabled on D+ and D-.
//     0b1 ==> Weak pulldowns are enabled on D+ and D-.

#define  USB0_USBCTRL_SUSP_MASK      0x80u
#define  USB0_USBCTRL_SUSP_SHIFT     7
//     0b0 ==> USB transceiver is not in suspend state.
//     0b1 ==> USB transceiver is in suspend state.

#define  USB0_OBSERVE_DMPD_MASK      0x10u
#define  USB0_OBSERVE_DMPD_SHIFT     4
//     0b0 ==> D- pulldown disabled.
//     0b1 ==> D- pulldown enabled.

#define  USB0_OBSERVE_DPPD_MASK      0x40u
#define  USB0_OBSERVE_DPPD_SHIFT     6
//     0b0 ==> D+ pulldown disabled.
//     0b1 ==> D+ pulldown enabled.

#define  USB0_OBSERVE_DPPU_MASK      0x80u
#define  USB0_OBSERVE_DPPU_SHIFT     7
//     0b0 ==> D+ pullup disabled.
//     0b1 ==> D+ pullup enabled.

#define  USB0_CONTROL_DPPULLUPNONOTG_MASK 0x10u
#define  USB0_CONTROL_DPPULLUPNONOTG_SHIFT 4
//     0b0 ==> DP Pullup in non-OTG device mode is not enabled.
//     0b1 ==> DP Pullup in non-OTG device mode is enabled.

#define  USB0_USBTRC0_USB_RESUME_INT_MASK 0x1u
#define  USB0_USBTRC0_USB_RESUME_INT_SHIFT 0
//   USB Asynchronous Interrupt
//     0b0 ==> No interrupt was generated.
//     0b1 ==> Interrupt was generated because of the USB asynchronous interrupt.

#define  USB0_USBTRC0_SYNC_DET_MASK  0x2u
#define  USB0_USBTRC0_SYNC_DET_SHIFT 1
//   Synchronous USB Interrupt Detect
//     0b0 ==> Synchronous interrupt has not been detected.
//     0b1 ==> Synchronous interrupt has been detected.

#define  USB0_USBTRC0_USBRESMEN_MASK 0x20u
#define  USB0_USBTRC0_USBRESMEN_SHIFT 5
//   Asynchronous Resume Interrupt Enable
//     0b0 ==> USB asynchronous wakeup from suspend mode disabled.
//     0b1 ==> USB asynchronous wakeup from suspend mode enabled. The asynchronous resume interrupt differs from the synchronous resume interrupt in that it asynchronously detects K-state using the unfiltered state of the D+ and D- pins. This interupt should only be enabled when the Transceiver is suspended.

#define  USB0_USBTRC0_USBRESET_MASK  0x80u
#define  USB0_USBTRC0_USBRESET_SHIFT 7
//   USB Reset
//     0b0 ==> Normal USB module operation.
//     0b1 ==> Returns the USB module to its reset state.


//////////////////////////////////////////////////////////////////////////////////////
// Backward compatibility.

// No backward compatibility issues.

///////////////////////////////////////////////////////////////////////////////
// Manually Added by Chris Brown for initial Validation project creation
//////////////////////////////////////////////////////////////////////////////
/* ----------------------------------------------------------------------------
   -- SCB
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup SCB_Peripheral SCB
 * @{
 */

/** SCB - Peripheral register structure */
typedef struct SCB_MemMap {
  uint8_t RESERVED_0[8];
  uint32_t ACTLR;                                  /**< Auxiliary Control Register,, offset: 0x8 */
  uint8_t RESERVED_1[3316];
  uint32_t CPUID;                                  /**< CPUID Base Register, offset: 0xD00 */
  uint32_t ICSR;                                   /**< Interrupt Control and State Register, offset: 0xD04 */
  uint32_t VTOR;                                   /**< Vector Table Offset Register, offset: 0xD08 */
  uint32_t AIRCR;                                  /**< Application Interrupt and Reset Control Register, offset: 0xD0C */
  uint32_t SCR;                                    /**< System Control Register, offset: 0xD10 */
  uint32_t CCR;                                    /**< Configuration and Control Register, offset: 0xD14 */
  uint32_t RESERVED_2[32];						   /* WAS SHPR1
//  uint32_t SHPR1;                                  < System Handler Priority Register 1, offset: 0xD18 */
  uint32_t SHPR2;                                  /**< System Handler Priority Register 2, offset: 0xD1C */
  uint32_t SHPR3;                                  /**< System Handler Priority Register 3, offset: 0xD20 */
  uint32_t SHCSR;                                  /**< System Handler Control and State Register, offset: 0xD24 */
  uint32_t CFSR;                                   /**< Configurable Fault Status Registers, offset: 0xD28 */
  uint32_t HFSR;                                   /**< HardFault Status register, offset: 0xD2C */
  uint32_t DFSR;                                   /**< Debug Fault Status Register, offset: 0xD30 */
  uint32_t MMFAR;                                  /**< MemManage Address Register, offset: 0xD34 */
  uint32_t BFAR;                                   /**< BusFault Address Register, offset: 0xD38 */
  uint32_t AFSR;                                   /**< Auxiliary Fault Status Register, offset: 0xD3C */
} volatile *SCB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SCB - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup SCB_Register_Accessor_Macros SCB - Register accessor macros
 * @{
 */


/* SCB - Register accessors */
#define SCB_ACTLR_REG(base)                      ((base)->ACTLR)
#define SCB_CPUID_REG(base)                      ((base)->CPUID)
#define SCB_ICSR_REG(base)                       ((base)->ICSR)
#define SCB_VTOR_REG(base)                       ((base)->VTOR)
#define SCB_AIRCR_REG(base)                      ((base)->AIRCR)
#define SCB_SCR_REG(base)                        ((base)->SCR)
#define SCB_CCR_REG(base)                        ((base)->CCR)
#define SCB_SHPR1_REG(base)                      ((base)->SHPR1)
#define SCB_SHPR2_REG(base)                      ((base)->SHPR2)
#define SCB_SHPR3_REG(base)                      ((base)->SHPR3)
#define SCB_SHCSR_REG(base)                      ((base)->SHCSR)
#define SCB_CFSR_REG(base)                       ((base)->CFSR)
#define SCB_HFSR_REG(base)                       ((base)->HFSR)
#define SCB_DFSR_REG(base)                       ((base)->DFSR)
#define SCB_MMFAR_REG(base)                      ((base)->MMFAR)
#define SCB_BFAR_REG(base)                       ((base)->BFAR)
#define SCB_AFSR_REG(base)                       ((base)->AFSR)

/**
 * @}
 */ /* end of group SCB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SCB Register Masks
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup SCB_Register_Masks SCB Register Masks
 * @{
 */

/* ACTLR Bit Fields */
#define SCB_ACTLR_DISMCYCINT_MASK                0x1u
#define SCB_ACTLR_DISMCYCINT_SHIFT               0
#define SCB_ACTLR_DISDEFWBUF_MASK                0x2u
#define SCB_ACTLR_DISDEFWBUF_SHIFT               1
#define SCB_ACTLR_DISFOLD_MASK                   0x4u
#define SCB_ACTLR_DISFOLD_SHIFT                  2
/* CPUID Bit Fields */
#define SCB_CPUID_REVISION_MASK                  0xFu
#define SCB_CPUID_REVISION_SHIFT                 0
#define SCB_CPUID_REVISION(x)                    (((uint32_t)(((uint32_t)(x))<<SCB_CPUID_REVISION_SHIFT))&SCB_CPUID_REVISION_MASK)
#define SCB_CPUID_PARTNO_MASK                    0xFFF0u
#define SCB_CPUID_PARTNO_SHIFT                   4
#define SCB_CPUID_PARTNO(x)                      (((uint32_t)(((uint32_t)(x))<<SCB_CPUID_PARTNO_SHIFT))&SCB_CPUID_PARTNO_MASK)
#define SCB_CPUID_VARIANT_MASK                   0xF00000u
#define SCB_CPUID_VARIANT_SHIFT                  20
#define SCB_CPUID_VARIANT(x)                     (((uint32_t)(((uint32_t)(x))<<SCB_CPUID_VARIANT_SHIFT))&SCB_CPUID_VARIANT_MASK)
#define SCB_CPUID_IMPLEMENTER_MASK               0xFF000000u
#define SCB_CPUID_IMPLEMENTER_SHIFT              24
#define SCB_CPUID_IMPLEMENTER(x)                 (((uint32_t)(((uint32_t)(x))<<SCB_CPUID_IMPLEMENTER_SHIFT))&SCB_CPUID_IMPLEMENTER_MASK)
/* ICSR Bit Fields */
#define SCB_ICSR_VECTACTIVE_MASK                 0x1FFu
#define SCB_ICSR_VECTACTIVE_SHIFT                0
#define SCB_ICSR_VECTACTIVE(x)                   (((uint32_t)(((uint32_t)(x))<<SCB_ICSR_VECTACTIVE_SHIFT))&SCB_ICSR_VECTACTIVE_MASK)
#define SCB_ICSR_RETTOBASE_MASK                  0x800u
#define SCB_ICSR_RETTOBASE_SHIFT                 11
#define SCB_ICSR_VECTPENDING_MASK                0x3F000u
#define SCB_ICSR_VECTPENDING_SHIFT               12
#define SCB_ICSR_VECTPENDING(x)                  (((uint32_t)(((uint32_t)(x))<<SCB_ICSR_VECTPENDING_SHIFT))&SCB_ICSR_VECTPENDING_MASK)
#define SCB_ICSR_ISRPENDING_MASK                 0x400000u
#define SCB_ICSR_ISRPENDING_SHIFT                22
#define SCB_ICSR_ISRPREEMPT_MASK                 0x800000u
#define SCB_ICSR_ISRPREEMPT_SHIFT                23
#define SCB_ICSR_PENDSTCLR_MASK                  0x2000000u
#define SCB_ICSR_PENDSTCLR_SHIFT                 25
#define SCB_ICSR_PENDSTSET_MASK                  0x4000000u
#define SCB_ICSR_PENDSTSET_SHIFT                 26
#define SCB_ICSR_PENDSVCLR_MASK                  0x8000000u
#define SCB_ICSR_PENDSVCLR_SHIFT                 27
#define SCB_ICSR_PENDSVSET_MASK                  0x10000000u
#define SCB_ICSR_PENDSVSET_SHIFT                 28
#define SCB_ICSR_NMIPENDSET_MASK                 0x80000000u
#define SCB_ICSR_NMIPENDSET_SHIFT                31
/* VTOR Bit Fields */
#define SCB_VTOR_TBLOFF_MASK                     0xFFFFFF80u
#define SCB_VTOR_TBLOFF_SHIFT                    7
#define SCB_VTOR_TBLOFF(x)                       (((uint32_t)(((uint32_t)(x))<<SCB_VTOR_TBLOFF_SHIFT))&SCB_VTOR_TBLOFF_MASK)
/* AIRCR Bit Fields */
#define SCB_AIRCR_VECTRESET_MASK                 0x1u
#define SCB_AIRCR_VECTRESET_SHIFT                0
#define SCB_AIRCR_VECTCLRACTIVE_MASK             0x2u
#define SCB_AIRCR_VECTCLRACTIVE_SHIFT            1
#define SCB_AIRCR_SYSRESETREQ_MASK               0x4u
#define SCB_AIRCR_SYSRESETREQ_SHIFT              2
#define SCB_AIRCR_PRIGROUP_MASK                  0x700u
#define SCB_AIRCR_PRIGROUP_SHIFT                 8
#define SCB_AIRCR_PRIGROUP(x)                    (((uint32_t)(((uint32_t)(x))<<SCB_AIRCR_PRIGROUP_SHIFT))&SCB_AIRCR_PRIGROUP_MASK)
#define SCB_AIRCR_ENDIANNESS_MASK                0x8000u
#define SCB_AIRCR_ENDIANNESS_SHIFT               15
#define SCB_AIRCR_VECTKEY_MASK                   0xFFFF0000u
#define SCB_AIRCR_VECTKEY_SHIFT                  16
#define SCB_AIRCR_VECTKEY(x)                     (((uint32_t)(((uint32_t)(x))<<SCB_AIRCR_VECTKEY_SHIFT))&SCB_AIRCR_VECTKEY_MASK)
/* SCR Bit Fields */
#define SCB_SCR_SLEEPONEXIT_MASK                 0x2u
#define SCB_SCR_SLEEPONEXIT_SHIFT                1
#define SCB_SCR_SLEEPDEEP_MASK                   0x4u
#define SCB_SCR_SLEEPDEEP_SHIFT                  2
#define SCB_SCR_SEVONPEND_MASK                   0x10u
#define SCB_SCR_SEVONPEND_SHIFT                  4
/* CCR Bit Fields */
#define SCB_CCR_NONBASETHRDENA_MASK              0x1u
#define SCB_CCR_NONBASETHRDENA_SHIFT             0
#define SCB_CCR_USERSETMPEND_MASK                0x2u
#define SCB_CCR_USERSETMPEND_SHIFT               1
#define SCB_CCR_UNALIGN_TRP_MASK                 0x8u
#define SCB_CCR_UNALIGN_TRP_SHIFT                3
#define SCB_CCR_DIV_0_TRP_MASK                   0x10u
#define SCB_CCR_DIV_0_TRP_SHIFT                  4
#define SCB_CCR_BFHFNMIGN_MASK                   0x100u
#define SCB_CCR_BFHFNMIGN_SHIFT                  8
#define SCB_CCR_STKALIGN_MASK                    0x200u
#define SCB_CCR_STKALIGN_SHIFT                   9
/* SHPR1 Bit Fields */
#define SCB_SHPR1_PRI_4_MASK                     0xFFu
#define SCB_SHPR1_PRI_4_SHIFT                    0
#define SCB_SHPR1_PRI_4(x)                       (((uint32_t)(((uint32_t)(x))<<SCB_SHPR1_PRI_4_SHIFT))&SCB_SHPR1_PRI_4_MASK)
#define SCB_SHPR1_PRI_5_MASK                     0xFF00u
#define SCB_SHPR1_PRI_5_SHIFT                    8
#define SCB_SHPR1_PRI_5(x)                       (((uint32_t)(((uint32_t)(x))<<SCB_SHPR1_PRI_5_SHIFT))&SCB_SHPR1_PRI_5_MASK)
#define SCB_SHPR1_PRI_6_MASK                     0xFF0000u
#define SCB_SHPR1_PRI_6_SHIFT                    16
#define SCB_SHPR1_PRI_6(x)                       (((uint32_t)(((uint32_t)(x))<<SCB_SHPR1_PRI_6_SHIFT))&SCB_SHPR1_PRI_6_MASK)
/* SHPR2 Bit Fields */
#define SCB_SHPR2_PRI_11_MASK                    0xFF000000u
#define SCB_SHPR2_PRI_11_SHIFT                   24
#define SCB_SHPR2_PRI_11(x)                      (((uint32_t)(((uint32_t)(x))<<SCB_SHPR2_PRI_11_SHIFT))&SCB_SHPR2_PRI_11_MASK)
/* SHPR3 Bit Fields */
#define SCB_SHPR3_PRI_14_MASK                    0xFF0000u
#define SCB_SHPR3_PRI_14_SHIFT                   16
#define SCB_SHPR3_PRI_14(x)                      (((uint32_t)(((uint32_t)(x))<<SCB_SHPR3_PRI_14_SHIFT))&SCB_SHPR3_PRI_14_MASK)
#define SCB_SHPR3_PRI_15_MASK                    0xFF000000u
#define SCB_SHPR3_PRI_15_SHIFT                   24
#define SCB_SHPR3_PRI_15(x)                      (((uint32_t)(((uint32_t)(x))<<SCB_SHPR3_PRI_15_SHIFT))&SCB_SHPR3_PRI_15_MASK)
/* SHCSR Bit Fields */
#define SCB_SHCSR_MEMFAULTACT_MASK               0x1u
#define SCB_SHCSR_MEMFAULTACT_SHIFT              0
#define SCB_SHCSR_BUSFAULTACT_MASK               0x2u
#define SCB_SHCSR_BUSFAULTACT_SHIFT              1
#define SCB_SHCSR_USGFAULTACT_MASK               0x8u
#define SCB_SHCSR_USGFAULTACT_SHIFT              3
#define SCB_SHCSR_SVCALLACT_MASK                 0x80u
#define SCB_SHCSR_SVCALLACT_SHIFT                7
#define SCB_SHCSR_MONITORACT_MASK                0x100u
#define SCB_SHCSR_MONITORACT_SHIFT               8
#define SCB_SHCSR_PENDSVACT_MASK                 0x400u
#define SCB_SHCSR_PENDSVACT_SHIFT                10
#define SCB_SHCSR_SYSTICKACT_MASK                0x800u
#define SCB_SHCSR_SYSTICKACT_SHIFT               11
#define SCB_SHCSR_USGFAULTPENDED_MASK            0x1000u
#define SCB_SHCSR_USGFAULTPENDED_SHIFT           12
#define SCB_SHCSR_MEMFAULTPENDED_MASK            0x2000u
#define SCB_SHCSR_MEMFAULTPENDED_SHIFT           13
#define SCB_SHCSR_BUSFAULTPENDED_MASK            0x4000u
#define SCB_SHCSR_BUSFAULTPENDED_SHIFT           14
#define SCB_SHCSR_SVCALLPENDED_MASK              0x8000u
#define SCB_SHCSR_SVCALLPENDED_SHIFT             15
#define SCB_SHCSR_MEMFAULTENA_MASK               0x10000u
#define SCB_SHCSR_MEMFAULTENA_SHIFT              16
#define SCB_SHCSR_BUSFAULTENA_MASK               0x20000u
#define SCB_SHCSR_BUSFAULTENA_SHIFT              17
#define SCB_SHCSR_USGFAULTENA_MASK               0x40000u
#define SCB_SHCSR_USGFAULTENA_SHIFT              18
/* CFSR Bit Fields */
#define SCB_CFSR_IACCVIOL_MASK                   0x1u
#define SCB_CFSR_IACCVIOL_SHIFT                  0
#define SCB_CFSR_DACCVIOL_MASK                   0x2u
#define SCB_CFSR_DACCVIOL_SHIFT                  1
#define SCB_CFSR_MUNSTKERR_MASK                  0x8u
#define SCB_CFSR_MUNSTKERR_SHIFT                 3
#define SCB_CFSR_MSTKERR_MASK                    0x10u
#define SCB_CFSR_MSTKERR_SHIFT                   4
#define SCB_CFSR_MLSPERR_MASK                    0x20u
#define SCB_CFSR_MLSPERR_SHIFT                   5
#define SCB_CFSR_MMARVALID_MASK                  0x80u
#define SCB_CFSR_MMARVALID_SHIFT                 7
#define SCB_CFSR_IBUSERR_MASK                    0x100u
#define SCB_CFSR_IBUSERR_SHIFT                   8
#define SCB_CFSR_PRECISERR_MASK                  0x200u
#define SCB_CFSR_PRECISERR_SHIFT                 9
#define SCB_CFSR_IMPRECISERR_MASK                0x400u
#define SCB_CFSR_IMPRECISERR_SHIFT               10
#define SCB_CFSR_UNSTKERR_MASK                   0x800u
#define SCB_CFSR_UNSTKERR_SHIFT                  11
#define SCB_CFSR_STKERR_MASK                     0x1000u
#define SCB_CFSR_STKERR_SHIFT                    12
#define SCB_CFSR_LSPERR_MASK                     0x2000u
#define SCB_CFSR_LSPERR_SHIFT                    13
#define SCB_CFSR_BFARVALID_MASK                  0x8000u
#define SCB_CFSR_BFARVALID_SHIFT                 15
#define SCB_CFSR_UNDEFINSTR_MASK                 0x10000u
#define SCB_CFSR_UNDEFINSTR_SHIFT                16
#define SCB_CFSR_INVSTATE_MASK                   0x20000u
#define SCB_CFSR_INVSTATE_SHIFT                  17
#define SCB_CFSR_INVPC_MASK                      0x40000u
#define SCB_CFSR_INVPC_SHIFT                     18
#define SCB_CFSR_NOCP_MASK                       0x80000u
#define SCB_CFSR_NOCP_SHIFT                      19
#define SCB_CFSR_UNALIGNED_MASK                  0x1000000u
#define SCB_CFSR_UNALIGNED_SHIFT                 24
#define SCB_CFSR_DIVBYZERO_MASK                  0x2000000u
#define SCB_CFSR_DIVBYZERO_SHIFT                 25
/* HFSR Bit Fields */
#define SCB_HFSR_VECTTBL_MASK                    0x2u
#define SCB_HFSR_VECTTBL_SHIFT                   1
#define SCB_HFSR_FORCED_MASK                     0x40000000u
#define SCB_HFSR_FORCED_SHIFT                    30
#define SCB_HFSR_DEBUGEVT_MASK                   0x80000000u
#define SCB_HFSR_DEBUGEVT_SHIFT                  31
/* DFSR Bit Fields */
#define SCB_DFSR_HALTED_MASK                     0x1u
#define SCB_DFSR_HALTED_SHIFT                    0
#define SCB_DFSR_BKPT_MASK                       0x2u
#define SCB_DFSR_BKPT_SHIFT                      1
#define SCB_DFSR_DWTTRAP_MASK                    0x4u
#define SCB_DFSR_DWTTRAP_SHIFT                   2
#define SCB_DFSR_VCATCH_MASK                     0x8u
#define SCB_DFSR_VCATCH_SHIFT                    3
#define SCB_DFSR_EXTERNAL_MASK                   0x10u
#define SCB_DFSR_EXTERNAL_SHIFT                  4
/* MMFAR Bit Fields */
#define SCB_MMFAR_ADDRESS_MASK                   0xFFFFFFFFu
#define SCB_MMFAR_ADDRESS_SHIFT                  0
#define SCB_MMFAR_ADDRESS(x)                     (((uint32_t)(((uint32_t)(x))<<SCB_MMFAR_ADDRESS_SHIFT))&SCB_MMFAR_ADDRESS_MASK)
/* BFAR Bit Fields */
#define SCB_BFAR_ADDRESS_MASK                    0xFFFFFFFFu
#define SCB_BFAR_ADDRESS_SHIFT                   0
#define SCB_BFAR_ADDRESS(x)                      (((uint32_t)(((uint32_t)(x))<<SCB_BFAR_ADDRESS_SHIFT))&SCB_BFAR_ADDRESS_MASK)
/* AFSR Bit Fields */
#define SCB_AFSR_AUXFAULT_MASK                   0xFFFFFFFFu
#define SCB_AFSR_AUXFAULT_SHIFT                  0
#define SCB_AFSR_AUXFAULT(x)                     (((uint32_t)(((uint32_t)(x))<<SCB_AFSR_AUXFAULT_SHIFT))&SCB_AFSR_AUXFAULT_MASK)

/**
 * @}
 */ /* end of group SCB_Register_Masks */


/* SCB - Peripheral instance base addresses */
/** Peripheral SystemControl base pointer */
#define SystemControl_BASE_PTR                   ((SCB_MemMapPtr)0xE000E000u)

/* ----------------------------------------------------------------------------
   -- SCB - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup SCB_Register_Accessor_Macros SCB - Register accessor macros
 * @{
 */


/* SCB - Register instance definitions */
/* SystemControl */
#define SCB_ACTLR                                SCB_ACTLR_REG(SystemControl_BASE_PTR)
#define SCB_CPUID                                SCB_CPUID_REG(SystemControl_BASE_PTR)
#define SCB_ICSR                                 SCB_ICSR_REG(SystemControl_BASE_PTR)
#define SCB_VTOR                                 SCB_VTOR_REG(SystemControl_BASE_PTR)
#define SCB_AIRCR                                SCB_AIRCR_REG(SystemControl_BASE_PTR)
#define SCB_SCR                                  SCB_SCR_REG(SystemControl_BASE_PTR)
#define SCB_CCR                                  SCB_CCR_REG(SystemControl_BASE_PTR)
#define SCB_SHPR1                                SCB_SHPR1_REG(SystemControl_BASE_PTR)
#define SCB_SHPR2                                SCB_SHPR2_REG(SystemControl_BASE_PTR)
#define SCB_SHPR3                                SCB_SHPR3_REG(SystemControl_BASE_PTR)
#define SCB_SHCSR                                SCB_SHCSR_REG(SystemControl_BASE_PTR)
#define SCB_CFSR                                 SCB_CFSR_REG(SystemControl_BASE_PTR)
#define SCB_HFSR                                 SCB_HFSR_REG(SystemControl_BASE_PTR)
#define SCB_DFSR                                 SCB_DFSR_REG(SystemControl_BASE_PTR)
#define SCB_MMFAR                                SCB_MMFAR_REG(SystemControl_BASE_PTR)
#define SCB_BFAR                                 SCB_BFAR_REG(SystemControl_BASE_PTR)
#define SCB_AFSR                                 SCB_AFSR_REG(SystemControl_BASE_PTR)

/**
 * @}
 */ /* end of group SCB_Register_Accessor_Macros */


/**
 * @}
 */ /* end of group SCB_Peripheral */

/* ----------------------------------------------------------------------------
   -- NVIC
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup NVIC_Peripheral NVIC
 * @{
 */

/** NVIC - Peripheral register structure */
typedef struct NVIC_MemMap {
  uint32_t ISER[4];                                /**< Interrupt Set Enable Register n, array offset: 0x0, array step: 0x4 */
  uint8_t RESERVED_0[112];
  uint32_t ICER[4];                                /**< Interrupt Clear Enable Register n, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_1[112];
  uint32_t ISPR[4];                                /**< Interrupt Set Pending Register n, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_2[112];
  uint32_t ICPR[4];                                /**< Interrupt Clear Pending Register n, array offset: 0x180, array step: 0x4 */
  uint8_t RESERVED_3[112];
  uint32_t IABR[4];                                /**< Interrupt Active bit Register n, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_4[240];
  uint8_t IP[106];                                 /**< Interrupt Priority Register n, array offset: 0x300, array step: 0x1 */
  uint8_t RESERVED_5[2710];
  uint32_t STIR[1];                                /**< Software Trigger Interrupt Register, array offset: 0xE00, array step: 0x4 */
} volatile *NVIC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- NVIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup NVIC_Register_Accessor_Macros NVIC - Register accessor macros
 * @{
 */


/* NVIC - Register accessors */
#define NVIC_ISER_REG(base,index)                ((base)->ISER[index])
#define NVIC_ICER_REG(base,index)                ((base)->ICER[index])
#define NVIC_ISPR_REG(base,index)                ((base)->ISPR[index])
#define NVIC_ICPR_REG(base,index)                ((base)->ICPR[index])
#define NVIC_IABR_REG(base,index)                ((base)->IABR[index])
#define NVIC_IP_REG(base,index)                  ((base)->IP[index])
#define NVIC_STIR_REG(base,index)                ((base)->STIR[index])

/**
 * @}
 */ /* end of group NVIC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- NVIC Register Masks
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup NVIC_Register_Masks NVIC Register Masks
 * @{
 */

/* ISER Bit Fields */
#define NVIC_ISER_SETENA_MASK                    0xFFFFFFFFu
#define NVIC_ISER_SETENA_SHIFT                   0
#define NVIC_ISER_SETENA(x)                      (((uint32_t)(((uint32_t)(x))<<NVIC_ISER_SETENA_SHIFT))&NVIC_ISER_SETENA_MASK)
/* ICER Bit Fields */
#define NVIC_ICER_CLRENA_MASK                    0xFFFFFFFFu
#define NVIC_ICER_CLRENA_SHIFT                   0
#define NVIC_ICER_CLRENA(x)                      (((uint32_t)(((uint32_t)(x))<<NVIC_ICER_CLRENA_SHIFT))&NVIC_ICER_CLRENA_MASK)
/* ISPR Bit Fields */
#define NVIC_ISPR_SETPEND_MASK                   0xFFFFFFFFu
#define NVIC_ISPR_SETPEND_SHIFT                  0
#define NVIC_ISPR_SETPEND(x)                     (((uint32_t)(((uint32_t)(x))<<NVIC_ISPR_SETPEND_SHIFT))&NVIC_ISPR_SETPEND_MASK)
/* ICPR Bit Fields */
#define NVIC_ICPR_CLRPEND_MASK                   0xFFFFFFFFu
#define NVIC_ICPR_CLRPEND_SHIFT                  0
#define NVIC_ICPR_CLRPEND(x)                     (((uint32_t)(((uint32_t)(x))<<NVIC_ICPR_CLRPEND_SHIFT))&NVIC_ICPR_CLRPEND_MASK)
/* IABR Bit Fields */
#define NVIC_IABR_ACTIVE_MASK                    0xFFFFFFFFu
#define NVIC_IABR_ACTIVE_SHIFT                   0
#define NVIC_IABR_ACTIVE(x)                      (((uint32_t)(((uint32_t)(x))<<NVIC_IABR_ACTIVE_SHIFT))&NVIC_IABR_ACTIVE_MASK)
/* IP Bit Fields */
#define NVIC_IP_PRI0_MASK                        0xFFu
#define NVIC_IP_PRI0_SHIFT                       0
#define NVIC_IP_PRI0(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI0_SHIFT))&NVIC_IP_PRI0_MASK)
#define NVIC_IP_PRI1_MASK                        0xFFu
#define NVIC_IP_PRI1_SHIFT                       0
#define NVIC_IP_PRI1(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI1_SHIFT))&NVIC_IP_PRI1_MASK)
#define NVIC_IP_PRI2_MASK                        0xFFu
#define NVIC_IP_PRI2_SHIFT                       0
#define NVIC_IP_PRI2(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI2_SHIFT))&NVIC_IP_PRI2_MASK)
#define NVIC_IP_PRI3_MASK                        0xFFu
#define NVIC_IP_PRI3_SHIFT                       0
#define NVIC_IP_PRI3(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI3_SHIFT))&NVIC_IP_PRI3_MASK)
#define NVIC_IP_PRI4_MASK                        0xFFu
#define NVIC_IP_PRI4_SHIFT                       0
#define NVIC_IP_PRI4(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI4_SHIFT))&NVIC_IP_PRI4_MASK)
#define NVIC_IP_PRI5_MASK                        0xFFu
#define NVIC_IP_PRI5_SHIFT                       0
#define NVIC_IP_PRI5(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI5_SHIFT))&NVIC_IP_PRI5_MASK)
#define NVIC_IP_PRI6_MASK                        0xFFu
#define NVIC_IP_PRI6_SHIFT                       0
#define NVIC_IP_PRI6(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI6_SHIFT))&NVIC_IP_PRI6_MASK)
#define NVIC_IP_PRI7_MASK                        0xFFu
#define NVIC_IP_PRI7_SHIFT                       0
#define NVIC_IP_PRI7(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI7_SHIFT))&NVIC_IP_PRI7_MASK)
#define NVIC_IP_PRI8_MASK                        0xFFu
#define NVIC_IP_PRI8_SHIFT                       0
#define NVIC_IP_PRI8(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI8_SHIFT))&NVIC_IP_PRI8_MASK)
#define NVIC_IP_PRI9_MASK                        0xFFu
#define NVIC_IP_PRI9_SHIFT                       0
#define NVIC_IP_PRI9(x)                          (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI9_SHIFT))&NVIC_IP_PRI9_MASK)
#define NVIC_IP_PRI10_MASK                       0xFFu
#define NVIC_IP_PRI10_SHIFT                      0
#define NVIC_IP_PRI10(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI10_SHIFT))&NVIC_IP_PRI10_MASK)
#define NVIC_IP_PRI11_MASK                       0xFFu
#define NVIC_IP_PRI11_SHIFT                      0
#define NVIC_IP_PRI11(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI11_SHIFT))&NVIC_IP_PRI11_MASK)
#define NVIC_IP_PRI12_MASK                       0xFFu
#define NVIC_IP_PRI12_SHIFT                      0
#define NVIC_IP_PRI12(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI12_SHIFT))&NVIC_IP_PRI12_MASK)
#define NVIC_IP_PRI13_MASK                       0xFFu
#define NVIC_IP_PRI13_SHIFT                      0
#define NVIC_IP_PRI13(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI13_SHIFT))&NVIC_IP_PRI13_MASK)
#define NVIC_IP_PRI14_MASK                       0xFFu
#define NVIC_IP_PRI14_SHIFT                      0
#define NVIC_IP_PRI14(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI14_SHIFT))&NVIC_IP_PRI14_MASK)
#define NVIC_IP_PRI15_MASK                       0xFFu
#define NVIC_IP_PRI15_SHIFT                      0
#define NVIC_IP_PRI15(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI15_SHIFT))&NVIC_IP_PRI15_MASK)
#define NVIC_IP_PRI16_MASK                       0xFFu
#define NVIC_IP_PRI16_SHIFT                      0
#define NVIC_IP_PRI16(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI16_SHIFT))&NVIC_IP_PRI16_MASK)
#define NVIC_IP_PRI17_MASK                       0xFFu
#define NVIC_IP_PRI17_SHIFT                      0
#define NVIC_IP_PRI17(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI17_SHIFT))&NVIC_IP_PRI17_MASK)
#define NVIC_IP_PRI18_MASK                       0xFFu
#define NVIC_IP_PRI18_SHIFT                      0
#define NVIC_IP_PRI18(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI18_SHIFT))&NVIC_IP_PRI18_MASK)
#define NVIC_IP_PRI19_MASK                       0xFFu
#define NVIC_IP_PRI19_SHIFT                      0
#define NVIC_IP_PRI19(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI19_SHIFT))&NVIC_IP_PRI19_MASK)
#define NVIC_IP_PRI20_MASK                       0xFFu
#define NVIC_IP_PRI20_SHIFT                      0
#define NVIC_IP_PRI20(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI20_SHIFT))&NVIC_IP_PRI20_MASK)
#define NVIC_IP_PRI21_MASK                       0xFFu
#define NVIC_IP_PRI21_SHIFT                      0
#define NVIC_IP_PRI21(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI21_SHIFT))&NVIC_IP_PRI21_MASK)
#define NVIC_IP_PRI22_MASK                       0xFFu
#define NVIC_IP_PRI22_SHIFT                      0
#define NVIC_IP_PRI22(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI22_SHIFT))&NVIC_IP_PRI22_MASK)
#define NVIC_IP_PRI23_MASK                       0xFFu
#define NVIC_IP_PRI23_SHIFT                      0
#define NVIC_IP_PRI23(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI23_SHIFT))&NVIC_IP_PRI23_MASK)
#define NVIC_IP_PRI24_MASK                       0xFFu
#define NVIC_IP_PRI24_SHIFT                      0
#define NVIC_IP_PRI24(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI24_SHIFT))&NVIC_IP_PRI24_MASK)
#define NVIC_IP_PRI25_MASK                       0xFFu
#define NVIC_IP_PRI25_SHIFT                      0
#define NVIC_IP_PRI25(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI25_SHIFT))&NVIC_IP_PRI25_MASK)
#define NVIC_IP_PRI26_MASK                       0xFFu
#define NVIC_IP_PRI26_SHIFT                      0
#define NVIC_IP_PRI26(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI26_SHIFT))&NVIC_IP_PRI26_MASK)
#define NVIC_IP_PRI27_MASK                       0xFFu
#define NVIC_IP_PRI27_SHIFT                      0
#define NVIC_IP_PRI27(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI27_SHIFT))&NVIC_IP_PRI27_MASK)
#define NVIC_IP_PRI28_MASK                       0xFFu
#define NVIC_IP_PRI28_SHIFT                      0
#define NVIC_IP_PRI28(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI28_SHIFT))&NVIC_IP_PRI28_MASK)
#define NVIC_IP_PRI29_MASK                       0xFFu
#define NVIC_IP_PRI29_SHIFT                      0
#define NVIC_IP_PRI29(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI29_SHIFT))&NVIC_IP_PRI29_MASK)
#define NVIC_IP_PRI30_MASK                       0xFFu
#define NVIC_IP_PRI30_SHIFT                      0
#define NVIC_IP_PRI30(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI30_SHIFT))&NVIC_IP_PRI30_MASK)
#define NVIC_IP_PRI31_MASK                       0xFFu
#define NVIC_IP_PRI31_SHIFT                      0
#define NVIC_IP_PRI31(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI31_SHIFT))&NVIC_IP_PRI31_MASK)
#define NVIC_IP_PRI32_MASK                       0xFFu
#define NVIC_IP_PRI32_SHIFT                      0
#define NVIC_IP_PRI32(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI32_SHIFT))&NVIC_IP_PRI32_MASK)
#define NVIC_IP_PRI33_MASK                       0xFFu
#define NVIC_IP_PRI33_SHIFT                      0
#define NVIC_IP_PRI33(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI33_SHIFT))&NVIC_IP_PRI33_MASK)
#define NVIC_IP_PRI34_MASK                       0xFFu
#define NVIC_IP_PRI34_SHIFT                      0
#define NVIC_IP_PRI34(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI34_SHIFT))&NVIC_IP_PRI34_MASK)
#define NVIC_IP_PRI35_MASK                       0xFFu
#define NVIC_IP_PRI35_SHIFT                      0
#define NVIC_IP_PRI35(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI35_SHIFT))&NVIC_IP_PRI35_MASK)
#define NVIC_IP_PRI36_MASK                       0xFFu
#define NVIC_IP_PRI36_SHIFT                      0
#define NVIC_IP_PRI36(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI36_SHIFT))&NVIC_IP_PRI36_MASK)
#define NVIC_IP_PRI37_MASK                       0xFFu
#define NVIC_IP_PRI37_SHIFT                      0
#define NVIC_IP_PRI37(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI37_SHIFT))&NVIC_IP_PRI37_MASK)
#define NVIC_IP_PRI38_MASK                       0xFFu
#define NVIC_IP_PRI38_SHIFT                      0
#define NVIC_IP_PRI38(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI38_SHIFT))&NVIC_IP_PRI38_MASK)
#define NVIC_IP_PRI39_MASK                       0xFFu
#define NVIC_IP_PRI39_SHIFT                      0
#define NVIC_IP_PRI39(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI39_SHIFT))&NVIC_IP_PRI39_MASK)
#define NVIC_IP_PRI40_MASK                       0xFFu
#define NVIC_IP_PRI40_SHIFT                      0
#define NVIC_IP_PRI40(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI40_SHIFT))&NVIC_IP_PRI40_MASK)
#define NVIC_IP_PRI41_MASK                       0xFFu
#define NVIC_IP_PRI41_SHIFT                      0
#define NVIC_IP_PRI41(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI41_SHIFT))&NVIC_IP_PRI41_MASK)
#define NVIC_IP_PRI42_MASK                       0xFFu
#define NVIC_IP_PRI42_SHIFT                      0
#define NVIC_IP_PRI42(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI42_SHIFT))&NVIC_IP_PRI42_MASK)
#define NVIC_IP_PRI43_MASK                       0xFFu
#define NVIC_IP_PRI43_SHIFT                      0
#define NVIC_IP_PRI43(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI43_SHIFT))&NVIC_IP_PRI43_MASK)
#define NVIC_IP_PRI44_MASK                       0xFFu
#define NVIC_IP_PRI44_SHIFT                      0
#define NVIC_IP_PRI44(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI44_SHIFT))&NVIC_IP_PRI44_MASK)
#define NVIC_IP_PRI45_MASK                       0xFFu
#define NVIC_IP_PRI45_SHIFT                      0
#define NVIC_IP_PRI45(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI45_SHIFT))&NVIC_IP_PRI45_MASK)
#define NVIC_IP_PRI46_MASK                       0xFFu
#define NVIC_IP_PRI46_SHIFT                      0
#define NVIC_IP_PRI46(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI46_SHIFT))&NVIC_IP_PRI46_MASK)
#define NVIC_IP_PRI47_MASK                       0xFFu
#define NVIC_IP_PRI47_SHIFT                      0
#define NVIC_IP_PRI47(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI47_SHIFT))&NVIC_IP_PRI47_MASK)
#define NVIC_IP_PRI48_MASK                       0xFFu
#define NVIC_IP_PRI48_SHIFT                      0
#define NVIC_IP_PRI48(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI48_SHIFT))&NVIC_IP_PRI48_MASK)
#define NVIC_IP_PRI49_MASK                       0xFFu
#define NVIC_IP_PRI49_SHIFT                      0
#define NVIC_IP_PRI49(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI49_SHIFT))&NVIC_IP_PRI49_MASK)
#define NVIC_IP_PRI50_MASK                       0xFFu
#define NVIC_IP_PRI50_SHIFT                      0
#define NVIC_IP_PRI50(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI50_SHIFT))&NVIC_IP_PRI50_MASK)
#define NVIC_IP_PRI51_MASK                       0xFFu
#define NVIC_IP_PRI51_SHIFT                      0
#define NVIC_IP_PRI51(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI51_SHIFT))&NVIC_IP_PRI51_MASK)
#define NVIC_IP_PRI52_MASK                       0xFFu
#define NVIC_IP_PRI52_SHIFT                      0
#define NVIC_IP_PRI52(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI52_SHIFT))&NVIC_IP_PRI52_MASK)
#define NVIC_IP_PRI53_MASK                       0xFFu
#define NVIC_IP_PRI53_SHIFT                      0
#define NVIC_IP_PRI53(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI53_SHIFT))&NVIC_IP_PRI53_MASK)
#define NVIC_IP_PRI54_MASK                       0xFFu
#define NVIC_IP_PRI54_SHIFT                      0
#define NVIC_IP_PRI54(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI54_SHIFT))&NVIC_IP_PRI54_MASK)
#define NVIC_IP_PRI55_MASK                       0xFFu
#define NVIC_IP_PRI55_SHIFT                      0
#define NVIC_IP_PRI55(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI55_SHIFT))&NVIC_IP_PRI55_MASK)
#define NVIC_IP_PRI56_MASK                       0xFFu
#define NVIC_IP_PRI56_SHIFT                      0
#define NVIC_IP_PRI56(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI56_SHIFT))&NVIC_IP_PRI56_MASK)
#define NVIC_IP_PRI57_MASK                       0xFFu
#define NVIC_IP_PRI57_SHIFT                      0
#define NVIC_IP_PRI57(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI57_SHIFT))&NVIC_IP_PRI57_MASK)
#define NVIC_IP_PRI58_MASK                       0xFFu
#define NVIC_IP_PRI58_SHIFT                      0
#define NVIC_IP_PRI58(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI58_SHIFT))&NVIC_IP_PRI58_MASK)
#define NVIC_IP_PRI59_MASK                       0xFFu
#define NVIC_IP_PRI59_SHIFT                      0
#define NVIC_IP_PRI59(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI59_SHIFT))&NVIC_IP_PRI59_MASK)
#define NVIC_IP_PRI60_MASK                       0xFFu
#define NVIC_IP_PRI60_SHIFT                      0
#define NVIC_IP_PRI60(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI60_SHIFT))&NVIC_IP_PRI60_MASK)
#define NVIC_IP_PRI61_MASK                       0xFFu
#define NVIC_IP_PRI61_SHIFT                      0
#define NVIC_IP_PRI61(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI61_SHIFT))&NVIC_IP_PRI61_MASK)
#define NVIC_IP_PRI62_MASK                       0xFFu
#define NVIC_IP_PRI62_SHIFT                      0
#define NVIC_IP_PRI62(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI62_SHIFT))&NVIC_IP_PRI62_MASK)
#define NVIC_IP_PRI63_MASK                       0xFFu
#define NVIC_IP_PRI63_SHIFT                      0
#define NVIC_IP_PRI63(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI63_SHIFT))&NVIC_IP_PRI63_MASK)
#define NVIC_IP_PRI64_MASK                       0xFFu
#define NVIC_IP_PRI64_SHIFT                      0
#define NVIC_IP_PRI64(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI64_SHIFT))&NVIC_IP_PRI64_MASK)
#define NVIC_IP_PRI65_MASK                       0xFFu
#define NVIC_IP_PRI65_SHIFT                      0
#define NVIC_IP_PRI65(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI65_SHIFT))&NVIC_IP_PRI65_MASK)
#define NVIC_IP_PRI66_MASK                       0xFFu
#define NVIC_IP_PRI66_SHIFT                      0
#define NVIC_IP_PRI66(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI66_SHIFT))&NVIC_IP_PRI66_MASK)
#define NVIC_IP_PRI67_MASK                       0xFFu
#define NVIC_IP_PRI67_SHIFT                      0
#define NVIC_IP_PRI67(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI67_SHIFT))&NVIC_IP_PRI67_MASK)
#define NVIC_IP_PRI68_MASK                       0xFFu
#define NVIC_IP_PRI68_SHIFT                      0
#define NVIC_IP_PRI68(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI68_SHIFT))&NVIC_IP_PRI68_MASK)
#define NVIC_IP_PRI69_MASK                       0xFFu
#define NVIC_IP_PRI69_SHIFT                      0
#define NVIC_IP_PRI69(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI69_SHIFT))&NVIC_IP_PRI69_MASK)
#define NVIC_IP_PRI70_MASK                       0xFFu
#define NVIC_IP_PRI70_SHIFT                      0
#define NVIC_IP_PRI70(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI70_SHIFT))&NVIC_IP_PRI70_MASK)
#define NVIC_IP_PRI71_MASK                       0xFFu
#define NVIC_IP_PRI71_SHIFT                      0
#define NVIC_IP_PRI71(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI71_SHIFT))&NVIC_IP_PRI71_MASK)
#define NVIC_IP_PRI72_MASK                       0xFFu
#define NVIC_IP_PRI72_SHIFT                      0
#define NVIC_IP_PRI72(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI72_SHIFT))&NVIC_IP_PRI72_MASK)
#define NVIC_IP_PRI73_MASK                       0xFFu
#define NVIC_IP_PRI73_SHIFT                      0
#define NVIC_IP_PRI73(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI73_SHIFT))&NVIC_IP_PRI73_MASK)
#define NVIC_IP_PRI74_MASK                       0xFFu
#define NVIC_IP_PRI74_SHIFT                      0
#define NVIC_IP_PRI74(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI74_SHIFT))&NVIC_IP_PRI74_MASK)
#define NVIC_IP_PRI75_MASK                       0xFFu
#define NVIC_IP_PRI75_SHIFT                      0
#define NVIC_IP_PRI75(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI75_SHIFT))&NVIC_IP_PRI75_MASK)
#define NVIC_IP_PRI76_MASK                       0xFFu
#define NVIC_IP_PRI76_SHIFT                      0
#define NVIC_IP_PRI76(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI76_SHIFT))&NVIC_IP_PRI76_MASK)
#define NVIC_IP_PRI77_MASK                       0xFFu
#define NVIC_IP_PRI77_SHIFT                      0
#define NVIC_IP_PRI77(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI77_SHIFT))&NVIC_IP_PRI77_MASK)
#define NVIC_IP_PRI78_MASK                       0xFFu
#define NVIC_IP_PRI78_SHIFT                      0
#define NVIC_IP_PRI78(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI78_SHIFT))&NVIC_IP_PRI78_MASK)
#define NVIC_IP_PRI79_MASK                       0xFFu
#define NVIC_IP_PRI79_SHIFT                      0
#define NVIC_IP_PRI79(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI79_SHIFT))&NVIC_IP_PRI79_MASK)
#define NVIC_IP_PRI80_MASK                       0xFFu
#define NVIC_IP_PRI80_SHIFT                      0
#define NVIC_IP_PRI80(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI80_SHIFT))&NVIC_IP_PRI80_MASK)
#define NVIC_IP_PRI81_MASK                       0xFFu
#define NVIC_IP_PRI81_SHIFT                      0
#define NVIC_IP_PRI81(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI81_SHIFT))&NVIC_IP_PRI81_MASK)
#define NVIC_IP_PRI82_MASK                       0xFFu
#define NVIC_IP_PRI82_SHIFT                      0
#define NVIC_IP_PRI82(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI82_SHIFT))&NVIC_IP_PRI82_MASK)
#define NVIC_IP_PRI83_MASK                       0xFFu
#define NVIC_IP_PRI83_SHIFT                      0
#define NVIC_IP_PRI83(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI83_SHIFT))&NVIC_IP_PRI83_MASK)
#define NVIC_IP_PRI84_MASK                       0xFFu
#define NVIC_IP_PRI84_SHIFT                      0
#define NVIC_IP_PRI84(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI84_SHIFT))&NVIC_IP_PRI84_MASK)
#define NVIC_IP_PRI85_MASK                       0xFFu
#define NVIC_IP_PRI85_SHIFT                      0
#define NVIC_IP_PRI85(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI85_SHIFT))&NVIC_IP_PRI85_MASK)
#define NVIC_IP_PRI86_MASK                       0xFFu
#define NVIC_IP_PRI86_SHIFT                      0
#define NVIC_IP_PRI86(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI86_SHIFT))&NVIC_IP_PRI86_MASK)
#define NVIC_IP_PRI87_MASK                       0xFFu
#define NVIC_IP_PRI87_SHIFT                      0
#define NVIC_IP_PRI87(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI87_SHIFT))&NVIC_IP_PRI87_MASK)
#define NVIC_IP_PRI88_MASK                       0xFFu
#define NVIC_IP_PRI88_SHIFT                      0
#define NVIC_IP_PRI88(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI88_SHIFT))&NVIC_IP_PRI88_MASK)
#define NVIC_IP_PRI89_MASK                       0xFFu
#define NVIC_IP_PRI89_SHIFT                      0
#define NVIC_IP_PRI89(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI89_SHIFT))&NVIC_IP_PRI89_MASK)
#define NVIC_IP_PRI90_MASK                       0xFFu
#define NVIC_IP_PRI90_SHIFT                      0
#define NVIC_IP_PRI90(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI90_SHIFT))&NVIC_IP_PRI90_MASK)
#define NVIC_IP_PRI91_MASK                       0xFFu
#define NVIC_IP_PRI91_SHIFT                      0
#define NVIC_IP_PRI91(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI91_SHIFT))&NVIC_IP_PRI91_MASK)
#define NVIC_IP_PRI92_MASK                       0xFFu
#define NVIC_IP_PRI92_SHIFT                      0
#define NVIC_IP_PRI92(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI92_SHIFT))&NVIC_IP_PRI92_MASK)
#define NVIC_IP_PRI93_MASK                       0xFFu
#define NVIC_IP_PRI93_SHIFT                      0
#define NVIC_IP_PRI93(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI93_SHIFT))&NVIC_IP_PRI93_MASK)
#define NVIC_IP_PRI94_MASK                       0xFFu
#define NVIC_IP_PRI94_SHIFT                      0
#define NVIC_IP_PRI94(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI94_SHIFT))&NVIC_IP_PRI94_MASK)
#define NVIC_IP_PRI95_MASK                       0xFFu
#define NVIC_IP_PRI95_SHIFT                      0
#define NVIC_IP_PRI95(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI95_SHIFT))&NVIC_IP_PRI95_MASK)
#define NVIC_IP_PRI96_MASK                       0xFFu
#define NVIC_IP_PRI96_SHIFT                      0
#define NVIC_IP_PRI96(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI96_SHIFT))&NVIC_IP_PRI96_MASK)
#define NVIC_IP_PRI97_MASK                       0xFFu
#define NVIC_IP_PRI97_SHIFT                      0
#define NVIC_IP_PRI97(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI97_SHIFT))&NVIC_IP_PRI97_MASK)
#define NVIC_IP_PRI98_MASK                       0xFFu
#define NVIC_IP_PRI98_SHIFT                      0
#define NVIC_IP_PRI98(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI98_SHIFT))&NVIC_IP_PRI98_MASK)
#define NVIC_IP_PRI99_MASK                       0xFFu
#define NVIC_IP_PRI99_SHIFT                      0
#define NVIC_IP_PRI99(x)                         (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI99_SHIFT))&NVIC_IP_PRI99_MASK)
#define NVIC_IP_PRI100_MASK                      0xFFu
#define NVIC_IP_PRI100_SHIFT                     0
#define NVIC_IP_PRI100(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI100_SHIFT))&NVIC_IP_PRI100_MASK)
#define NVIC_IP_PRI101_MASK                      0xFFu
#define NVIC_IP_PRI101_SHIFT                     0
#define NVIC_IP_PRI101(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI101_SHIFT))&NVIC_IP_PRI101_MASK)
#define NVIC_IP_PRI102_MASK                      0xFFu
#define NVIC_IP_PRI102_SHIFT                     0
#define NVIC_IP_PRI102(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI102_SHIFT))&NVIC_IP_PRI102_MASK)
#define NVIC_IP_PRI103_MASK                      0xFFu
#define NVIC_IP_PRI103_SHIFT                     0
#define NVIC_IP_PRI103(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI103_SHIFT))&NVIC_IP_PRI103_MASK)
#define NVIC_IP_PRI104_MASK                      0xFFu
#define NVIC_IP_PRI104_SHIFT                     0
#define NVIC_IP_PRI104(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI104_SHIFT))&NVIC_IP_PRI104_MASK)
#define NVIC_IP_PRI105_MASK                      0xFFu
#define NVIC_IP_PRI105_SHIFT                     0
#define NVIC_IP_PRI105(x)                        (((uint8_t)(((uint8_t)(x))<<NVIC_IP_PRI105_SHIFT))&NVIC_IP_PRI105_MASK)
/* STIR Bit Fields */
#define NVIC_STIR_INTID_MASK                     0x1FFu
#define NVIC_STIR_INTID_SHIFT                    0
#define NVIC_STIR_INTID(x)                       (((uint32_t)(((uint32_t)(x))<<NVIC_STIR_INTID_SHIFT))&NVIC_STIR_INTID_MASK)

/**
 * @}
 */ /* end of group NVIC_Register_Masks */


/* NVIC - Peripheral instance base addresses */
/** Peripheral NVIC base pointer */
#define NVIC_BASE_PTR                            ((NVIC_MemMapPtr)0xE000E100u)

/* ----------------------------------------------------------------------------
   -- NVIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup NVIC_Register_Accessor_Macros NVIC - Register accessor macros
 * @{
 */


/* NVIC - Register instance definitions */
/* NVIC */
#define NVICISER0                                NVIC_ISER_REG(NVIC_BASE_PTR,0)
#define NVICISER1                                NVIC_ISER_REG(NVIC_BASE_PTR,1)
#define NVICISER2                                NVIC_ISER_REG(NVIC_BASE_PTR,2)
#define NVICISER3                                NVIC_ISER_REG(NVIC_BASE_PTR,3)
#define NVICICER0                                NVIC_ICER_REG(NVIC_BASE_PTR,0)
#define NVICICER1                                NVIC_ICER_REG(NVIC_BASE_PTR,1)
#define NVICICER2                                NVIC_ICER_REG(NVIC_BASE_PTR,2)
#define NVICICER3                                NVIC_ICER_REG(NVIC_BASE_PTR,3)
#define NVICISPR0                                NVIC_ISPR_REG(NVIC_BASE_PTR,0)
#define NVICISPR1                                NVIC_ISPR_REG(NVIC_BASE_PTR,1)
#define NVICISPR2                                NVIC_ISPR_REG(NVIC_BASE_PTR,2)
#define NVICISPR3                                NVIC_ISPR_REG(NVIC_BASE_PTR,3)
#define NVICICPR0                                NVIC_ICPR_REG(NVIC_BASE_PTR,0)
#define NVICICPR1                                NVIC_ICPR_REG(NVIC_BASE_PTR,1)
#define NVICICPR2                                NVIC_ICPR_REG(NVIC_BASE_PTR,2)
#define NVICICPR3                                NVIC_ICPR_REG(NVIC_BASE_PTR,3)
#define NVICIABR0                                NVIC_IABR_REG(NVIC_BASE_PTR,0)
#define NVICIABR1                                NVIC_IABR_REG(NVIC_BASE_PTR,1)
#define NVICIABR2                                NVIC_IABR_REG(NVIC_BASE_PTR,2)
#define NVICIABR3                                NVIC_IABR_REG(NVIC_BASE_PTR,3)
#define NVICIP0                                  NVIC_IP_REG(NVIC_BASE_PTR,0)
#define NVICIP1                                  NVIC_IP_REG(NVIC_BASE_PTR,1)
#define NVICIP2                                  NVIC_IP_REG(NVIC_BASE_PTR,2)
#define NVICIP3                                  NVIC_IP_REG(NVIC_BASE_PTR,3)
#define NVICIP4                                  NVIC_IP_REG(NVIC_BASE_PTR,4)
#define NVICIP5                                  NVIC_IP_REG(NVIC_BASE_PTR,5)
#define NVICIP6                                  NVIC_IP_REG(NVIC_BASE_PTR,6)
#define NVICIP7                                  NVIC_IP_REG(NVIC_BASE_PTR,7)
#define NVICIP8                                  NVIC_IP_REG(NVIC_BASE_PTR,8)
#define NVICIP9                                  NVIC_IP_REG(NVIC_BASE_PTR,9)
#define NVICIP10                                 NVIC_IP_REG(NVIC_BASE_PTR,10)
#define NVICIP11                                 NVIC_IP_REG(NVIC_BASE_PTR,11)
#define NVICIP12                                 NVIC_IP_REG(NVIC_BASE_PTR,12)
#define NVICIP13                                 NVIC_IP_REG(NVIC_BASE_PTR,13)
#define NVICIP14                                 NVIC_IP_REG(NVIC_BASE_PTR,14)
#define NVICIP15                                 NVIC_IP_REG(NVIC_BASE_PTR,15)
#define NVICIP16                                 NVIC_IP_REG(NVIC_BASE_PTR,16)
#define NVICIP17                                 NVIC_IP_REG(NVIC_BASE_PTR,17)
#define NVICIP18                                 NVIC_IP_REG(NVIC_BASE_PTR,18)
#define NVICIP19                                 NVIC_IP_REG(NVIC_BASE_PTR,19)
#define NVICIP20                                 NVIC_IP_REG(NVIC_BASE_PTR,20)
#define NVICIP21                                 NVIC_IP_REG(NVIC_BASE_PTR,21)
#define NVICIP22                                 NVIC_IP_REG(NVIC_BASE_PTR,22)
#define NVICIP23                                 NVIC_IP_REG(NVIC_BASE_PTR,23)
#define NVICIP24                                 NVIC_IP_REG(NVIC_BASE_PTR,24)
#define NVICIP25                                 NVIC_IP_REG(NVIC_BASE_PTR,25)
#define NVICIP26                                 NVIC_IP_REG(NVIC_BASE_PTR,26)
#define NVICIP27                                 NVIC_IP_REG(NVIC_BASE_PTR,27)
#define NVICIP28                                 NVIC_IP_REG(NVIC_BASE_PTR,28)
#define NVICIP29                                 NVIC_IP_REG(NVIC_BASE_PTR,29)
#define NVICIP30                                 NVIC_IP_REG(NVIC_BASE_PTR,30)
#define NVICIP31                                 NVIC_IP_REG(NVIC_BASE_PTR,31)
#define NVICIP32                                 NVIC_IP_REG(NVIC_BASE_PTR,32)
#define NVICIP33                                 NVIC_IP_REG(NVIC_BASE_PTR,33)
#define NVICIP34                                 NVIC_IP_REG(NVIC_BASE_PTR,34)
#define NVICIP35                                 NVIC_IP_REG(NVIC_BASE_PTR,35)
#define NVICIP36                                 NVIC_IP_REG(NVIC_BASE_PTR,36)
#define NVICIP37                                 NVIC_IP_REG(NVIC_BASE_PTR,37)
#define NVICIP38                                 NVIC_IP_REG(NVIC_BASE_PTR,38)
#define NVICIP39                                 NVIC_IP_REG(NVIC_BASE_PTR,39)
#define NVICIP40                                 NVIC_IP_REG(NVIC_BASE_PTR,40)
#define NVICIP41                                 NVIC_IP_REG(NVIC_BASE_PTR,41)
#define NVICIP42                                 NVIC_IP_REG(NVIC_BASE_PTR,42)
#define NVICIP43                                 NVIC_IP_REG(NVIC_BASE_PTR,43)
#define NVICIP44                                 NVIC_IP_REG(NVIC_BASE_PTR,44)
#define NVICIP45                                 NVIC_IP_REG(NVIC_BASE_PTR,45)
#define NVICIP46                                 NVIC_IP_REG(NVIC_BASE_PTR,46)
#define NVICIP47                                 NVIC_IP_REG(NVIC_BASE_PTR,47)
#define NVICIP48                                 NVIC_IP_REG(NVIC_BASE_PTR,48)
#define NVICIP49                                 NVIC_IP_REG(NVIC_BASE_PTR,49)
#define NVICIP50                                 NVIC_IP_REG(NVIC_BASE_PTR,50)
#define NVICIP51                                 NVIC_IP_REG(NVIC_BASE_PTR,51)
#define NVICIP52                                 NVIC_IP_REG(NVIC_BASE_PTR,52)
#define NVICIP53                                 NVIC_IP_REG(NVIC_BASE_PTR,53)
#define NVICIP54                                 NVIC_IP_REG(NVIC_BASE_PTR,54)
#define NVICIP55                                 NVIC_IP_REG(NVIC_BASE_PTR,55)
#define NVICIP56                                 NVIC_IP_REG(NVIC_BASE_PTR,56)
#define NVICIP57                                 NVIC_IP_REG(NVIC_BASE_PTR,57)
#define NVICIP58                                 NVIC_IP_REG(NVIC_BASE_PTR,58)
#define NVICIP59                                 NVIC_IP_REG(NVIC_BASE_PTR,59)
#define NVICIP60                                 NVIC_IP_REG(NVIC_BASE_PTR,60)
#define NVICIP61                                 NVIC_IP_REG(NVIC_BASE_PTR,61)
#define NVICIP62                                 NVIC_IP_REG(NVIC_BASE_PTR,62)
#define NVICIP63                                 NVIC_IP_REG(NVIC_BASE_PTR,63)
#define NVICIP64                                 NVIC_IP_REG(NVIC_BASE_PTR,64)
#define NVICIP65                                 NVIC_IP_REG(NVIC_BASE_PTR,65)
#define NVICIP66                                 NVIC_IP_REG(NVIC_BASE_PTR,66)
#define NVICIP67                                 NVIC_IP_REG(NVIC_BASE_PTR,67)
#define NVICIP68                                 NVIC_IP_REG(NVIC_BASE_PTR,68)
#define NVICIP69                                 NVIC_IP_REG(NVIC_BASE_PTR,69)
#define NVICIP70                                 NVIC_IP_REG(NVIC_BASE_PTR,70)
#define NVICIP71                                 NVIC_IP_REG(NVIC_BASE_PTR,71)
#define NVICIP72                                 NVIC_IP_REG(NVIC_BASE_PTR,72)
#define NVICIP73                                 NVIC_IP_REG(NVIC_BASE_PTR,73)
#define NVICIP74                                 NVIC_IP_REG(NVIC_BASE_PTR,74)
#define NVICIP75                                 NVIC_IP_REG(NVIC_BASE_PTR,75)
#define NVICIP76                                 NVIC_IP_REG(NVIC_BASE_PTR,76)
#define NVICIP77                                 NVIC_IP_REG(NVIC_BASE_PTR,77)
#define NVICIP78                                 NVIC_IP_REG(NVIC_BASE_PTR,78)
#define NVICIP79                                 NVIC_IP_REG(NVIC_BASE_PTR,79)
#define NVICIP80                                 NVIC_IP_REG(NVIC_BASE_PTR,80)
#define NVICIP81                                 NVIC_IP_REG(NVIC_BASE_PTR,81)
#define NVICIP82                                 NVIC_IP_REG(NVIC_BASE_PTR,82)
#define NVICIP83                                 NVIC_IP_REG(NVIC_BASE_PTR,83)
#define NVICIP84                                 NVIC_IP_REG(NVIC_BASE_PTR,84)
#define NVICIP85                                 NVIC_IP_REG(NVIC_BASE_PTR,85)
#define NVICIP86                                 NVIC_IP_REG(NVIC_BASE_PTR,86)
#define NVICIP87                                 NVIC_IP_REG(NVIC_BASE_PTR,87)
#define NVICIP88                                 NVIC_IP_REG(NVIC_BASE_PTR,88)
#define NVICIP89                                 NVIC_IP_REG(NVIC_BASE_PTR,89)
#define NVICIP90                                 NVIC_IP_REG(NVIC_BASE_PTR,90)
#define NVICIP91                                 NVIC_IP_REG(NVIC_BASE_PTR,91)
#define NVICIP92                                 NVIC_IP_REG(NVIC_BASE_PTR,92)
#define NVICIP93                                 NVIC_IP_REG(NVIC_BASE_PTR,93)
#define NVICIP94                                 NVIC_IP_REG(NVIC_BASE_PTR,94)
#define NVICIP95                                 NVIC_IP_REG(NVIC_BASE_PTR,95)
#define NVICIP96                                 NVIC_IP_REG(NVIC_BASE_PTR,96)
#define NVICIP97                                 NVIC_IP_REG(NVIC_BASE_PTR,97)
#define NVICIP98                                 NVIC_IP_REG(NVIC_BASE_PTR,98)
#define NVICIP99                                 NVIC_IP_REG(NVIC_BASE_PTR,99)
#define NVICIP100                                NVIC_IP_REG(NVIC_BASE_PTR,100)
#define NVICIP101                                NVIC_IP_REG(NVIC_BASE_PTR,101)
#define NVICIP102                                NVIC_IP_REG(NVIC_BASE_PTR,102)
#define NVICIP103                                NVIC_IP_REG(NVIC_BASE_PTR,103)
#define NVICIP104                                NVIC_IP_REG(NVIC_BASE_PTR,104)
#define NVICIP105                                NVIC_IP_REG(NVIC_BASE_PTR,105)
#define NVICSTIR                                 NVIC_STIR_REG(NVIC_BASE_PTR,0)

/* NVIC - Register array accessors */
#define NVIC_ISER(index)                         NVIC_ISER_REG(NVIC_BASE_PTR,index)
#define NVIC_ICER(index)                         NVIC_ICER_REG(NVIC_BASE_PTR,index)
#define NVIC_ISPR(index)                         NVIC_ISPR_REG(NVIC_BASE_PTR,index)
#define NVIC_ICPR(index)                         NVIC_ICPR_REG(NVIC_BASE_PTR,index)
#define NVIC_IABR(index)                         NVIC_IABR_REG(NVIC_BASE_PTR,index)
#define NVIC_IP(index)                           NVIC_IP_REG(NVIC_BASE_PTR,index)
#define NVIC_STIR(index)                         NVIC_STIR_REG(NVIC_BASE_PTR,index)

/**
 * @}
 */ /* end of group NVIC_Register_Accessor_Macros */


/**
 * @}
 */ /* end of group NVIC_Peripheral */

/** UART - Peripheral register structure */
typedef struct UART_MemMap {
  uint8_t R1;                                     /**< UART Baud Rate Registers:High, offset: 0x0 */
  uint8_t R2;                                     /**< UART Baud Rate Registers: Low, offset: 0x1 */
  uint8_t R3;                                      /**< UART Control Register 1, offset: 0x2 */
  uint8_t R4;                                      /**< UART Control Register 2, offset: 0x3 */
  uint8_t R5;                                      /**< UART Status Register 1, offset: 0x4 */
  uint8_t R6;                                      /**< UART Status Register 2, offset: 0x5 */
  uint8_t R7;                                      /**< UART Control Register 3, offset: 0x6 */
  uint8_t R8;                                       /**< UART Data Register, offset: 0x7 */
  uint8_t R9;                                     /**< UART MA1 Register **/
  uint8_t R10;                                     /**< UART MA2 Register **/
  uint8_t R11;                                      /**< UART Control Register 4, offset: 0xA */
  uint8_t R12;                                      /**< UART Control Register 5,  */
} volatile *UART_MemMapPtr;


/**
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */

/* UART0 - Register accessors */
#define UART0_BDH_REG(base)                       ((base)->R1) // R1 - BDH
#define UART0_BDL_REG(base)                       ((base)->R2) // R2 - BDL
#define UART0_C1_REG(base)                        ((base)->R3)  // R3 - C1
#define UART0_C2_REG(base)                        ((base)->R4)  // R4 - C2
#define UART0_S1_REG(base)                        ((base)->R5)  // R5 - S1
#define UART0_S2_REG(base)                        ((base)->R6)  // R6 - S2
#define UART0_C3_REG(base)                        ((base)->R7)  // R7 - C3
#define UART0_D_REG(base)                         ((base)->R8)   // R8 - D
#define UART0_MA1_REG(base)                       ((base)->R9) // R9 - MA1
#define UART0_MA2_REG(base)                       ((base)->R10) // R10 - MA2
#define UART0_C4_REG(base)                        ((base)->R11)  // R11 - C4
#define UART0_C5_REG(base)                        ((base)->R12)  // R12 - C5

/* UART - Register accessors */
#define UART_BDH_REG(base)                       ((base)->R1)  // R1 - BDH
#define UART_BDL_REG(base)                       ((base)->R2)  // R2 - BDL
#define UART_C1_REG(base)                        ((base)->R3)   // R3 - C1
#define UART_C2_REG(base)                        ((base)->R4)   // R4 - C2
#define UART_S1_REG(base)                        ((base)->R5)   // R5 - S1
#define UART_S2_REG(base)                        ((base)->R6)   // R6 - S2
#define UART_C3_REG(base)                        ((base)->R7)   // R7 - C3
#define UART_D_REG(base)                         ((base)->R8)   // R8 - D
#define UART_C4_REG(base)                        ((base)->R9)   // R9 - C4  

/**
 * @}
 */ /* end of group UART_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- UART Register Masks
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup UART_Register_Masks UART Register Masks
 * @{
 */

/* BDH Bit Fields */
#define UART_BDH_SBR_MASK                        0x1Fu
#define UART_BDH_SBR_SHIFT                       0
#define UART_BDH_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBR_SHIFT))&UART_BDH_SBR_MASK)
#define UART_BDH_RXEDGIE_MASK                    0x40u
#define UART_BDH_RXEDGIE_SHIFT                   6
#define UART_BDH_LBKDIE_MASK                     0x80u
#define UART_BDH_LBKDIE_SHIFT                    7
#define UART_BDH_SBNS_MASK                       0x20u
#define UART_BDH_SBNS_SHIFT                      5
/* BDL Bit Fields */
#define UART_BDL_SBR_MASK                        0xFFu
#define UART_BDL_SBR_SHIFT                       0
#define UART_BDL_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDL_SBR_SHIFT))&UART_BDL_SBR_MASK)
/* C1 Bit Fields */
#define UART_C1_PT_MASK                          0x1u
#define UART_C1_PT_SHIFT                         0
#define UART_C1_PE_MASK                          0x2u
#define UART_C1_PE_SHIFT                         1
#define UART_C1_ILT_MASK                         0x4u
#define UART_C1_ILT_SHIFT                        2
#define UART_C1_WAKE_MASK                        0x8u
#define UART_C1_WAKE_SHIFT                       3
#define UART_C1_M_MASK                           0x10u
#define UART_C1_M_SHIFT                          4
#define UART_C1_RSRC_MASK                        0x20u
#define UART_C1_RSRC_SHIFT                       5
#define UART_C1_UARTSWAI_MASK                     0x40u
#define UART_C1_UARTSWAI_SHIFT                    6
#define UART_C1_LOOPS_MASK                       0x80u
#define UART_C1_LOOPS_SHIFT                      7
/* C2 Bit Fields */
#define UART_C2_SBK_MASK                         0x1u
#define UART_C2_SBK_SHIFT                        0
#define UART_C2_RWU_MASK                         0x2u
#define UART_C2_RWU_SHIFT                        1
#define UART_C2_RE_MASK                          0x4u
#define UART_C2_RE_SHIFT                         2
#define UART_C2_TE_MASK                          0x8u
#define UART_C2_TE_SHIFT                         3
#define UART_C2_ILIE_MASK                        0x10u
#define UART_C2_ILIE_SHIFT                       4
#define UART_C2_RIE_MASK                         0x20u
#define UART_C2_RIE_SHIFT                        5
#define UART_C2_TCIE_MASK                        0x40u
#define UART_C2_TCIE_SHIFT                       6
#define UART_C2_TIE_MASK                         0x80u
#define UART_C2_TIE_SHIFT                        7
/* S1 Bit Fields */
#define UART_S1_PF_MASK                          0x1u
#define UART_S1_PF_SHIFT                         0
#define UART_S1_FE_MASK                          0x2u
#define UART_S1_FE_SHIFT                         1
#define UART_S1_NF_MASK                          0x4u
#define UART_S1_NF_SHIFT                         2
#define UART_S1_OR_MASK                          0x8u
#define UART_S1_OR_SHIFT                         3
#define UART_S1_IDLE_MASK                        0x10u
#define UART_S1_IDLE_SHIFT                       4
#define UART_S1_RDRF_MASK                        0x20u
#define UART_S1_RDRF_SHIFT                       5
#define UART_S1_TC_MASK                          0x40u
#define UART_S1_TC_SHIFT                         6
#define UART_S1_TDRE_MASK                        0x80u
#define UART_S1_TDRE_SHIFT                       7
/* S2 Bit Fields */
#define UART_S2_RAF_MASK                         0x1u
#define UART_S2_RAF_SHIFT                        0
#define UART_S2_LBKDE_MASK                       0x2u
#define UART_S2_LBKDE_SHIFT                      1
#define UART_S2_BRK13_MASK                       0x4u
#define UART_S2_BRK13_SHIFT                      2
#define UART_S2_RWUID_MASK                       0x8u
#define UART_S2_RWUID_SHIFT                      3
#define UART_S2_RXINV_MASK                       0x10u
#define UART_S2_RXINV_SHIFT                      4
#define UART_S2_RXEDGIF_MASK                     0x40u
#define UART_S2_RXEDGIF_SHIFT                    6
#define UART_S2_LBKDIF_MASK                      0x80u
#define UART_S2_LBKDIF_SHIFT                     7
/* C3 Bit Fields */
#define UART_C3_PEIE_MASK                        0x1u
#define UART_C3_PEIE_SHIFT                       0
#define UART_C3_FEIE_MASK                        0x2u
#define UART_C3_FEIE_SHIFT                       1
#define UART_C3_NEIE_MASK                        0x4u
#define UART_C3_NEIE_SHIFT                       2
#define UART_C3_ORIE_MASK                        0x8u
#define UART_C3_ORIE_SHIFT                       3
#define UART_C3_TXINV_MASK                       0x10u
#define UART_C3_TXINV_SHIFT                      4
#define UART_C3_TXDIR_MASK                       0x20u
#define UART_C3_TXDIR_SHIFT                      5
#define UART_C3_T8_MASK                          0x40u
#define UART_C3_T8_SHIFT                         6
#define UART_C3_R8_MASK                          0x80u
#define UART_C3_R8_SHIFT                         7
/* D Bit Fields */
#define UART_D_RT_MASK                           0xFFu
#define UART_D_RT_SHIFT                          0
#define UART_D_RT(x)                             (((uint8_t)(((uint8_t)(x))<<UART_D_RT_SHIFT))&UART_D_RT_MASK)
/* C4 Bit Fields */
#define UART_C4_LBKDDMAS_MASK                    0x08u
#define UART_C4_LBKDDMAS_SHIFT                   3
#define UART_C4_ILDMAS_MASK                      0x10u
#define UART_C4_ILDMAS_SHIFT                     4
#define UART_C4_RDMAS_MASK                       0x20u
#define UART_C4_RDMAS_SHIFT                      5
#define UART_C4_TCDMAS_MASK                      0x40u
#define UART_C4_TCDMAS_SHIFT                     6
#define UART_C4_TDMAS_MASK                       0x80u
#define UART_C4_TDMAS_SHIFT                      7

/** UART0 Bit Fields **/
/* BDH Bit Fields */
#define UART0_BDH_SBR_MASK                        0x1Fu
#define UART0_BDH_SBR_SHIFT                       0
#define UART0_BDH_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBR_SHIFT))&UART0_BDH_SBR_MASK)
#define UART0_BDH_RXEDGIE_MASK                    0x40u
#define UART0_BDH_RXEDGIE_SHIFT                   6
#define UART0_BDH_LBKDIE_MASK                     0x80u
#define UART0_BDH_LBKDIE_SHIFT                    7
#define UART0_BDH_SBNS_MASK                       0x20u
#define UART0_BDH_SBNS_SHIFT                      5
/* BDL Bit Fields */
#define UART0_BDL_SBR_MASK                        0xFFu
#define UART0_BDL_SBR_SHIFT                       0
#define UART0_BDL_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_BDL_SBR_SHIFT))&UART0_BDL_SBR_MASK)
/* C1 Bit Fields */
#define UART0_C1_PT_MASK                          0x1u
#define UART0_C1_PT_SHIFT                         0
#define UART0_C1_PE_MASK                          0x2u
#define UART0_C1_PE_SHIFT                         1
#define UART0_C1_ILT_MASK                         0x4u
#define UART0_C1_ILT_SHIFT                        2
#define UART0_C1_WAKE_MASK                        0x8u
#define UART0_C1_WAKE_SHIFT                       3
#define UART0_C1_M_MASK                           0x10u
#define UART0_C1_M_SHIFT                          4
#define UART0_C1_RSRC_MASK                        0x20u
#define UART0_C1_RSRC_SHIFT                       5
#define UART0_C1_UART0DOZEEN_MASK                  0x40u
#define UART0_C1_UART0DOZEEN_SHIFT                 6
#define UART0_C1_LOOPS_MASK                       0x80u
#define UART0_C1_LOOPS_SHIFT                      7
/* C2 Bit Fields */
#define UART0_C2_SBK_MASK                         0x1u
#define UART0_C2_SBK_SHIFT                        0
#define UART0_C2_RWU_MASK                         0x2u
#define UART0_C2_RWU_SHIFT                        1
#define UART0_C2_RE_MASK                          0x4u
#define UART0_C2_RE_SHIFT                         2
#define UART0_C2_TE_MASK                          0x8u
#define UART0_C2_TE_SHIFT                         3
#define UART0_C2_ILIE_MASK                        0x10u
#define UART0_C2_ILIE_SHIFT                       4
#define UART0_C2_RIE_MASK                         0x20u
#define UART0_C2_RIE_SHIFT                        5
#define UART0_C2_TCIE_MASK                        0x40u
#define UART0_C2_TCIE_SHIFT                       6
#define UART0_C2_TIE_MASK                         0x80u
#define UART0_C2_TIE_SHIFT                        7
/* S1 Bit Fields */
#define UART0_S1_PF_MASK                          0x1u
#define UART0_S1_PF_SHIFT                         0
#define UART0_S1_FE_MASK                          0x2u
#define UART0_S1_FE_SHIFT                         1
#define UART0_S1_NF_MASK                          0x4u
#define UART0_S1_NF_SHIFT                         2
#define UART0_S1_OR_MASK                          0x8u
#define UART0_S1_OR_SHIFT                         3
#define UART0_S1_IDLE_MASK                        0x10u
#define UART0_S1_IDLE_SHIFT                       4
#define UART0_S1_RDRF_MASK                        0x20u
#define UART0_S1_RDRF_SHIFT                       5
#define UART0_S1_TC_MASK                          0x40u
#define UART0_S1_TC_SHIFT                         6
#define UART0_S1_TDRE_MASK                        0x80u
#define UART0_S1_TDRE_SHIFT                       7
/* S2 Bit Fields */
#define UART0_S2_RAF_MASK                         0x1u
#define UART0_S2_RAF_SHIFT                        0
#define UART0_S2_LBKDE_MASK                       0x2u
#define UART0_S2_LBKDE_SHIFT                      1
#define UART0_S2_BRK13_MASK                       0x4u
#define UART0_S2_BRK13_SHIFT                      2
#define UART0_S2_RWUID_MASK                       0x8u
#define UART0_S2_RWUID_SHIFT                      3
#define UART0_S2_RXINV_MASK                       0x10u
#define UART0_S2_RXINV_SHIFT                      4
#define UART0_S2_RXEDGIF_MASK                     0x40u
#define UART0_S2_RXEDGIF_SHIFT                    6
#define UART0_S2_LBKDIF_MASK                      0x80u
#define UART0_S2_LBKDIF_SHIFT                     7
/* C3 Bit Fields */
#define UART0_C3_PEIE_MASK                        0x1u
#define UART0_C3_PEIE_SHIFT                       0
#define UART0_C3_FEIE_MASK                        0x2u
#define UART0_C3_FEIE_SHIFT                       1
#define UART0_C3_NEIE_MASK                        0x4u
#define UART0_C3_NEIE_SHIFT                       2
#define UART0_C3_ORIE_MASK                        0x8u
#define UART0_C3_ORIE_SHIFT                       3
#define UART0_C3_TXINV_MASK                       0x10u
#define UART0_C3_TXINV_SHIFT                      4
#define UART0_C3_TXDIR_MASK                       0x20u
#define UART0_C3_TXDIR_SHIFT                      5
#define UART0_C3_R9T8_MASK                          0x40u
#define UART0_C3_R9T8_SHIFT                         6
#define UART0_C3_R8T9_MASK                          0x80u
#define UART0_C3_R8T9_SHIFT                         7
/* D Bit Fields */
#define UART0_D_RT_MASK                           0xFFu
#define UART0_D_RT_SHIFT                          0
#define UART0_D_RT(x)                             (((uint8_t)(((uint8_t)(x))<<UART0_D_RT_SHIFT))&UART0_D_RT_MASK)
/* MA1 Bit Fields */
#define UART0_MA1_MASK                            0xFFu
#define UART0_MA1_SHIFT                           0
/* MA2 Bit Fields */
#define UART0_MA2_MASK                            0xFFu
#define UART0_MA2_SHIFT                           0
/* C4 Bit Fields */
#define UART0_C4_OSR_MASK                         0x1Fu
#define UART0_C4_OSR_SHIFT                        0
#define UART0_C4_OSR(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C4_OSR_SHIFT))&UART0_C4_OSR_MASK)
#define UART0_C4_MAEN2_MASK                       0x40u
#define UART0_C4_MAEN2_SHIFT                      6
#define UART0_C4_MAEN1_MASK                       0x80u
#define UART0_C4_MAEN1_SHIFT                      7
#define UART0_C4_M10_MASK                         0x20u
#define UART0_C4_M10_SHIFT                        5
/* C5 Bit Fields */
#define UART0_C5_RESYNCDIS_MASK                   0x1u
#define UART0_C5_RESYNCDIS_SHIFT                  0
#define UART0_C5_BOTHEDGE_MASK                    0x2u
#define UART0_C5_BOTHEDGE_SHIFT                   1
#define UART0_C5_RDMAE_MASK                       0x4u
#define UART0_C5_RDMAE_SHIFT                      2
#define UART0_C5_TDMAE_MASK                       0x8u
#define UART0_C5_TDMAE_SHIFT                      3
/**
 * @}
 */ /* end of group UART0_Register_Masks */


/* UART - Peripheral instance base addresses */

/** Peripheral UART0 base pointer (!!!This is a dummy pointer!!!) */
#define UART0_BASE_PTR                           ((UART_MemMapPtr)0x4006A000u)
/** Peripheral UART1 base pointer */
#define UART1_BASE_PTR                           ((UART_MemMapPtr)0x4006B000u)
/** Peripheral UART2 base pointer */
#define UART2_BASE_PTR                           ((UART_MemMapPtr)0x4006C000u)

/* ----------------------------------------------------------------------------
   -- UART - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */


/* UART - Register instance definitions */
/* UART0 */
#define UART0_BDH                                UART0_BDH_REG(UART0_BASE_PTR)
#define UART0_BDL                                UART0_BDL_REG(UART0_BASE_PTR)
#define UART0_C1                                 UART0_C1_REG(UART0_BASE_PTR)
#define UART0_C2                                 UART0_C2_REG(UART0_BASE_PTR)
#define UART0_S1                                 UART0_S1_REG(UART0_BASE_PTR)
#define UART0_S2                                 UART0_S2_REG(UART0_BASE_PTR)
#define UART0_C3                                 UART0_C3_REG(UART0_BASE_PTR)
#define UART0_D                                  UART0_D_REG(UART0_BASE_PTR)
#define UART0_MA1                                UART0_MA1_REG(UART0_BASE_PTR)
#define UART0_MA2                                UART0_MA2_REG(UART0_BASE_PTR)
#define UART0_C4                                 UART0_C4_REG(UART0_BASE_PTR)
#define UART0_C5                                 UART0_C5_REG(UART0_BASE_PTR)
/* UART1 */
#define UART1_BDH                                UART_BDH_REG(UART1_BASE_PTR)
#define UART1_BDL                                UART_BDL_REG(UART1_BASE_PTR)
#define UART1_C1                                 UART_C1_REG(UART1_BASE_PTR)
#define UART1_C2                                 UART_C2_REG(UART1_BASE_PTR)
#define UART1_S1                                 UART_S1_REG(UART1_BASE_PTR)
#define UART1_S2                                 UART_S2_REG(UART1_BASE_PTR)
#define UART1_C3                                 UART_C3_REG(UART1_BASE_PTR)
#define UART1_D                                  UART_D_REG(UART1_BASE_PTR)
#define UART1_C4                                 UART_C4_REG(UART1_BASE_PTR)
/* UART2 */
#define UART2_BDH                                UART_BDH_REG(UART2_BASE_PTR)
#define UART2_BDL                                UART_BDL_REG(UART2_BASE_PTR)
#define UART2_C1                                 UART_C1_REG(UART2_BASE_PTR)
#define UART2_C2                                 UART_C2_REG(UART2_BASE_PTR)
#define UART2_S1                                 UART_S1_REG(UART2_BASE_PTR)
#define UART2_S2                                 UART_S2_REG(UART2_BASE_PTR)
#define UART2_C3                                 UART_C3_REG(UART2_BASE_PTR)
#define UART2_D                                  UART_D_REG(UART2_BASE_PTR)
#define UART2_C4                                 UART_C4_REG(UART2_BASE_PTR)

/**
 * @}
 */ /* end of group UART_Register_Accessor_Macros */




/** GPIO - Peripheral register structure */



typedef struct FGPIO_MemMap {
  uint32_t FPDOR;                                   /**< Port Data Output Register, offset: 0x0 */
  uint32_t FPSOR;                                   /**< Port Set Output Register, offset: 0x4 */
  uint32_t FPCOR;                                   /**< Port Clear Output Register, offset: 0x8 */
  uint32_t FPTOR;                                   /**< Port Toggle Output Register, offset: 0xC */
  uint32_t FPDIR;                                   /**< Port Data Input Register, offset: 0x10 */
  uint32_t FPDDR;                                   /**< Port Data Direction Register, offset: 0x14 */
} volatile *FGPIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define FGPIO_PDOR_REG(base)                      ((base)->FPDOR)
#define FGPIO_PSOR_REG(base)                      ((base)->FPSOR)
#define FGPIO_PCOR_REG(base)                      ((base)->FPCOR)
#define FGPIO_PTOR_REG(base)                      ((base)->FPTOR)
#define FGPIO_PDIR_REG(base)                      ((base)->FPDIR)
#define FGPIO_PDDR_REG(base)                      ((base)->FPDDR)

/**
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */
/* PDOR Bit Fields */
#define FGPIO_PDOR_PDO_MASK                       0xFFFFFFFFu
#define FGPIO_PDOR_PDO_SHIFT                      0
#define FGPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)
/* PSOR Bit Fields */
#define FGPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu
#define FGPIO_PSOR_PTSO_SHIFT                     0
#define FGPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)
/* PCOR Bit Fields */
#define FGPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu
#define FGPIO_PCOR_PTCO_SHIFT                     0
#define FGPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)
/* PTOR Bit Fields */
#define FGPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu
#define FGPIO_PTOR_PTTO_SHIFT                     0
#define FGPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)
/* PDIR Bit Fields */
#define FGPIO_PDIR_PDI_MASK                       0xFFFFFFFFu
#define FGPIO_PDIR_PDI_SHIFT                      0
#define FGPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)
/* PDDR Bit Fields */
#define FGPIO_PDDR_PDD_MASK                       0xFFFFFFFFu
#define FGPIO_PDDR_PDD_SHIFT                      0
#define FGPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)

/**
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral PTA base pointer */
#define FPTA_BASE_PTR                             ((FGPIO_MemMapPtr)0xF80FF000u)
/** Peripheral PTB base pointer */
#define FPTB_BASE_PTR                             ((FGPIO_MemMapPtr)0xF80FF040u)
/** Peripheral PTC base pointer */
#define FPTC_BASE_PTR                             ((FGPIO_MemMapPtr)0xF80FF080u)
/** Peripheral PTD base pointer */
#define FPTD_BASE_PTR                             ((FGPIO_MemMapPtr)0xF80FF0C0u)
/** Peripheral PTE base pointer */
#define FPTE_BASE_PTR                             ((FGPIO_MemMapPtr)0xF80FF100u)
		
/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
/* PTA */
#define FGPIOA_PDOR                               FGPIO_PDOR_REG(FPTA_BASE_PTR)
#define FGPIOA_PSOR                               FGPIO_PSOR_REG(FPTA_BASE_PTR)
#define FGPIOA_PCOR                               FGPIO_PCOR_REG(FPTA_BASE_PTR)
#define FGPIOA_PTOR                               FGPIO_PTOR_REG(FPTA_BASE_PTR)
#define FGPIOA_PDIR                               FGPIO_PDIR_REG(FPTA_BASE_PTR)
#define FGPIOA_PDDR                               FGPIO_PDDR_REG(FPTA_BASE_PTR)
/* PTB */
#define FGPIOB_PDOR                               FGPIO_PDOR_REG(FPTB_BASE_PTR)
#define FGPIOB_PSOR                               FGPIO_PSOR_REG(FPTB_BASE_PTR)
#define FGPIOB_PCOR                               FGPIO_PCOR_REG(FPTB_BASE_PTR)
#define FGPIOB_PTOR                               FGPIO_PTOR_REG(FPTB_BASE_PTR)
#define FGPIOB_PDIR                               FGPIO_PDIR_REG(FPTB_BASE_PTR)
#define FGPIOB_PDDR                               FGPIO_PDDR_REG(FPTB_BASE_PTR)
/* PTC */
#define FGPIOC_PDOR                               FGPIO_PDOR_REG(FPTC_BASE_PTR)
#define FGPIOC_PSOR                               FGPIO_PSOR_REG(FPTC_BASE_PTR)
#define FGPIOC_PCOR                               FGPIO_PCOR_REG(FPTC_BASE_PTR)
#define FGPIOC_PTOR                               FGPIO_PTOR_REG(FPTC_BASE_PTR)
#define FGPIOC_PDIR                               FGPIO_PDIR_REG(FPTC_BASE_PTR)
#define FGPIOC_PDDR                               FGPIO_PDDR_REG(FPTC_BASE_PTR)
/* PTD */
#define FGPIOD_PDOR                               FGPIO_PDOR_REG(FPTD_BASE_PTR)
#define FGPIOD_PSOR                               FGPIO_PSOR_REG(FPTD_BASE_PTR)
#define FGPIOD_PCOR                               FGPIO_PCOR_REG(FPTD_BASE_PTR)
#define FGPIOD_PTOR                               FGPIO_PTOR_REG(FPTD_BASE_PTR)
#define FGPIOD_PDIR                               FGPIO_PDIR_REG(FPTD_BASE_PTR)
#define FGPIOD_PDDR                               FGPIO_PDDR_REG(FPTD_BASE_PTR)
/* PTE */
#define FGPIOE_PDOR                               FGPIO_PDOR_REG(FPTE_BASE_PTR)
#define FGPIOE_PSOR                               FGPIO_PSOR_REG(FPTE_BASE_PTR)
#define FGPIOE_PCOR                               FGPIO_PCOR_REG(FPTE_BASE_PTR)
#define FGPIOE_PTOR                               FGPIO_PTOR_REG(FPTE_BASE_PTR)
#define FGPIOE_PDIR                               FGPIO_PDIR_REG(FPTE_BASE_PTR)
#define FGPIOE_PDDR                               FGPIO_PDDR_REG(FPTE_BASE_PTR)

/**
 * @}
 */ /* end of group IOPORT GPIO_Register_Accessor_Macros */


/**
 * @}
 */ /* end of group IOPORT GPIO_Peripheral */